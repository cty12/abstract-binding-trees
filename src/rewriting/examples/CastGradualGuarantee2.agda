{-# OPTIONS --rewriting #-}
module rewriting.examples.CastGradualGuarantee2 where

open import Data.List using (List; []; _Рѕи_; length; map)
open import Data.Nat
open import Data.Bool using (true; false) renaming (Bool to ­Юћ╣)
open import Data.Nat.Properties
open import Data.Product using (_,_;_├Ќ_; projРѓЂ; projРѓѓ; ╬Б-syntax; РѕЃ-syntax)
open import Data.Unit using (Ріц; tt)
open import Data.Unit.Polymorphic renaming (Ріц to topрхќ; tt to ttрхќ)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Sum using (_Ріј_; injРѓЂ; injРѓѓ)
open import Relation.Binary.PropositionalEquality as Eq
  using (_РЅА_; _РЅб_; refl; sym; cong; subst; trans)
open import Relation.Nullary using (┬г_; Dec; yes; no)
open import Var
open import rewriting.examples.Cast
open import rewriting.examples.CastEval
open import rewriting.examples.StepIndexedLogic2

data Dir : Set where
  Рєф : Dir
  РєЕ : Dir

Рё░Ріј­Юњ▒-type : Set
Рё░Ріј­Юњ▒-type = (Prec ├Ќ Dir ├Ќ Term ├Ќ Term) Ріј (Prec ├Ќ Dir ├Ќ Term ├Ќ Term)

Рё░Ріј­Юњ▒-ctx : Context
Рё░Ріј­Юњ▒-ctx = Рё░Ріј­Юњ▒-type Рѕи []

Рё░╦бРЪд_РЪД : Prec Рєњ Dir Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Now РѕЁ)
Рё░╦бРЪд AРіЉB РЪД d M MРђ▓ = (injРѓѓ (AРіЉB , d , M , MРђ▓)) Рѕѕ zero╦б

­Юњ▒╦бРЪд_РЪД : Prec Рєњ Dir Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Now РѕЁ)
­Юњ▒╦бРЪд AРіЉB РЪД d V VРђ▓ = (injРѓЂ (AРіЉB , d , V , VРђ▓)) Рѕѕ zero╦б

pre-Рё░ : Prec Рєњ Dir Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-­Юњ▒ : Prec Рєњ Dir Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)

pre-­Юњ▒ (.РўЁ , РўЁ , unkРіЉ) d (V РЪе G !РЪЕ) (VРђ▓ РЪе H !РЪЕ)
    with G РЅАрхЇ H
... | yes refl = let g = gndРЄњty G in
                 (Value V)╦б ├Ќ╦б (Value VРђ▓)╦б
                 ├Ќ╦б (Рќи╦б (­Юњ▒╦бРЪд (g , g , ReflРіЉ) РЪД d V VРђ▓))
... | no neq = РіЦ ╦б
pre-­Юњ▒ (.РўЁ , $Рѓю ╬╣Рђ▓ , unkРіЉ) d (V РЪе $рхЇ ╬╣ !РЪЕ) ($ c)
    with ($рхЇ ╬╣) РЅАрхЇ ($рхЇ ╬╣Рђ▓)
... | yes refl = (Value V)╦б ├Ќ╦б Рќи╦б (­Юњ▒╦бРЪд ($Рѓю ╬╣ , $Рѓю ╬╣ , ReflРіЉ) РЪД d V ($ c))
... | no new = РіЦ ╦б
pre-­Юњ▒ (.РўЁ , AРђ▓ РЄњ BРђ▓ , unkРіЉ) d (V РЪе РўЁРЄњРўЁ !РЪЕ) VРђ▓ =
    (Value V)╦б ├Ќ╦б (Value VРђ▓)╦б
    ├Ќ╦б Рќи╦б (­Юњ▒╦бРЪд (РўЁ РЄњ РўЁ , AРђ▓ РЄњ BРђ▓ , funРіЉ unkРіЉ unkРіЉ) РЪД d V VРђ▓)
pre-­Юњ▒ ($Рѓю ╬╣ , $Рѓю ╬╣ , baseРіЉ) d ($ c) ($ cРђ▓) = (c РЅА cРђ▓) ╦б
pre-­Юњ▒ ((A РЄњ B) , (AРђ▓ РЄњ BРђ▓) , funРіЉ AРіЉAРђ▓ BРіЉBРђ▓) d (кЏ N) (кЏ NРђ▓) =
    Рѕђ╦б[ W ] Рѕђ╦б[ WРђ▓ ] (pre-­Юњ▒ (A , AРђ▓ , AРіЉAРђ▓) d W WРђ▓)
                  Рєњ╦б (pre-Рё░ (B , BРђ▓ , BРіЉBРђ▓) d (N [ W ]) (NРђ▓ [ WРђ▓ ]))
pre-­Юњ▒ (A , AРђ▓ , AРіЉAРђ▓) d V VРђ▓ = РіЦ ╦б

instance
  TermInhabited : Inhabited Term
  TermInhabited = record { elt = ` 0 }

pre-Рё░ c Рєф M MРђ▓ =
      (Рѕђ╦б[ V ]  (M РЄЊрхЌ V)╦б Рєњ╦б ((РѕЃ╦б[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)╦б ├Ќ╦б pre-­Юњ▒ c Рєф V VРђ▓)
                            Ріј╦б (MРђ▓ РЄЊрхЄ)╦б))
   ├Ќ╦б ((M РЄЊрхЄ)╦б Рєњ╦б (MРђ▓ РЄЊрхЄ)╦б)
   ├Ќ╦б ((M РЄЉ)╦б Рєњ╦б ((MРђ▓ РЄЉ)╦б Ріј╦б (MРђ▓ РЄЊрхЄ)╦б))
pre-Рё░ c РєЕ M MРђ▓ =
      (Рѕђ╦б[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)╦б Рєњ╦б (РѕЃ╦б[ V ] (M РЄЊрхЌ V)╦б ├Ќ╦б pre-­Юњ▒ c РєЕ V VРђ▓))
   ├Ќ╦б ((MРђ▓ РЄЊрхЄ)╦б Рєњ╦б (M РЄЊрхЄ)╦б)
   ├Ќ╦б ((MРђ▓ РЄЉ)╦б Рєњ╦б (M РЄЉ)╦б)

pre-Рё░Ріј­Юњ▒ : Рё░Ріј­Юњ▒-type Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-Рё░Ріј­Юњ▒ (injРѓЂ (c , d , V , VРђ▓)) = pre-­Юњ▒ c d V VРђ▓
pre-Рё░Ріј­Юњ▒ (injРѓѓ (c , d , M , MРђ▓)) = pre-Рё░ c d M MРђ▓

Рё░Ріј­Юњ▒ : Рё░Ріј­Юњ▒-type Рєњ Setрхњ
Рё░Ріј­Юњ▒ X = ╬╝рхњ pre-Рё░Ріј­Юњ▒ X

­Юњ▒РЪд_РЪД : (c : Prec) Рєњ Dir Рєњ Term Рєњ Term Рєњ Setрхњ
­Юњ▒РЪд c РЪД d V VРђ▓ = Рё░Ріј­Юњ▒ (injРѓЂ (c , d , V , VРђ▓))

Рё░РЪд_РЪД : (c : Prec) Рєњ Dir Рєњ Term Рєњ Term Рєњ Setрхњ
Рё░РЪд c РЪД d M MРђ▓ = Рё░Ріј­Юњ▒ (injРѓѓ (c , d , M , MРђ▓))

Рё░Рєф-stmt : Рѕђ{c}{M MРђ▓}
  Рєњ Рё░РЪд c РЪД Рєф M MРђ▓ РЅАрхњ
        ((Рѕђрхњ[ V ]  (M РЄЊрхЌ V)рхњ Рєњрхњ ((РѕЃрхњ[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)рхњ ├Ќрхњ ­Юњ▒РЪд c РЪД Рєф V VРђ▓)
                            Ріјрхњ (MРђ▓ РЄЊрхЄ)рхњ))
     ├Ќрхњ ((M РЄЊрхЄ)рхњ Рєњрхњ (MРђ▓ РЄЊрхЄ)рхњ)
     ├Ќрхњ ((M РЄЉ)рхњ Рєњрхњ ((MРђ▓ РЄЉ)рхњ Ріјрхњ (MРђ▓ РЄЊрхЄ)рхњ)))
Рё░Рєф-stmt {c}{M}{MРђ▓} =
  let XРѓѓ = injРѓѓ (c , Рєф , M , MРђ▓) in
  Рё░РЪд c РЪД Рєф M MРђ▓                                                РЕдРЪе РЅАрхњ-refl refl РЪЕ
  ╬╝рхњ pre-Рё░Ріј­Юњ▒ XРѓѓ                                     РЕдРЪе fixpointрхњ pre-Рё░Ріј­Юњ▒ XРѓѓ РЪЕ
  # (pre-Рё░Ріј­Юњ▒ XРѓѓ) (Рё░Ріј­Юњ▒ , ttрхќ)
      РЕдРЪе (cong-├Ќрхњ (cong-Рѕђ ╬╗ V Рєњ cong-Рєњ{S = (M РЄЊрхЌ V)рхњ} (РЅАрхњ-refl refl) (cong-Ріјрхњ (cong-РѕЃ (╬╗ VРђ▓ Рєњ cong-├Ќрхњ (РЅАрхњ-refl refl) (РЅАрхњ-sym (fixpointрхњ pre-Рё░Ріј­Юњ▒ (injРѓЂ (c , Рєф , V , VРђ▓)))))) (РЅАрхњ-refl refl))) (РЅАрхњ-refl refl)) РЪЕ
      ((Рѕђрхњ[ V ]  (M РЄЊрхЌ V)рхњ Рєњрхњ ((РѕЃрхњ[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)рхњ ├Ќрхњ ­Юњ▒РЪд c РЪД Рєф V VРђ▓)
                            Ріјрхњ (MРђ▓ РЄЊрхЄ)рхњ))
   ├Ќрхњ ((M РЄЊрхЄ)рхњ Рєњрхњ (MРђ▓ РЄЊрхЄ)рхњ)
   ├Ќрхњ ((M РЄЉ)рхњ Рєњрхњ ((MРђ▓ РЄЉ)рхњ Ріјрхњ (MРђ▓ РЄЊрхЄ)рхњ)))           Рѕј

Рё░РєЕ-stmt : Рѕђ{c}{M MРђ▓}
  Рєњ Рё░РЪд c РЪД РєЕ M MРђ▓ РЅАрхњ
      ((Рѕђрхњ[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)рхњ Рєњрхњ (РѕЃрхњ[ V ] (M РЄЊрхЌ V)рхњ ├Ќрхњ ­Юњ▒РЪд c РЪД РєЕ V VРђ▓))
   ├Ќрхњ ((MРђ▓ РЄЊрхЄ)рхњ Рєњрхњ (M РЄЊрхЄ)рхњ)
   ├Ќрхњ ((MРђ▓ РЄЉ)рхњ Рєњрхњ (M РЄЉ)рхњ))
Рё░РєЕ-stmt {c}{M}{MРђ▓} =
  let XРѓѓ = injРѓѓ (c , РєЕ , M , MРђ▓) in
  Рё░РЪд c РЪД РєЕ M MРђ▓                                                РЕдРЪе РЅАрхњ-refl refl РЪЕ
  ╬╝рхњ pre-Рё░Ріј­Юњ▒ XРѓѓ                                     РЕдРЪе fixpointрхњ pre-Рё░Ріј­Юњ▒ XРѓѓ РЪЕ
  # (pre-Рё░Ріј­Юњ▒ XРѓѓ) (Рё░Ріј­Юњ▒ , ttрхќ)
      РЕдРЪе cong-├Ќрхњ (cong-Рѕђ ╬╗ VРђ▓ Рєњ cong-Рєњ{S = (MРђ▓ РЄЊрхЌ VРђ▓)рхњ} (РЅАрхњ-refl refl) (cong-РѕЃ ╬╗ V Рєњ cong-├Ќрхњ (РЅАрхњ-refl refl) (РЅАрхњ-sym (fixpointрхњ pre-Рё░Ріј­Юњ▒ (injРѓЂ (c , РєЕ , V , VРђ▓)))))) (cong-├Ќрхњ (РЅАрхњ-refl refl) (РЅАрхњ-refl refl)) РЪЕ
      ((Рѕђрхњ[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)рхњ Рєњрхњ (РѕЃрхњ[ V ] (M РЄЊрхЌ V)рхњ ├Ќрхњ ­Юњ▒РЪд c РЪД РєЕ V VРђ▓))
   ├Ќрхњ ((MРђ▓ РЄЊрхЄ)рхњ Рєњрхњ (M РЄЊрхЄ)рхњ)
   ├Ќрхњ ((MРђ▓ РЄЉ)рхњ Рєњрхњ (M РЄЉ)рхњ))            Рѕј

­Юњ▒-base : Рѕђ{╬╣}{d}{c}{cРђ▓}
  Рєњ ­Юњ▒РЪд ($Рѓю ╬╣ , $Рѓю ╬╣ , baseРіЉ) РЪД d ($ c) ($ cРђ▓) РЅАрхњ (c РЅА cРђ▓) рхњ
­Юњ▒-base{╬╣}{d}{c}{cРђ▓} = РЅАрхњ-intro ╬╗ k Рєњ (╬╗ x Рєњ x) , (╬╗ x Рєњ x)

­Юњ▒-base-intro : Рѕђ{­ЮњФ}{╬╣}{d}{c} Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд ($Рѓю ╬╣ , $Рѓю ╬╣ , baseРіЉ) РЪД d ($ c) ($ c)
­Юњ▒-base-intro{╬╣}{d}{c} = substрхњ (РЅАрхњ-sym ­Юњ▒-base) (constрхњI refl)

­Юњ▒-fun : Рѕђ{A B AРђ▓ BРђ▓}{AРіЉAРђ▓ : A РіЉ AРђ▓}{BРіЉBРђ▓ : B РіЉ BРђ▓}{d}{N}{NРђ▓}
   Рєњ (­Юњ▒РЪд A РЄњ B , AРђ▓ РЄњ BРђ▓ , funРіЉ AРіЉAРђ▓ BРіЉBРђ▓ РЪД d (кЏ N) (кЏ NРђ▓))
      РЅАрхњ (Рѕђрхњ[ W ] Рѕђрхњ[ WРђ▓ ] ((­Юњ▒РЪд A , AРђ▓ , AРіЉAРђ▓ РЪД d W WРђ▓)
                         Рєњрхњ (Рё░РЪд B , BРђ▓ , BРіЉBРђ▓ РЪД d (N [ W ]) (NРђ▓ [ WРђ▓ ]))))
­Юњ▒-fun {A}{B}{AРђ▓}{BРђ▓}{AРіЉAРђ▓}{BРіЉBРђ▓}{d}{N}{NРђ▓} =
   let XРѓЂ = injРѓЂ ((A РЄњ B , AРђ▓ РЄњ BРђ▓ , funРіЉ AРіЉAРђ▓ BРіЉBРђ▓) , d , кЏ N , кЏ NРђ▓) in
   let XРѓѓ = ╬╗ W WРђ▓ Рєњ injРѓЂ ((A , AРђ▓ , AРіЉAРђ▓) , d , W , WРђ▓) in
   let XРѓЃ = ╬╗ W WРђ▓ Рєњ injРѓѓ ((B , BРђ▓ , BРіЉBРђ▓) , d , N [ W ] , NРђ▓ [ WРђ▓ ]) in
   (­Юњ▒РЪд A РЄњ B , AРђ▓ РЄњ BРђ▓ , funРіЉ AРіЉAРђ▓ BРіЉBРђ▓ РЪД d (кЏ N) (кЏ NРђ▓))    РЕдРЪе РЅАрхњ-refl refl РЪЕ
   Рё░Ріј­Юњ▒ XРѓЂ                                            РЕдРЪе fixpointрхњ pre-Рё░Ріј­Юњ▒ XРѓЂ РЪЕ
   # (pre-Рё░Ріј­Юњ▒ XРѓЂ) (Рё░Ріј­Юњ▒ , ttрхќ)
     РЕдРЪе cong-Рѕђ (╬╗ W Рєњ cong-Рѕђ ╬╗ WРђ▓ Рєњ
           cong-Рєњ (РЅАрхњ-sym (fixpointрхњ pre-Рё░Ріј­Юњ▒ (XРѓѓ W WРђ▓)))
                  (РЅАрхњ-sym (fixpointрхњ pre-Рё░Ріј­Юњ▒ (XРѓЃ W WРђ▓)))) РЪЕ
   (Рѕђрхњ[ W ] Рѕђрхњ[ WРђ▓ ] (­Юњ▒РЪд A , AРђ▓ , AРіЉAРђ▓ РЪД d W WРђ▓
                    Рєњрхњ Рё░РЪд B , BРђ▓ , BРіЉBРђ▓ РЪД d (N [ W ]) (NРђ▓ [ WРђ▓ ])))    Рѕј

­Юњ▒-fun-elim : Рѕђ{­ЮњФ}{A}{B}{AРђ▓}{BРђ▓}{c : A РіЉ AРђ▓}{d : B РіЉ BРђ▓}{dir}{V}{VРђ▓}{R}
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд A РЄњ B , AРђ▓ РЄњ BРђ▓ , funРіЉ c d РЪД dir V VРђ▓
   Рєњ (Рѕђ N NРђ▓ Рєњ V РЅА кЏ N Рєњ VРђ▓ РЅА кЏ NРђ▓ 
             Рєњ (Рѕђ{W WРђ▓} Рєњ ­ЮњФ Рібрхњ (­Юњ▒РЪд A , AРђ▓ , c РЪД dir W WРђ▓)
                             Рєњрхњ (Рё░РЪд B , BРђ▓ , d РЪД dir (N [ W ]) (NРђ▓ [ WРђ▓ ])))
             Рєњ ­ЮњФ Рібрхњ R)
     --------------------------------------------------------------------
   Рєњ ­ЮњФ Рібрхњ R
­Юњ▒-fun-elim {­ЮњФ}{A}{B}{AРђ▓}{BРђ▓}{c}{d}{dir}{V}{VРђ▓}{R} Ріб­Юњ▒VVРђ▓ cont =
  Рібрхњ-sucP Ріб­Юњ▒VVРђ▓ ╬╗ { ­Юњ▒VVРђ▓sn Рєњ G {V}{VРђ▓} ­Юњ▒VVРђ▓sn Ріб­Юњ▒VVРђ▓ cont }
  where
  G : Рѕђ{V}{VРђ▓}{n}
     Рєњ # (­Юњ▒РЪд  A РЄњ B , AРђ▓ РЄњ BРђ▓ , funРіЉ c d РЪД dir V VРђ▓) (suc n)
     Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд A РЄњ B , AРђ▓ РЄњ BРђ▓ , funРіЉ c d РЪД dir V VРђ▓
     Рєњ (Рѕђ N NРђ▓ Рєњ V РЅА кЏ N Рєњ VРђ▓ РЅА кЏ NРђ▓ 
             Рєњ (Рѕђ{W WРђ▓} Рєњ ­ЮњФ Рібрхњ (­Юњ▒РЪд A , AРђ▓ , c РЪД dir W WРђ▓)
                             Рєњрхњ (Рё░РЪд B , BРђ▓ , d РЪД dir (N [ W ]) (NРђ▓ [ WРђ▓ ])))
             Рєњ ­ЮњФ Рібрхњ R)
     Рєњ ­ЮњФ Рібрхњ R
  G {кЏ N}{кЏ NРђ▓}{n} ­Юњ▒VVРђ▓ Ріб­Юњ▒VVРђ▓ cont = cont N NРђ▓ refl refl ╬╗ {W}{WРђ▓} Рєњ
     instрхњ (instрхњ (substрхњ ­Юњ▒-fun Ріб­Юњ▒VVРђ▓) W) WРђ▓ 

{- Relate Open Terms -}

­ЮЊќРЪд_РЪД : (╬Њ : List Prec) Рєњ Dir Рєњ Subst Рєњ Subst Рєњ List Setрхњ
­ЮЊќРЪд [] РЪД d ¤Ѓ ¤ЃРђ▓ = []
­ЮЊќРЪд c Рѕи ╬Њ РЪД d ¤Ѓ ¤ЃРђ▓ = (­Юњ▒РЪд c РЪД d (¤Ѓ 0) (¤ЃРђ▓ 0))
                     Рѕи ­ЮЊќРЪд ╬Њ РЪД d (╬╗ x Рєњ ¤Ѓ (suc x)) (╬╗ x Рєњ ¤ЃРђ▓ (suc x))

_РѕБ_Ріе_РіЉ_Рдѓ_ : List Prec Рєњ Dir Рєњ Term Рєњ Term Рєњ Prec Рєњ Set
╬Њ РѕБ d Ріе M РіЉ MРђ▓ Рдѓ c = Рѕђ (╬│ ╬│Рђ▓ : Subst)
   Рєњ ­ЮЊќРЪд ╬Њ РЪД d ╬│ ╬│Рђ▓ Рібрхњ Рё░РЪд c РЪД d (РЪф ╬│ РЪФ M) (РЪф ╬│Рђ▓ РЪФ MРђ▓)

{- Related values are syntactic values -}

­Юњ▒РЄњValue : Рѕђ {k}{d} c M MРђ▓
   Рєњ # (­Юњ▒РЪд c РЪД d M MРђ▓) (suc k)
     ------------------------
   Рєњ Value M ├Ќ Value MРђ▓
­Юњ▒РЄњValue {k} (.РўЁ , РўЁ , unkРіЉ) (V РЪе G !РЪЕ) (VРђ▓ РЪе H !РЪЕ) ­Юњ▒MMРђ▓
    with G РЅАрхЇ H
... | no neq = РіЦ-elim ­Юњ▒MMРђ▓
... | yes refl
    with ­Юњ▒MMРђ▓
... | v , vРђ▓ , _ = (v РїЕ G Рїф) , (vРђ▓ РїЕ G Рїф)
­Юњ▒РЄњValue {k} (.РўЁ , $Рѓю ╬╣Рђ▓ , unkРіЉ) (V РЪе $рхЇ ╬╣ !РЪЕ) ($ c) ­Юњ▒MMРђ▓
    with  ($рхЇ ╬╣) РЅАрхЇ ($рхЇ ╬╣Рђ▓)
... | no neq = РіЦ-elim ­Юњ▒MMРђ▓
... | yes refl
    with ­Юњ▒MMРђ▓
... | v , _ = (v РїЕ $рхЇ ╬╣Рђ▓ Рїф) , ($╠г c)
­Юњ▒РЄњValue {k} (.РўЁ , AРђ▓ РЄњ BРђ▓ , unkРіЉ) (V РЪе РўЁРЄњРўЁ !РЪЕ) VРђ▓ ­Юњ▒VVРђ▓
    with ­Юњ▒VVРђ▓
... | v , vРђ▓ , _ = (v РїЕ РўЁРЄњРўЁ Рїф) , vРђ▓
­Юњ▒РЄњValue {k} ($Рѓю ╬╣ , $Рѓю ╬╣ , baseРіЉ) ($ c) ($ cРђ▓) refl = ($╠г c) , ($╠г c)
­Юњ▒РЄњValue {k} ((A РЄњ B) , (AРђ▓ РЄњ BРђ▓) , funРіЉ AРіЉAРђ▓ BРіЉBРђ▓) (кЏ N) (кЏ NРђ▓) ­Юњ▒VVРђ▓ =
    (кЏ╠г N) , (кЏ╠г NРђ▓)

{- Related values are related expressions -}

­Юњ▒РЄњРё░ : Рѕђ{c : Prec}{d}{­ЮњФ}{V VРђ▓}
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд c РЪД d V VРђ▓
     -------------------
   Рєњ ­ЮњФ Рібрхњ Рё░РЪд c РЪД d V VРђ▓
­Юњ▒РЄњРё░ {c}{Рєф}{­ЮњФ}{V}{VРђ▓} Ріб­Юњ▒VVРђ▓ = substрхњ (РЅАрхњ-sym Рё░Рєф-stmt)
  ((╬Џрхњ[ VРѓЂ ] (РєњрхњI
     (Рібрхњ-sucP Zрхњ (╬╗ (k , A , РібV , РібVРѓЂ , v , evalV=VРѓЂ) Рєњ 
     (injРѓЂрхњ (Рібрхњ-РѕЃ-intro {!!} ({!!} ,рхњ {!!})))))
     ))
  ,рхњ ({!!} ,рхњ {!!}))
­Юњ▒РЄњРё░ {c}{РєЕ}{­ЮњФ}{V}{VРђ▓} Ріб­Юњ▒VVРђ▓ = substрхњ (РЅАрхњ-sym Рё░РєЕ-stmt) {!!}
