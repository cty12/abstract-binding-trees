{-# OPTIONS --rewriting #-}
module rewriting.examples.CastGradualGuarantee2 where

open import Data.List using (List; []; _Рѕи_; length; map)
open import Data.Nat
open import Data.Bool using (true; false) renaming (Bool to ­Юћ╣)
open import Data.Nat.Properties
open import Data.Product using (_,_;_├Ќ_; projРѓЂ; projРѓѓ; ╬Б-syntax; РѕЃ-syntax)
open import Data.Unit using (Ріц; tt)
open import Data.Unit.Polymorphic renaming (Ріц to topрхќ; tt to ttрхќ)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Sum using (_Ріј_; injРѓЂ; injРѓѓ)
open import Relation.Binary.PropositionalEquality as Eq
  using (_РЅА_; _РЅб_; refl; sym; cong; subst; trans)
open import Relation.Nullary using (┬г_; Dec; yes; no)
open import Var
open import rewriting.examples.Cast
open import rewriting.examples.CastEval
open import rewriting.examples.StepIndexedLogic2

Рё░Ріј­Юњ▒-type : Set
Рё░Ріј­Юњ▒-type = (Prec ├Ќ Term ├Ќ Term) Ріј (Prec ├Ќ Term ├Ќ Term)

Рё░Ріј­Юњ▒-ctx : Context
Рё░Ріј­Юњ▒-ctx = Рё░Ріј­Юњ▒-type Рѕи []

Рё░╦бРЪд_РЪД : Prec Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Now РѕЁ)
Рё░╦бРЪд AРіЉB РЪД M MРђ▓ = (injРѓѓ (AРіЉB , M , MРђ▓)) Рѕѕ zero╦б

­Юњ▒╦бРЪд_РЪД : Prec Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Now РѕЁ)
­Юњ▒╦бРЪд AРіЉB РЪД V VРђ▓ = (injРѓЂ (AРіЉB , V , VРђ▓)) Рѕѕ zero╦б

pre-Рё░ : Prec Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-­Юњ▒ : Prec Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)

pre-­Юњ▒ (.РўЁ , РўЁ , unkРіЉ) (V РЪе G !РЪЕ) (VРђ▓ РЪе H !РЪЕ)
    with G РЅАрхЇ H
... | yes refl = let g = gndРЄњty G in
                 (Value V)╦б ├Ќ╦б (Value VРђ▓)╦б
                 ├Ќ╦б (Рќи╦б (­Юњ▒╦бРЪд (g , g , ReflРіЉ) РЪД V VРђ▓))
... | no neq = РіЦ ╦б
pre-­Юњ▒ (.РўЁ , $Рѓю ╬╣Рђ▓ , unkРіЉ) (V РЪе $рхЇ ╬╣ !РЪЕ) ($ c)
    with ($рхЇ ╬╣) РЅАрхЇ ($рхЇ ╬╣Рђ▓)
... | yes refl = (Value V)╦б ├Ќ╦б Рќи╦б (­Юњ▒╦бРЪд ($Рѓю ╬╣ , $Рѓю ╬╣ , ReflРіЉ) РЪД V ($ c))
... | no new = РіЦ ╦б
pre-­Юњ▒ (.РўЁ , AРђ▓ РЄњ BРђ▓ , unkРіЉ) (V РЪе РўЁРЄњРўЁ !РЪЕ) VРђ▓ =
    (Value V)╦б ├Ќ╦б (Value VРђ▓)╦б
    ├Ќ╦б Рќи╦б (­Юњ▒╦бРЪд (РўЁ РЄњ РўЁ , AРђ▓ РЄњ BРђ▓ , funРіЉ unkРіЉ unkРіЉ) РЪД V VРђ▓)
pre-­Юњ▒ ($Рѓю ╬╣ , $Рѓю ╬╣ , baseРіЉ) ($ c) ($ cРђ▓) = (c РЅА cРђ▓) ╦б
pre-­Юњ▒ ((A РЄњ B) , (AРђ▓ РЄњ BРђ▓) , funРіЉ AРіЉAРђ▓ BРіЉBРђ▓) (кЏ N) (кЏ NРђ▓) =
    Рѕђ╦б[ W ] Рѕђ╦б[ WРђ▓ ] (pre-­Юњ▒ (A , AРђ▓ , AРіЉAРђ▓) W WРђ▓)
                  Рєњ╦б (pre-Рё░ (B , BРђ▓ , BРіЉBРђ▓) (N [ W ]) (NРђ▓ [ WРђ▓ ]))
pre-­Юњ▒ (A , AРђ▓ , AРіЉAРђ▓) V VРђ▓ = РіЦ ╦б

instance
  TermInhabited : Inhabited Term
  TermInhabited = record { elt = ` 0 }

pre-Рё░ c M MРђ▓ =
      (Рѕђ╦б[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)╦б Рєњ╦б (РѕЃ╦б[ V ] (M РЄЊрхЌ V)╦б ├Ќ╦б pre-­Юњ▒ c V VРђ▓))
   ├Ќ╦б ((MРђ▓ РЄЊрхЄ)╦б Рєњ╦б (M РЄЊрхЄ)╦б)
   ├Ќ╦б ((MРђ▓ РЄЉ)╦б Рєњ╦б (M РЄЉ)╦б)
   ├Ќ╦б (Рѕђ╦б[ V ]  (M РЄЊрхЌ V)╦б Рєњ╦б ((РѕЃ╦б[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)╦б ├Ќ╦б pre-­Юњ▒ c V VРђ▓)
                            Ріј╦б (MРђ▓ РЄЊрхЄ)╦б))
   ├Ќ╦б ((M РЄЊрхЄ)╦б Рєњ╦б (MРђ▓ РЄЊрхЄ)╦б)
   ├Ќ╦б ((M РЄЉ)╦б Рєњ╦б ((MРђ▓ РЄЉ)╦б Ріј╦б (MРђ▓ РЄЊрхЄ)╦б))

pre-Рё░Ріј­Юњ▒ : Рё░Ріј­Юњ▒-type Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-Рё░Ріј­Юњ▒ (injРѓЂ (c , V , VРђ▓)) = pre-­Юњ▒ c V VРђ▓
pre-Рё░Ріј­Юњ▒ (injРѓѓ (c , M , MРђ▓)) = pre-Рё░ c M MРђ▓

Рё░Ріј­Юњ▒ : Рё░Ріј­Юњ▒-type Рєњ Setрхњ
Рё░Ріј­Юњ▒ X = ╬╝рхњ pre-Рё░Ріј­Юњ▒ X

­Юњ▒РЪд_РЪД : (c : Prec) Рєњ Term Рєњ Term Рєњ Setрхњ
­Юњ▒РЪд c РЪД V VРђ▓ = Рё░Ріј­Юњ▒ (injРѓЂ (c , V , VРђ▓))

Рё░РЪд_РЪД : (c : Prec) Рєњ Term Рєњ Term Рєњ Setрхњ
Рё░РЪд c РЪД M MРђ▓ = Рё░Ріј­Юњ▒ (injРѓѓ (c , M , MРђ▓))

Рё░-stmt : Рѕђ{c}{M MРђ▓}
  Рєњ Рё░РЪд c РЪД M MРђ▓ РЅАрхњ
      ((Рѕђрхњ[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)рхњ Рєњрхњ (РѕЃрхњ[ V ] (M РЄЊрхЌ V)рхњ ├Ќрхњ ­Юњ▒РЪд c РЪД V VРђ▓))
   ├Ќрхњ ((MРђ▓ РЄЊрхЄ)рхњ Рєњрхњ (M РЄЊрхЄ)рхњ)
   ├Ќрхњ ((MРђ▓ РЄЉ)рхњ Рєњрхњ (M РЄЉ)рхњ)
   ├Ќрхњ (Рѕђрхњ[ V ]  (M РЄЊрхЌ V)рхњ Рєњрхњ ((РѕЃрхњ[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)рхњ ├Ќрхњ ­Юњ▒РЪд c РЪД V VРђ▓)
                            Ріјрхњ (MРђ▓ РЄЊрхЄ)рхњ))
   ├Ќрхњ ((M РЄЊрхЄ)рхњ Рєњрхњ (MРђ▓ РЄЊрхЄ)рхњ)
   ├Ќрхњ ((M РЄЉ)рхњ Рєњрхњ ((MРђ▓ РЄЉ)рхњ Ріјрхњ (MРђ▓ РЄЊрхЄ)рхњ)))
Рё░-stmt {c}{M}{MРђ▓} =
  let XРѓѓ = injРѓѓ (c , M , MРђ▓) in
  Рё░РЪд c РЪД M MРђ▓                                                РЕдРЪе РЅАрхњ-refl refl РЪЕ
  ╬╝рхњ pre-Рё░Ріј­Юњ▒ XРѓѓ                                     РЕдРЪе fixpointрхњ pre-Рё░Ріј­Юњ▒ XРѓѓ РЪЕ
  # (pre-Рё░Ріј­Юњ▒ XРѓѓ) (Рё░Ріј­Юњ▒ , ttрхќ)
      РЕдРЪе cong-├Ќрхњ (cong-Рѕђ ╬╗ VРђ▓ Рєњ cong-Рєњ{S = (MРђ▓ РЄЊрхЌ VРђ▓)рхњ} (РЅАрхњ-refl refl) (cong-РѕЃ ╬╗ V Рєњ cong-├Ќрхњ (РЅАрхњ-refl refl) (РЅАрхњ-sym (fixpointрхњ pre-Рё░Ріј­Юњ▒ (injРѓЂ (c , V , VРђ▓)))))) (cong-├Ќрхњ (РЅАрхњ-refl refl) (cong-├Ќрхњ (РЅАрхњ-refl refl)
           (cong-├Ќрхњ (cong-Рѕђ ╬╗ V Рєњ cong-Рєњ{S = (M РЄЊрхЌ V)рхњ} (РЅАрхњ-refl refl) (cong-Ріјрхњ (cong-РѕЃ (╬╗ VРђ▓ Рєњ cong-├Ќрхњ (РЅАрхњ-refl refl) (РЅАрхњ-sym (fixpointрхњ pre-Рё░Ріј­Юњ▒ (injРѓЂ (c , (V , VРђ▓))))))) (РЅАрхњ-refl refl))) (РЅАрхњ-refl refl)))) РЪЕ
      ((Рѕђрхњ[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)рхњ Рєњрхњ (РѕЃрхњ[ V ] (M РЄЊрхЌ V)рхњ ├Ќрхњ ­Юњ▒РЪд c РЪД V VРђ▓))
   ├Ќрхњ ((MРђ▓ РЄЊрхЄ)рхњ Рєњрхњ (M РЄЊрхЄ)рхњ)
   ├Ќрхњ ((MРђ▓ РЄЉ)рхњ Рєњрхњ (M РЄЉ)рхњ)
   ├Ќрхњ (Рѕђрхњ[ V ]  (M РЄЊрхЌ V)рхњ Рєњрхњ ((РѕЃрхњ[ VРђ▓ ] (MРђ▓ РЄЊрхЌ VРђ▓)рхњ ├Ќрхњ ­Юњ▒РЪд c РЪД V VРђ▓)
                            Ріјрхњ (MРђ▓ РЄЊрхЄ)рхњ))
   ├Ќрхњ ((M РЄЊрхЄ)рхњ Рєњрхњ (MРђ▓ РЄЊрхЄ)рхњ)
   ├Ќрхњ ((M РЄЉ)рхњ Рєњрхњ ((MРђ▓ РЄЉ)рхњ Ріјрхњ (MРђ▓ РЄЊрхЄ)рхњ)))           Рѕј
