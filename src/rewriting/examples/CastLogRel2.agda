{-# OPTIONS --without-K --rewriting --allow-unsolved-metas #-}
module rewriting.examples.CastLogRel2 where

open import Agda.Primitive using (lzero)
open import Data.List using (List; []; _‚à∑_; length)
open import Data.Nat
open import Data.Nat.Induction
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.Nat.Properties
open import Data.Product using (_,_;_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Unit.Polymorphic using (‚ä§; tt)
open import Data.Vec using (Vec) renaming ([] to []Ãå; _‚à∑_ to _‚à∑Ãå_)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Induction using (RecStruct)
open import Induction.WellFounded as WF
open import Data.Product.Relation.Binary.Lex.Strict
  using (√ó-Lex; √ó-wellFounded; √ó-preorder)
open import Relation.Binary using (Rel)
open import Relation.Binary.PropositionalEquality as Eq
  using (_‚â°_; _‚â¢_; refl; sym; cong; subst; trans)
open Eq.‚â°-Reasoning
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Sig
open import Var
open import Structures using (extensionality)
open import rewriting.examples.Cast

{- Lexicographic Recursion/Induction -}

_<‚ÇÇ_ : Rel (‚Ñï √ó ‚Ñï) lzero
_<‚ÇÇ_ = √ó-Lex _‚â°_ _<_ _<_

less-eq-less : ‚àÄ {x y x‚Ä≤ y‚Ä≤} ‚Üí x ‚â§ x‚Ä≤ ‚Üí y < y‚Ä≤ ‚Üí (x , y) <‚ÇÇ (x‚Ä≤ , y‚Ä≤)
less-eq-less {x}{y}{x‚Ä≤}{y‚Ä≤} lt1 lt2
    with x ‚âü x‚Ä≤
... | yes refl = inj‚ÇÇ (refl , lt2)
... | no neq = inj‚ÇÅ (‚â§‚àß‚â¢‚áí< lt1 neq)

<‚ÇÇ-Rec : ‚àÄ{‚Ñì} ‚Üí RecStruct (‚Ñï √ó ‚Ñï) ‚Ñì ‚Ñì
<‚ÇÇ-Rec = WfRec _<‚ÇÇ_

<‚ÇÇ-wellFounded : WellFounded _<‚ÇÇ_
<‚ÇÇ-wellFounded = √ó-wellFounded <-wellFounded <-wellFounded

open WF.All <‚ÇÇ-wellFounded renaming (wfRec to <‚ÇÇ-rec)


{- Logical Relation for Type Safety -}

ValPred : ‚Ñï √ó ‚Ñï ‚Üí Set‚ÇÅ
ValPred (k , s) = (A : Type) ‚Üí (s ‚â° size A) ‚Üí Term ‚Üí Set

{- This is already proved somewhere in the stdlib but I failed to figure out how to get to it. -}
<‚ÇÇ-trans : ‚àÄ{p q r} ‚Üí p <‚ÇÇ q ‚Üí q <‚ÇÇ r ‚Üí p <‚ÇÇ r
<‚ÇÇ-trans (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) = inj‚ÇÅ (<-trans x x‚ÇÅ)
<‚ÇÇ-trans (inj‚ÇÅ x) (inj‚ÇÇ (refl , snd)) = inj‚ÇÅ x
<‚ÇÇ-trans (inj‚ÇÇ (refl , snd)) (inj‚ÇÅ x) = inj‚ÇÅ x
<‚ÇÇ-trans (inj‚ÇÇ (refl , x)) (inj‚ÇÇ (refl , y)) = inj‚ÇÇ (refl , <-trans x y)

<‚ÇÇ-Rec-down : ‚àÄ{P : ‚Ñï √ó ‚Ñï ‚Üí Set‚ÇÅ}{p}{q}
   ‚Üí p <‚ÇÇ q
   ‚Üí <‚ÇÇ-Rec P q
   ‚Üí <‚ÇÇ-Rec P p
<‚ÇÇ-Rec-down p<q Pq y y<p = Pq y (<‚ÇÇ-trans y<p p<q)

<‚ÇÇ-Rec-subtract : ‚àÄ{P : ‚Ñï √ó ‚Ñï ‚Üí Set‚ÇÅ}{k}{j}{s}
   ‚Üí <‚ÇÇ-Rec P (k , s)
   ‚Üí <‚ÇÇ-Rec P (k ‚à∏ j , s)
<‚ÇÇ-Rec-subtract {P} {zero} {j} Pk rewrite 0‚à∏n‚â°0 j = Pk
<‚ÇÇ-Rec-subtract {P} {suc k} {zero} Pk = Pk
<‚ÇÇ-Rec-subtract {P} {suc k} {suc j} Pk = <‚ÇÇ-Rec-down (inj‚ÇÅ (s‚â§s (m‚à∏n‚â§m k j))) Pk

V-step : (p : ‚Ñï √ó ‚Ñï) ‚Üí (<‚ÇÇ-Rec ValPred p) ‚Üí ValPred p
V-step (k , .(size ‚òÖ)) rec ‚òÖ refl (∆õ N) = ‚ä•
V-step (k , .(size ‚òÖ)) rec ‚òÖ refl ($ c) = ‚ä•
V-step (zero , .(size ‚òÖ)) rec ‚òÖ refl (V ‚ü® g !‚ü©) = Value V
V-step (suc k , .(size ‚òÖ)) rec ‚òÖ refl ((op-inject {G} g) ‚¶Ö cons (ast V) nil ‚¶Ü) =
  V-step (k , size G) (<‚ÇÇ-Rec-down (inj‚ÇÅ (s‚â§s ‚â§-refl)) rec) G refl V
V-step (k , .(size ‚òÖ)) rec ‚òÖ refl (L ¬∑ M) = ‚ä•
V-step (k , .(size ‚òÖ)) rec ‚òÖ refl (` x) = ‚ä•
V-step (k , .(size ‚òÖ)) rec ‚òÖ refl (V ‚ü® h ?‚ü©) = ‚ä•
V-step (k , .(size ‚òÖ)) rec ‚òÖ refl blame = ‚ä•

V-step (k , .(size ($‚Çú Œπ))) rec ($‚Çú Œπ) refl (∆õ N) = ‚ä•
V-step (k , .(size ($‚Çú Œπ))) rec ($‚Çú Œπ) refl ((op-lit {Œπ‚Ä≤} c) ‚¶Ö nil ‚¶Ü) = Œπ ‚â° Œπ‚Ä≤
V-step (k , .(size ($‚Çú Œπ))) rec ($‚Çú Œπ) refl (V ‚ü® g !‚ü©) = ‚ä•
V-step (k , .(size ($‚Çú Œπ))) rec ($‚Çú Œπ) refl (L ¬∑ M) = ‚ä•
V-step (k , .(size ($‚Çú Œπ))) rec ($‚Çú Œπ) refl (` x) = ‚ä•
V-step (k , .(size ($‚Çú Œπ))) rec ($‚Çú Œπ) refl (V ‚ü® h ?‚ü©) = ‚ä•
V-step (k , .(size ($‚Çú Œπ))) rec ($‚Çú Œπ) refl blame = ‚ä•

V-step (k , .(size (A ‚áí B))) rec (A ‚áí B) refl (∆õ N) =
   ‚àÄ W (j : ‚Ñï) ‚Üí (lt : j ‚â§ k)
         ‚Üí rec (j , size A) (less-eq-less lt (s‚â§s (m‚â§m‚äîn (size A) (size B)))) A refl W
         ‚Üí ‚àÄ N‚Ä≤ ‚Üí (NW‚ÜíN‚Ä≤ : N [ W ] ‚Äî‚Ü† N‚Ä≤) ‚Üí (len NW‚ÜíN‚Ä≤ < j)
         ‚Üí (rec (j ‚à∏ len NW‚ÜíN‚Ä≤ , size B)
                (less-eq-less (‚â§-trans (m‚à∏n‚â§m j (len NW‚ÜíN‚Ä≤)) lt) (s‚â§s (m‚â§n‚äîm (size A) (size B)))) B refl N‚Ä≤)
           ‚äé (‚àÉ[ N‚Ä≥ ] (N‚Ä≤ ‚Äî‚Üí N‚Ä≥))
           ‚äé N‚Ä≤ ‚â° blame
V-step (k , .(size (A ‚áí B))) rec (A ‚áí B) refl (` x) = ‚ä•
V-step (k , .(size (A ‚áí B))) rec (A ‚áí B) refl ($ c) = ‚ä•
V-step (k , .(size (A ‚áí B))) rec (A ‚áí B) refl (V ‚ü® g !‚ü©) = ‚ä•
V-step (k , .(size (A ‚áí B))) rec (A ‚áí B) refl (V ‚ü® h ?‚ü©) = ‚ä•
V-step (k , .(size (A ‚áí B))) rec (A ‚áí B) refl blame = ‚ä•
V-step (k , .(size (A ‚áí B))) rec (A ‚áí B) refl (L ¬∑ M) = ‚ä•


abstract
  SafeVal : (p : ‚Ñï √ó ‚Ñï) ‚Üí ValPred p
  SafeVal = <‚ÇÇ-rec _ (Œª i ‚Üí ValPred i) V-step

ùì•‚ü¶_‚üß : (A : Type) ‚Üí Term ‚Üí ‚Ñï ‚Üí Set
ùì•‚ü¶ A ‚üß V k = SafeVal (k , size A) A refl V

ùìî‚ü¶_‚üß : Type ‚Üí Term ‚Üí ‚Ñï ‚Üí Set
ùìî‚ü¶ A ‚üß M k = ‚àÄ N ‚Üí (M‚ÜíN : M ‚Äî‚Ü† N) ‚Üí (len M‚ÜíN < k)
              ‚Üí ùì•‚ü¶ A ‚üß N (k ‚à∏ len M‚ÜíN)
                ‚äé (‚àÉ[ N‚Ä≤ ] (N ‚Äî‚Üí N‚Ä≤))
                ‚äé N ‚â° blame               

postulate
  V-step-ext : (x : ‚Ñï √ó ‚Ñï) ‚Üí ‚àÄ {IH IH‚Ä≤}
      ‚Üí (‚àÄ{y} (y<x : y <‚ÇÇ x) ‚Üí IH y y<x ‚â° IH‚Ä≤ y y<x)
      ‚Üí V-step x IH ‚â° V-step x IH‚Ä≤

abstract
  unfold-SafeVal : ‚àÄ i ‚Üí SafeVal i ‚â° V-step i (Œª i‚Ä≤ _ ‚Üí SafeVal i‚Ä≤)
  unfold-SafeVal i = FixPoint.unfold-wfRec <‚ÇÇ-wellFounded (Œª i ‚Üí ValPred i)
                     V-step V-step-ext {i}

{- Equations for the Logical Relation -}

V-base : ‚àÄ{n}{Œπ}{Œπ‚Ä≤}{c : rep Œπ‚Ä≤}
   ‚Üí ùì•‚ü¶ $‚Çú Œπ ‚üß ($ c) n ‚â° (Œπ ‚â° Œπ‚Ä≤)
V-base {n} rewrite unfold-SafeVal (n , 0) = refl

V-dyn-zero : ‚àÄ{G}{V}{g : Ground G}
   ‚Üí ùì•‚ü¶ ‚òÖ ‚üß (V ‚ü® g !‚ü©) 0 ‚â° Value V
V-dyn-zero rewrite unfold-SafeVal (0 , size ‚òÖ) = refl

V-dyn : ‚àÄ{n}{G}{V}{g : Ground G}
   ‚Üí ùì•‚ü¶ ‚òÖ ‚üß (V ‚ü® g !‚ü©) (suc n) ‚â° ùì•‚ü¶ G ‚üß V n
V-dyn {n}{G} rewrite unfold-SafeVal (suc n , size ‚òÖ)
                   | sym (unfold-SafeVal (n , size G))
    = refl

V-fun : ‚àÄ{n}{A B}{N}
   ‚Üí ùì•‚ü¶ A ‚áí B ‚üß (∆õ N) n ‚â° ‚àÄ W (j : ‚Ñï) ‚Üí (lt : j ‚â§ n)
                           ‚Üí ùì•‚ü¶ A ‚üß W j
                           ‚Üí ùìî‚ü¶ B ‚üß (N [ W ]) j
V-fun {n}{A}{B} rewrite unfold-SafeVal (n , size (A ‚áí B)) = refl

{- Introduction and Elimination for the Logical Relation -}

V-intro : ‚àÄ{n}{G}{V}{g}
   ‚Üí ùì•‚ü¶ G ‚üß V n
   ‚Üí ùì•‚ü¶ ‚òÖ ‚üß (V ‚ü® g !‚ü©) (suc n)
V-intro {n}{G}{V}{g} Vv rewrite V-dyn {n}{G}{V}{g} = Vv

V-dyn-inv2 : ‚àÄ (V : Term) {n}
   ‚Üí ùì•‚ü¶ ‚òÖ ‚üß V (suc n)
   ‚Üí ‚àÉ[ V‚Ä≤ ] ‚àÉ[ G ] Œ£[ g ‚àà Ground G ] (V ‚â° V‚Ä≤ ‚ü® g !‚ü©) √ó ùì•‚ü¶ G ‚üß V‚Ä≤ n
V-dyn-inv2 (∆õ N) {n} Vv rewrite unfold-SafeVal (suc n , size ‚òÖ) = ‚ä•-elim Vv
V-dyn-inv2 ($ c) {n} Vv rewrite unfold-SafeVal (suc n , size ‚òÖ) = ‚ä•-elim Vv
V-dyn-inv2 ((op-inject {G} g) ‚¶Ö cons (ast V‚Ä≤) nil ‚¶Ü) {n} Vv
    rewrite unfold-SafeVal (suc n , size ‚òÖ) | sym (unfold-SafeVal (n , size G)) =
    V‚Ä≤ , _ , g , refl , Vv
V-dyn-inv2 (` x) {n} Vv rewrite unfold-SafeVal (suc n , 0) = ‚ä•-elim Vv
V-dyn-inv2 (L ¬∑ M) {n} Vv rewrite unfold-SafeVal (suc n , 0) = ‚ä•-elim Vv
V-dyn-inv2 (V ‚ü® h ?‚ü©) {n} Vv rewrite unfold-SafeVal (suc n , 0) = ‚ä•-elim Vv
V-dyn-inv2 blame {n} Vv rewrite unfold-SafeVal (suc n , 0) = ‚ä•-elim Vv

V-base-elim : ‚àÄ{Œπ}{V}{j}
   ‚Üí ùì•‚ü¶ $‚Çú Œπ ‚üß V j
   ‚Üí Œ£[ c ‚àà rep Œπ ] V ‚â° $ c
V-base-elim{Œπ}{` x}{j} Vv rewrite unfold-SafeVal (j , 0) = ‚ä•-elim Vv
V-base-elim{Œπ}{$ c}{j} Vv rewrite unfold-SafeVal (j , 0)
    with Vv
... | refl = c , refl
V-base-elim{Œπ}{L ¬∑ M}{j} Vv rewrite unfold-SafeVal (j , 0) = ‚ä•-elim Vv
V-base-elim{Œπ}{∆õ N}{j} Vv rewrite unfold-SafeVal (j , 0) = ‚ä•-elim Vv
V-base-elim{Œπ}{M ‚ü® g !‚ü©}{j} Vv rewrite unfold-SafeVal (j , 0) = ‚ä•-elim Vv
V-base-elim{Œπ}{M ‚ü® g ?‚ü©}{j} Vv rewrite unfold-SafeVal (j , 0) = ‚ä•-elim Vv
V-base-elim{Œπ}{blame}{j} Vv rewrite unfold-SafeVal (j , 0) = ‚ä•-elim Vv

{- Logical Relation contains values -}

ùì•‚áíValue : ‚àÄ {A}{k} M ‚Üí ùì•‚ü¶ A ‚üß M k ‚Üí Value M
ùì•‚áíValue {‚òÖ} {k} (` x) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {‚òÖ} {k} ($ c) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {‚òÖ} {k} (L ¬∑ M) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {‚òÖ} {k} (∆õ N) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {‚òÖ} {0} (V ‚ü® g !‚ü©) Vv rewrite unfold-SafeVal (0 , 0) = Vv ‚å© g ‚å™
ùì•‚áíValue {‚òÖ} {suc k} ((op-inject {G} g) ‚¶Ö cons (ast V) nil ‚¶Ü) Vv rewrite unfold-SafeVal (suc k , 0)
  | sym (unfold-SafeVal (k , size G)) = ùì•‚áíValue V Vv ‚å© g ‚å™
ùì•‚áíValue {‚òÖ} {k} (V ‚ü® h ?‚ü©) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {‚òÖ} {k} blame Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv

ùì•‚áíValue {$‚Çú Œπ} {k} (` x) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {$‚Çú Œπ} {k} ($ c) Vv rewrite unfold-SafeVal (k , 0) = $Ã¨ c
ùì•‚áíValue {$‚Çú Œπ} {k} (L ¬∑ M) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {$‚Çú Œπ} {k} (∆õ N) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {$‚Çú Œπ} {k} (V ‚ü® g !‚ü©) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {$‚Çú Œπ} {k} (M ‚ü® h ?‚ü©) Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv
ùì•‚áíValue {$‚Çú Œπ} {k} blame Vv rewrite unfold-SafeVal (k , 0) = ‚ä•-elim Vv

ùì•‚áíValue {A ‚áí B} {k} (` x) Vv rewrite unfold-SafeVal (k , size (A ‚áí B)) = ‚ä•-elim Vv
ùì•‚áíValue {A ‚áí B} {k} ($ c) Vv rewrite unfold-SafeVal (k , size (A ‚áí B)) = ‚ä•-elim Vv
ùì•‚áíValue {A ‚áí B} {k} (L ¬∑ M) Vv rewrite unfold-SafeVal (k , size (A ‚áí B)) = ‚ä•-elim Vv
ùì•‚áíValue {A ‚áí B} {k} (∆õ N) Vv = ∆õÃ¨ N
ùì•‚áíValue {A ‚áí B} {k} (V ‚ü® g !‚ü©) Vv rewrite unfold-SafeVal (k , size (A ‚áí B)) = ‚ä•-elim Vv
ùì•‚áíValue {A ‚áí B} {k} (V ‚ü® h ?‚ü©) Vv rewrite unfold-SafeVal (k , size (A ‚áí B)) = ‚ä•-elim Vv
ùì•‚áíValue {A ‚áí B} {k} blame Vv rewrite unfold-SafeVal (k , size (A ‚áí B)) = ‚ä•-elim Vv


{- Type Safety -}

ùìñ‚ü¶_‚üß : (Œì : List Type) ‚Üí Subst ‚Üí ‚Ñï ‚Üí Set
ùìñ‚ü¶ [] ‚üß œÉ k = ‚ä§
ùìñ‚ü¶ A ‚à∑ Œì ‚üß œÉ k = ùìñ‚ü¶ Œì ‚üß (Œª x ‚Üí œÉ (suc x)) k √ó ùì•‚ü¶ A ‚üß (œÉ 0) k

lemma-ùìñ : (Œì : List Type) ‚Üí (Œ≥ : Subst) ‚Üí (k : ‚Ñï) ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ k
  ‚Üí ‚àÄ {A}{y} ‚Üí (‚àãy : Œì ‚àã y ‚¶Ç A)
  ‚Üí ùì•‚ü¶ A ‚üß (Œ≥ y) k
lemma-ùìñ [] Œ≥ k ùìñŒ≥ ()
lemma-ùìñ (A ‚à∑ Œì) Œ≥ k (ùìñŒ≥ , ùì•Œ≥0) {B} {zero} refl = ùì•Œ≥0
lemma-ùìñ (A ‚à∑ Œì) Œ≥ k (ùìñŒ≥ , ùì•Œ≥0) {B} {suc y} ‚àãy =
    lemma-ùìñ Œì (Œª x ‚Üí Œ≥ (suc x)) k ùìñŒ≥ ‚àãy

_‚ä®_‚¶Ç_ : List Type ‚Üí Term ‚Üí Type ‚Üí Set
Œì ‚ä® M ‚¶Ç A = ‚àÄ k (Œ≥ : Subst) ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ k ‚Üí ùìî‚ü¶ A ‚üß (‚ü™ Œ≥ ‚ü´ M) k

mono-ùì• : ‚àÄ {j}{k}{A} {V}
   ‚Üí j ‚â§‚Ä≤ k
   ‚Üí ùì•‚ü¶ A ‚üß V k
   ‚Üí ùì•‚ü¶ A ‚üß V j
mono-ùì• {j} {k} {A} {V} ‚â§‚Ä≤-refl Vvk = Vvk

mono-ùì• {j} {suc k} {‚òÖ} {` x} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk 
mono-ùì• {j} {suc k} {‚òÖ} {$ c} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk 
mono-ùì• {j} {suc k} {‚òÖ} {L ¬∑ M} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk 
mono-ùì• {j} {suc k} {‚òÖ} {∆õ N} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk
mono-ùì• {0} {suc k} {‚òÖ} {(op-inject {G} g) ‚¶Ö cons (ast V) nil ‚¶Ü} (‚â§‚Ä≤-step j‚â§k) Vvk
    rewrite unfold-SafeVal (0 , 0) | unfold-SafeVal (suc k , 0)
          | sym (unfold-SafeVal (k , size G))
     = ùì•‚áíValue V Vvk
mono-ùì• {suc j} {suc k} {‚òÖ} {(op-inject {G} g) ‚¶Ö cons (ast V) nil ‚¶Ü} (‚â§‚Ä≤-step j‚â§k) Vvk
    rewrite unfold-SafeVal (suc k , 0) | unfold-SafeVal (suc j , 0)
          | sym (unfold-SafeVal (k , size G)) | sym (unfold-SafeVal (j , size G)) =
    mono-ùì•{j}{k} (‚â§‚áí‚â§‚Ä≤ (‚â§-trans (n‚â§1+n j) (‚â§‚Ä≤‚áí‚â§ j‚â§k))) Vvk
mono-ùì• {j} {suc k} {‚òÖ} {V ‚ü® h ?‚ü©} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {‚òÖ} {blame} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk

mono-ùì• {j} {suc k} {$‚Çú Œπ} {` x} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {$‚Çú Œπ} {$ c} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) | unfold-SafeVal (j , 0) = Vvk
mono-ùì• {j} {suc k} {$‚Çú Œπ} {∆õ N} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {$‚Çú Œπ} {L ¬∑ M} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {$‚Çú Œπ} {M ‚ü® g !‚ü©} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {$‚Çú Œπ} {M ‚ü® h ?‚ü©} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {$‚Çú Œπ} {blame} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , 0) = ‚ä•-elim Vvk

mono-ùì• {j} {suc k} {A ‚áí B} {` x} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , size (A ‚áí B)) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {A ‚áí B} {$ c} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , size (A ‚áí B)) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {A ‚áí B} {∆õ N} (‚â§‚Ä≤-step j‚â§k) Vvk
    rewrite unfold-SafeVal (suc k , size (A ‚áí B))
    | unfold-SafeVal (j , size (A ‚áí B))
    = Œª W l l‚â§j VW N‚Ä≤ NW‚ÜíN‚Ä≤ <l ‚Üí
      Vvk W l (‚â§-trans l‚â§j (‚â§-trans (‚â§‚Ä≤‚áí‚â§ j‚â§k)  (n‚â§1+n k))) VW N‚Ä≤ NW‚ÜíN‚Ä≤ <l 
  
mono-ùì• {j} {suc k} {A ‚áí B} {L ¬∑ M} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , size (A ‚áí B)) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {A ‚áí B} {V ‚ü® g !‚ü©} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , size (A ‚áí B)) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {A ‚áí B} {V ‚ü® h ?‚ü©} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , size (A ‚áí B)) = ‚ä•-elim Vvk
mono-ùì• {j} {suc k} {A ‚áí B} {blame} (‚â§‚Ä≤-step j‚â§k) Vvk rewrite unfold-SafeVal (suc k , size (A ‚áí B)) = ‚ä•-elim Vvk


Val‚áíExp : ‚àÄ{A}{V : Term} (k : ‚Ñï)
   ‚Üí ùì•‚ü¶ A ‚üß V k
   ‚Üí ùìî‚ü¶ A ‚üß V k
Val‚áíExp {A}{V} k Vv N M‚ÜíN <k
    with value‚Äî‚Ü† (ùì•‚áíValue V Vv) M‚ÜíN
... | refl  = inj‚ÇÅ (mono-ùì• (‚â§‚áí‚â§‚Ä≤ (m‚à∏n‚â§m k (len M‚ÜíN))) Vv)

dyn? : (A : Type) ‚Üí A ‚â° ‚òÖ ‚äé A ‚â¢ ‚òÖ
dyn? ‚òÖ = inj‚ÇÅ refl
dyn? ($‚Çú Œπ) = inj‚ÇÇ (Œª ())
dyn? (A ‚áí B) = inj‚ÇÇ (Œª ())

ground-or-‚òÖ : (A : Type) ‚Üí A ‚â° ‚òÖ ‚äé Ground A ‚äé (‚àÉ[ G ] GroundOf A G √ó ¬¨ Ground A)
ground-or-‚òÖ ‚òÖ = inj‚ÇÅ refl
ground-or-‚òÖ ($‚Çú Œπ) = inj‚ÇÇ (inj‚ÇÅ ($·µç Œπ))
ground-or-‚òÖ (A ‚áí B)
    with dyn? A | dyn? B
... | inj‚ÇÅ refl | inj‚ÇÅ refl = inj‚ÇÇ (inj‚ÇÅ ‚òÖ‚áí‚òÖ)
... | inj‚ÇÅ refl | inj‚ÇÇ neq = inj‚ÇÇ (inj‚ÇÇ ((‚òÖ ‚áí ‚òÖ) , gnd-fun ,
                                         Œª { ‚òÖ‚áí‚òÖ ‚Üí neq refl}))
... | inj‚ÇÇ neq | _ = inj‚ÇÇ (inj‚ÇÇ (‚òÖ ‚áí ‚òÖ , gnd-fun , Œª { ‚òÖ‚áí‚òÖ ‚Üí neq refl}))

ground-match? : ‚àÄ{G} (g : Ground G) (B : Type)
  ‚Üí B ‚â¢ ‚òÖ
  ‚Üí (GroundOf B G) ‚äé (‚àÉ[ H ] Ground H √ó GroundOf B H √ó G ‚â¢ H)
ground-match? {.($‚Çú Œπ)} ($·µç Œπ) ‚òÖ Bnd = ‚ä•-elim (Bnd refl)
ground-match? {.($‚Çú Œπ)} ($·µç Œπ) ($‚Çú Œπ‚Ä≤) Bnd
    with Œπ ‚â°$? Œπ‚Ä≤
... | yes refl = inj‚ÇÅ gnd-base
... | no neq = inj‚ÇÇ (($‚Çú Œπ‚Ä≤) , ($·µç Œπ‚Ä≤) , gnd-base , (Œª {refl ‚Üí neq refl}))
ground-match? {.($‚Çú Œπ)} ($·µç Œπ) (B ‚áí B‚Ä≤) Bnd = inj‚ÇÇ (‚òÖ ‚áí ‚òÖ , ‚òÖ‚áí‚òÖ , gnd-fun , Œª ())
ground-match? {.(‚òÖ ‚áí ‚òÖ)} ‚òÖ‚áí‚òÖ ‚òÖ Bnd = ‚ä•-elim (Bnd refl)
ground-match? {.(‚òÖ ‚áí ‚òÖ)} ‚òÖ‚áí‚òÖ ($‚Çú Œπ) Bnd = inj‚ÇÇ ($‚Çú Œπ , $·µç Œπ , gnd-base , Œª ())
ground-match? {.(‚òÖ ‚áí ‚òÖ)} ‚òÖ‚áí‚òÖ (B ‚áí B‚Ä≤) Bnd = inj‚ÇÅ gnd-fun

mono-SafeEnv : ‚àÄ j k {Œì} (Œ≥ : Subst)
   ‚Üí j ‚â§‚Ä≤ k
   ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ k
     -----------
   ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ j
mono-SafeEnv j k {[]} Œ≥ j‚â§k ùìñŒ≥ = tt
mono-SafeEnv j k {A ‚à∑ Œì} Œ≥ j‚â§k (ùìñŒ≥ , ùì•Œ≥0) = (mono-SafeEnv j k (Œª z ‚Üí Œ≥ (suc z)) j‚â§k ùìñŒ≥) , (mono-ùì• j‚â§k ùì•Œ≥0)



