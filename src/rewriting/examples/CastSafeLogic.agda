{-# OPTIONS --without-K --rewriting #-}
module rewriting.examples.CastSafeLogic where

open import Agda.Primitive using (lzero)
open import Data.List using (List; []; _Рѕи_; length)
open import Data.Nat
open import Data.Nat.Induction
open import Data.Bool using (true; false) renaming (Bool to ­Юћ╣)
open import Data.Nat.Properties
open import Data.Product using (_,_;_├Ќ_; projРѓЂ; projРѓѓ; ╬Б-syntax; РѕЃ-syntax)
open import Data.Unit using (Ріц; tt)
open import Data.Unit.Polymorphic renaming (Ріц to Ріцрхќ; tt to ttрхќ)
open import Data.Vec using (Vec) renaming ([] to []╠ї; _Рѕи_ to _Рѕи╠ї_)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Sum using (_Ріј_; injРѓЂ; injРѓѓ)
open import Induction using (RecStruct)
open import Induction.WellFounded as WF
open import Data.Product.Relation.Binary.Lex.Strict
  using (├Ќ-Lex; ├Ќ-wellFounded; ├Ќ-preorder)
open import Relation.Binary using (Rel)
open import Relation.Binary.PropositionalEquality as Eq
  using (_РЅА_; _РЅб_; refl; sym; cong; subst; trans)
open import Relation.Nullary using (┬г_; Dec; yes; no)
open import Sig
open import Var
open import rewriting.examples.Cast
open import rewriting.examples.StepIndexedLogic
open import rewriting.examples.CastLogRelLogic

{-# REWRITE sub-var #-}

compatible-blame : Рѕђ{╬Њ}{A}
     -------------------
   Рєњ ╬Њ Ріе blame Рдѓ A
compatible-blame {╬Њ}{A} ╬│ = ­ЮЊћ-blame

compatibility-var : Рѕђ {╬Њ A x}
  Рєњ ╬Њ РѕІ x Рдѓ A
    -----------
  Рєњ ╬Њ Ріе ` x Рдѓ A
compatibility-var {╬Њ}{A}{x} РѕІx ╬│ =
     let Ріб­ЮЊЦ╬│x : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊЦРЪд A РЪД (╬│ x)
         Ріб­ЮЊЦ╬│x = lookup-­ЮЊќ ╬Њ ╬│ РѕІx in
     let Ріб­ЮЊћ╬│x : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд A РЪД (╬│ x)
         Ріб­ЮЊћ╬│x = ­ЮЊЦРЄњ­ЮЊћ{A}{­ЮЊќРЪд ╬Њ РЪД ╬│} Ріб­ЮЊЦ╬│x in
     Ріб­ЮЊћ╬│x

compatible-nat : Рѕђ{╬Њ}{n : РёЋ} Рєњ ╬Њ Ріе ($ n) Рдѓ ($Рѓю Рђ▓РёЋ)
compatible-nat {╬Њ}{n} ╬│ =
     let Ріб­ЮЊЦn : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊЦРЪд $Рѓю Рђ▓РёЋ РЪД ($ n)
         Ріб­ЮЊЦn = Рібрхњ-intro ╬╗ { zero x Рєњ tt ; (suc k) x Рєњ refl} in
     let Ріб­ЮЊћn : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд $Рѓю Рђ▓РёЋ РЪД ($ n)
         Ріб­ЮЊћn = ­ЮЊЦРЄњ­ЮЊћ{$Рѓю Рђ▓РёЋ}{­ЮЊќРЪд ╬Њ РЪД ╬│} Ріб­ЮЊЦn in
     Ріб­ЮЊћn

compatible-bool : Рѕђ{╬Њ}{b : ­Юћ╣} Рєњ ╬Њ Ріе ($ b) Рдѓ ($Рѓю Рђ▓­Юћ╣)
compatible-bool {╬Њ}{b} ╬│ =
     let Ріб­ЮЊЦb : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊЦРЪд $Рѓю Рђ▓­Юћ╣ РЪД ($ b)
         Ріб­ЮЊЦb = Рібрхњ-intro ╬╗ { zero x Рєњ tt ; (suc k) x Рєњ refl} in
     let Ріб­ЮЊћb : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд $Рѓю Рђ▓­Юћ╣ РЪД ($ b)
         Ріб­ЮЊћb = ­ЮЊЦРЄњ­ЮЊћ{$Рѓю Рђ▓­Юћ╣}{­ЮЊќРЪд ╬Њ РЪД ╬│} Ріб­ЮЊЦb in
     Ріб­ЮЊћb

compatible-app : Рѕђ{╬Њ}{A}{B}{L}{M}
    Рєњ ╬Њ Ріе L Рдѓ (A РЄњ B)
    Рєњ ╬Њ Ріе M Рдѓ A
      -------------------
    Рєњ ╬Њ Ріе L ┬и M Рдѓ B
compatible-app {╬Њ}{A}{B}{L}{M} РіеL РіеM ╬│ = Ріб­ЮЊћLM
 where
 Ріб­ЮЊћL : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд A РЄњ B РЪД (РЪф ╬│ РЪФ L)
 Ріб­ЮЊћL = РіеL ╬│

 Ріб­ЮЊћM : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд A РЪД (РЪф ╬│ РЪФ M)
 Ріб­ЮЊћM = РіеM ╬│

 Ріб­ЮЊћLM : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд B РЪД (РЪф ╬│ РЪФ (L ┬и M))
 Ріб­ЮЊћLM = ­ЮЊћ-frame {F = РќА┬и (РЪф ╬│ РЪФ M)} Ріб­ЮЊћL
                 (Рібрхњ-Рѕђ-intro ╬╗ V Рєњ Рібрхњ-Рєњ-intro (Рібрхњ-Рєњ-intro Ріб­ЮЊћVM))
  where
  ­ЮЊЪРѓЂ = ╬╗ V Рєњ ­ЮЊЦРЪд A РЄњ B РЪД V Рѕи (РЪф ╬│ РЪФ L РђћРєа V)рхњ Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│
  Ріб­ЮЊћVM : Рѕђ{V} Рєњ ­ЮЊЪРѓЂ V Рібрхњ ­ЮЊћРЪд B РЪД (V ┬и РЪф ╬│ РЪФ M)
  Ріб­ЮЊћVM {V} = sucPРібрхњQ ╬╗ ­ЮЊЦVsn Рєњ
       let v = ­ЮЊЦРЄњValue (A РЄњ B) V ­ЮЊЦVsn in
       let ­ЮЊЪРѓЂРіб­ЮЊћM : ­ЮЊЪРѓЂ V Рібрхњ ­ЮЊћРЪд A РЪД (РЪф ╬│ РЪФ M)
           ­ЮЊЪРѓЂРіб­ЮЊћM = Рібрхњ-weaken (Рібрхњ-weaken Ріб­ЮЊћM) in
       ­ЮЊћ-frame {F = v ┬иРќА} ­ЮЊЪРѓЂРіб­ЮЊћM
           (Рібрхњ-Рѕђ-intro ╬╗ V Рєњ Рібрхњ-Рєњ-intro (Рібрхњ-Рєњ-intro Ріб­ЮЊћVW))
   where
   ­ЮЊЪРѓѓ = ╬╗ V W Рєњ ­ЮЊЦРЪд A РЪД W Рѕи (РЪф ╬│ РЪФ M РђћРєа W)рхњ Рѕи ­ЮЊЦРЪд A РЄњ B РЪД V Рѕи (РЪф ╬│ РЪФ L РђћРєа V)рхњ
                 Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│
   Ріб­ЮЊћVW : Рѕђ{V W} Рєњ ­ЮЊЪРѓѓ V W Рібрхњ ­ЮЊћРЪд B РЪД (V ┬и W)
   Ріб­ЮЊћVW {V}{W} =
     let Ріб­ЮЊЦV : ­ЮЊЪРѓѓ V W Рібрхњ ­ЮЊЦРЪд A РЄњ B РЪД V
         Ріб­ЮЊЦV = Рібрхњ-weaken (Рібрхњ-weaken Рібрхњ-hyp) in
     let Ріб­ЮЊЦW : ­ЮЊЪРѓѓ V W Рібрхњ ­ЮЊЦРЪд A РЪД W
         Ріб­ЮЊЦW = Рібрхњ-hyp in
     Рібрхњ-sucP Ріб­ЮЊЦW ╬╗ ­ЮЊЦWsn Рєњ
     let w = ­ЮЊЦРЄњValue A W ­ЮЊЦWsn in
     V-fun-elim Ріб­ЮЊЦV ╬╗ {NРђ▓ refl ­ЮЊЦWРєњ­ЮЊћNW Рєњ
     let prog : ­ЮЊЪРѓѓ (кЏ NРђ▓) W Рібрхњ progress B (кЏ NРђ▓ ┬и W)
         prog = (Рібрхњ-injРѓѓ (Рібрхњ-injРѓЂ (Рібрхњ-Sрхњ-intro (_ , (╬▓ w))))) in
     let pres : ­ЮЊЪРѓѓ (кЏ NРђ▓) W Рібрхњ preservation B (кЏ NРђ▓ ┬и W)
         pres = Рібрхњ-Рѕђ-intro ╬╗ N Рєњ Рібрхњ-Рєњ-intro (SрхњРібрхњ ╬╗ {r Рєњ
               let РібРќи­ЮЊћNРђ▓W = Рібрхњ-Рєњ-elim ­ЮЊЦWРєњ­ЮЊћNW (Рібрхњ-mono Ріб­ЮЊЦW) in
               let eq = deterministic r (╬▓ w) in
                subst (╬╗ N Рєњ ­ЮЊЪРѓѓ (кЏ NРђ▓) W Рібрхњ Рќирхњ ­ЮЊћРЪд B РЪД N) (sym eq) РібРќи­ЮЊћNРђ▓W}) in
     ­ЮЊћ-intro prog pres
     }

compatible-lambda : Рѕђ{╬Њ}{A}{B}{N}
   Рєњ (A Рѕи ╬Њ) Ріе N Рдѓ B
     -------------------
   Рєњ ╬Њ Ріе (кЏ N) Рдѓ (A РЄњ B)
compatible-lambda {╬Њ}{A}{B}{N} РіеN ╬│ = Ріб­ЮЊћ╬│╬╗N
 where
 Ріб­ЮЊћ╬│╬╗N : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд A РЄњ B РЪД (кЏ (РЪф ext ╬│ РЪФ N))
 Ріб­ЮЊћ╬│╬╗N =
   let eq = V-fun{A}{B}{РЪф ext ╬│ РЪФ N} in
   ­ЮЊЦРЄњ­ЮЊћ (РЅАрхњРЄњРібрхњ (Рібрхњ-Рѕђ-intro ╬╗ W Рєњ Рібрхњ-Рєњ-intro G) (РЅАрхњ-sym eq))
   where
   G : Рѕђ{W} Рєњ Рќирхњ ­ЮЊЦРЪд A РЪД W Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│  Рібрхњ  Рќирхњ ­ЮЊћРЪд B РЪД (РЪф W Рђб ╬│ РЪФ N)
   G {W} =
     let Ріб­ЮЊЦWРєњ­ЮЊћN[W] : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ (Рќирхњ (­ЮЊЦРЪд A РЪД W) Рєњрхњ Рќирхњ ­ЮЊћРЪд B РЪД (РЪф W Рђб ╬│ РЪФ N))
         Ріб­ЮЊЦWРєњ­ЮЊћN[W] = Рібрхњ-РќиРєњ{P = ­ЮЊЦРЪд A РЪД W} (Рібрхњ-mono (Рібрхњ-Рєњ-intro (РіеN (W Рђб ╬│))))
     in
     let РібРќи­ЮЊЦW : Рќирхњ ­ЮЊЦРЪд A РЪД W Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│  Рібрхњ Рќирхњ ­ЮЊЦРЪд A РЪД W
         РібРќи­ЮЊЦW = Рібрхњ-hyp in
     Рібрхњ-Рєњ-elim (Рібрхњ-weaken Ріб­ЮЊЦWРєњ­ЮЊћN[W]) РібРќи­ЮЊЦW

compatible-inject : Рѕђ{╬Њ}{G}{g}{M}
  Рєњ ╬Њ Ріе M Рдѓ G
  Рєњ ╬Њ Ріе op-inject{G} g РдЁ cons (ast M) nil Рдє Рдѓ РўЁ
compatible-inject {╬Њ}{G}{g}{M} РіеM ╬│ = ­ЮЊћMg!
 where
 Ріб­ЮЊћM : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд G РЪД (РЪф ╬│ РЪФ M)
 Ріб­ЮЊћM = РіеM ╬│
  
 ­ЮЊћMg! : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд РўЁ РЪД ((РЪф ╬│ РЪФ M) РЪе g !РЪЕ)
 ­ЮЊћMg! = ­ЮЊћ-frame {F = РќАРЪе g !РЪЕ} Ріб­ЮЊћM
            (Рібрхњ-Рѕђ-intro ╬╗ V Рєњ Рібрхњ-Рєњ-intro (Рібрхњ-Рєњ-intro Ріб­ЮЊћVg!))
  where
  ­ЮЊЪРѓЂ = ╬╗ V Рєњ ­ЮЊЦРЪд G РЪД V Рѕи (РЪф ╬│ РЪФ M РђћРєа V)рхњ Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│
  Ріб­ЮЊћVg! : Рѕђ{V} Рєњ ­ЮЊЪРѓЂ V Рібрхњ ­ЮЊћРЪд РўЁ РЪД (V РЪе g !РЪЕ)
  Ріб­ЮЊћVg!{V} =
   let Ріб­ЮЊЦV : ­ЮЊЪРѓЂ V Рібрхњ ­ЮЊЦРЪд G РЪД V
       Ріб­ЮЊЦV = Рібрхњ-hyp in
   Рібрхњ-sucP Ріб­ЮЊЦV ╬╗ ­ЮЊЦVsn Рєњ
   let v = ­ЮЊЦРЄњValue G V ­ЮЊЦVsn in
   let eq = V-dyn{G}{V}{g} in
   ­ЮЊЦРЄњ­ЮЊћ ((РЅАрхњРЄњРібрхњ (Рібрхњ-├Ќ-intro (Рібрхњ-Sрхњ-intro v) (Рібрхњ-mono Ріб­ЮЊЦV)) (РЅАрхњ-sym eq)))

red-inj-proj : Рѕђ{G}{H}{g}{h}{W}
   Рєњ Value W
   Рєњ reducible (op-project{H} h
                  РдЁ cons (ast (op-inject{G} g РдЁ cons (ast W) nil Рдє)) nil Рдє)
red-inj-proj {G} {H} {g} {h} {W} w
    with g РЅАрхЇ h
... | yes refl = W , (collapse w g h refl)
... | no neq = blame , (collide w g h neq refl)

compatible-project : Рѕђ{╬Њ}{H}{h : Ground H}{M}
  Рєњ ╬Њ Ріе M Рдѓ РўЁ
  Рєњ ╬Њ Ріе op-project{H} h РдЁ cons (ast M) nil Рдє Рдѓ H
compatible-project {╬Њ}{H}{h}{M} РіеM ╬│ = ­ЮЊћMh?
 where
 Ріб­ЮЊћM : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд РўЁ РЪД (РЪф ╬│ РЪФ M)
 Ріб­ЮЊћM = РіеM ╬│
  
 ­ЮЊћMh? : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд H РЪД ((РЪф ╬│ РЪФ M) РЪе h ?РЪЕ)
 ­ЮЊћMh? = ­ЮЊћ-frame {F = РќАРЪе h ?РЪЕ} Ріб­ЮЊћM
            (Рібрхњ-Рѕђ-intro ╬╗ V Рєњ Рібрхњ-Рєњ-intro (Рібрхњ-Рєњ-intro Ріб­ЮЊћVh?))
  where
  ­ЮЊЪРѓЂ = ╬╗ V Рєњ ­ЮЊЦРЪд РўЁ РЪД V Рѕи (РЪф ╬│ РЪФ M РђћРєа V)рхњ Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│
  Ріб­ЮЊћVh? : Рѕђ{V} Рєњ ­ЮЊЪРѓЂ V Рібрхњ ­ЮЊћРЪд H РЪД (V РЪе h ?РЪЕ)
  Ріб­ЮЊћVh?{V} =
   let Ріб­ЮЊЦV : ­ЮЊЪРѓЂ V Рібрхњ ­ЮЊЦРЪд РўЁ РЪД V
       Ріб­ЮЊЦV = Рібрхњ-hyp in
   V-dyn-elim Ріб­ЮЊЦV ╬╗ { W G g refl Рібw├ЌРќи­ЮЊЦW Рєњ
   let Рібw = Рібрхњ-projРѓЂ Рібw├ЌРќи­ЮЊЦW in
   let Рќи­ЮЊЦW : ­ЮЊЪРѓЂ V Рібрхњ Рќирхњ ­ЮЊЦРЪд G РЪД W
       Рќи­ЮЊЦW = Рібрхњ-projРѓѓ Рібw├ЌРќи­ЮЊЦW in
   Рібрхњ-sucP Рібw ╬╗{n} w Рєњ
   let prog : ­ЮЊЪРѓЂ (W РЪе g !РЪЕ) Рібрхњ progress H ((W РЪе g !РЪЕ) РЪе h ?РЪЕ)
       prog = Рібрхњ-injРѓѓ (Рібрхњ-injРѓЂ (Рібрхњ-Sрхњ-intro (red-inj-proj w))) in
   let pres : ­ЮЊЪРѓЂ (W РЪе g !РЪЕ) Рібрхњ preservation H ((W РЪе g !РЪЕ) РЪе h ?РЪЕ)
       pres = Рібрхњ-Рѕђ-intro ╬╗ N Рєњ Рібрхњ-Рєњ-intro (SрхњРібрхњ ╬╗ r Рєњ Goal r w Рќи­ЮЊЦW) in
   ­ЮЊћ-intro prog pres
   }
    where
    Goal : Рѕђ{W}{G}{H}{g : Ground G}{h : Ground H}{N}
       Рєњ ((W РЪе g !РЪЕ) РЪе h ?РЪЕ) РђћРєњ N
       Рєњ Value W
       Рєњ ­ЮЊЪРѓЂ (W РЪе g !РЪЕ) Рібрхњ Рќирхњ ­ЮЊЦРЪд G РЪД W
       Рєњ ­ЮЊЪРѓЂ (W РЪе g !РЪЕ) Рібрхњ Рќирхњ ­ЮЊћРЪд H РЪД N
    Goal{g = g} (╬Й╬Й РќАРЪе h ?РЪЕ refl refl r) w Рќи­ЮЊЦW =
        РіЦ-elim (value-irreducible (w РїЕ g Рїф) r)
    Goal {W} (╬Й╬Й-blame РќАРЪе h ?РЪЕ ())
    Goal {W}{G}{G}{g}{h}{W} (collapse{H} wРђ▓ g .h refl) w Рќи­ЮЊЦW =
       Рібрхњ-РќиРєњРќи{_}{­ЮЊЦРЪд H РЪД W} Рќи­ЮЊЦW (Рібрхњ-Рєњ-intro (­ЮЊЦРЄњ­ЮЊћ Рібрхњ-hyp))
    Goal {W} (collide x g h xРѓЂ xРѓѓ) w Рќи­ЮЊЦW = Рібрхњ-mono ­ЮЊћ-blame

fundamental : Рѕђ {╬Њ A} Рєњ (M : Term)
  Рєњ ╬Њ Ріб M Рдѓ A
    ----------
  Рєњ ╬Њ Ріе M Рдѓ A
fundamental {╬Њ} {A} .(` _) (Ріб` РѕІx) =
    compatibility-var РѕІx
fundamental {╬Њ} {.($Рѓю Рђ▓РёЋ)} .($ _) (Ріб$ Рђ▓РёЋ) =
    compatible-nat
fundamental {╬Њ} {.($Рѓю Рђ▓­Юћ╣)} .($ _) (Ріб$ Рђ▓­Юћ╣) =
    compatible-bool
fundamental {╬Њ} {A} (L ┬и M) (Ріб┬и РібL РібM) =
    compatible-app{L = L}{M} (fundamental L РібL) (fundamental M РібM)
fundamental {╬Њ} {.(_ РЄњ _)} (кЏ N) (РібкЏ РібN) =
    compatible-lambda {N = N} (fundamental N РібN)
fundamental {╬Њ} {.РўЁ} (M РЪе g !РЪЕ) (РібРЪе!РЪЕ РібM g) =
    compatible-inject {M = M} (fundamental M РібM)
fundamental {╬Њ} {A} (M РЪе h ?РЪЕ) (РібРЪе?РЪЕ РібM h) =
    compatible-project {M = M} (fundamental M РібM)
fundamental {╬Њ} {A} .blame Рібblame = compatible-blame

sem-type-safety : Рѕђ {A} Рєњ (M N : Term)
  Рєњ (r : M РђћРєа N)
  Рєњ # (­ЮЊћРЪд A РЪД M) (suc (len r))
  Рєњ Value N  Ріј  (РѕЃ[ NРђ▓ ] (N РђћРєњ NРђ▓))  Ріј  N РЅА blame   
sem-type-safety {A} M .M (.M END) (injРѓЂ ­ЮЊЦM , presM) =
    injРѓЂ (­ЮЊЦРЄњValue A M ­ЮЊЦM)
sem-type-safety {A} M .M (.M END) (injРѓѓ (injРѓЂ r) , presM) =
    injРѓѓ (injРѓЂ r)
sem-type-safety {A} M .M (.M END) (injРѓѓ (injРѓѓ isBlame) , presM) =
    injРѓѓ (injРѓѓ refl)
sem-type-safety {A} M N (_РђћРєњРЪе_РЪЕ_ .M {MРђ▓} MРєњMРђ▓ MРђ▓РєњN) (_ , presM) =
    let ­ЮЊћMРђ▓ : # (­ЮЊћРЪд A РЪД MРђ▓) (suc (len MРђ▓РєњN))
        ­ЮЊћMРђ▓ = presM MРђ▓ (suc (suc (len MРђ▓РєњN))) РЅц-refl MРєњMРђ▓ in
    sem-type-safety MРђ▓ N MРђ▓РєњN ­ЮЊћMРђ▓

type-safety : Рѕђ {A} Рєњ (M N : Term)
  Рєњ [] Ріб M Рдѓ A
  Рєњ M РђћРєа N
  Рєњ Value N  Ріј  (РѕЃ[ NРђ▓ ] (N РђћРєњ NРђ▓))  Ріј  N РЅА blame   
type-safety M N РібM MРєњN =
  let ­ЮЊћM = Рібрхњ-elim ((fundamental M РібM) id) (suc (len MРєњN)) tt in
  sem-type-safety M N MРєњN ­ЮЊћM 
