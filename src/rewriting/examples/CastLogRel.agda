{-# OPTIONS --without-K --rewriting --allow-unsolved-metas #-}
module rewriting.examples.CastLogRel where

open import Agda.Primitive using (lzero)
open import Data.List using (List; []; _‚à∑_; length)
open import Data.Nat
open import Data.Nat.Induction
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.Nat.Properties
open import Data.Product using (_,_;_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Unit.Polymorphic using (‚ä§; tt)
open import Data.Vec using (Vec) renaming ([] to []Ãå; _‚à∑_ to _‚à∑Ãå_)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Induction using (RecStruct)
open import Induction.WellFounded as WF
open import Data.Product.Relation.Binary.Lex.Strict
  using (√ó-Lex; √ó-wellFounded; √ó-preorder)
open import Relation.Binary using (Rel)
open import Relation.Binary.PropositionalEquality as Eq
  using (_‚â°_; _‚â¢_; refl; sym; cong; subst; trans)
open Eq.‚â°-Reasoning
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Sig
open import Var
open import rewriting.examples.Cast

{- Lexicographic Recursion/Induction -}

_<‚ÇÇ_ : Rel (‚Ñï √ó ‚Ñï) lzero
_<‚ÇÇ_ = √ó-Lex _‚â°_ _<_ _<_

less-eq-less : ‚àÄ {x y x‚Ä≤ y‚Ä≤} ‚Üí x ‚â§ x‚Ä≤ ‚Üí y < y‚Ä≤ ‚Üí (x , y) <‚ÇÇ (x‚Ä≤ , y‚Ä≤)
less-eq-less {x}{y}{x‚Ä≤}{y‚Ä≤} lt1 lt2
    with x ‚âü x‚Ä≤
... | yes refl = inj‚ÇÇ (refl , lt2)
... | no neq = inj‚ÇÅ (‚â§‚àß‚â¢‚áí< lt1 neq)

<‚ÇÇ-Rec : ‚àÄ{‚Ñì} ‚Üí RecStruct (‚Ñï √ó ‚Ñï) ‚Ñì ‚Ñì
<‚ÇÇ-Rec = WfRec _<‚ÇÇ_

<‚ÇÇ-wellFounded : WellFounded _<‚ÇÇ_
<‚ÇÇ-wellFounded = √ó-wellFounded <-wellFounded <-wellFounded

open WF.All <‚ÇÇ-wellFounded renaming (wfRec to <‚ÇÇ-rec)


{- Logical Relation for Type Safety -}

ValPred : Set‚ÇÅ
ValPred = {V : Term} ‚Üí Value V ‚Üí Set

ExpPred : Set‚ÇÅ
ExpPred = Term ‚Üí Set

SafePred : ‚Ñï √ó ‚Ñï ‚Üí Set‚ÇÅ
SafePred (k , s) = (A : Type) ‚Üí (s ‚â° size A) ‚Üí ValPred √ó ExpPred

{- This is already proved somewhere in the stdlib but I failed to figure out how to get to it. -}
<‚ÇÇ-trans : ‚àÄ{p q r} ‚Üí p <‚ÇÇ q ‚Üí q <‚ÇÇ r ‚Üí p <‚ÇÇ r
<‚ÇÇ-trans (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) = inj‚ÇÅ (<-trans x x‚ÇÅ)
<‚ÇÇ-trans (inj‚ÇÅ x) (inj‚ÇÇ (refl , snd)) = inj‚ÇÅ x
<‚ÇÇ-trans (inj‚ÇÇ (refl , snd)) (inj‚ÇÅ x) = inj‚ÇÅ x
<‚ÇÇ-trans (inj‚ÇÇ (refl , x)) (inj‚ÇÇ (refl , y)) = inj‚ÇÇ (refl , <-trans x y)

<‚ÇÇ-Rec-down : ‚àÄ{P : ‚Ñï √ó ‚Ñï ‚Üí Set‚ÇÅ}{p}{q}
   ‚Üí p <‚ÇÇ q
   ‚Üí <‚ÇÇ-Rec P q
   ‚Üí <‚ÇÇ-Rec P p
<‚ÇÇ-Rec-down p<q Pq y y<p = Pq y (<‚ÇÇ-trans y<p p<q)

<‚ÇÇ-Rec-subtract : ‚àÄ{P : ‚Ñï √ó ‚Ñï ‚Üí Set‚ÇÅ}{k}{j}{s}
   ‚Üí <‚ÇÇ-Rec P (k , s)
   ‚Üí <‚ÇÇ-Rec P (k ‚à∏ j , s)
<‚ÇÇ-Rec-subtract {P} {zero} {j} Pk rewrite 0‚à∏n‚â°0 j = Pk
<‚ÇÇ-Rec-subtract {P} {suc k} {zero} Pk = Pk
<‚ÇÇ-Rec-subtract {P} {suc k} {suc j} Pk = <‚ÇÇ-Rec-down (inj‚ÇÅ (s‚â§s (m‚à∏n‚â§m k j))) Pk

ùïç : (k : ‚Ñï) ‚Üí (s : ‚Ñï) ‚Üí <‚ÇÇ-Rec SafePred (k , s)
   ‚Üí (A : Type) ‚Üí (s ‚â° size A) ‚Üí ValPred
   
ùïç k .(size ‚òÖ) rec ‚òÖ refl (∆õÃ¨ N) = ‚ä•
ùïç k .(size ‚òÖ) rec ‚òÖ refl ($Ã¨ c) = ‚ä•
ùïç zero .(size ‚òÖ) rec ‚òÖ refl (v ‚å© g ‚å™) = ‚ä§
ùïç (suc k) .(size ‚òÖ) rec ‚òÖ refl {V ‚ü® g !‚ü©} (_‚å©_‚å™ {V}{G} v g) =
    proj‚ÇÅ (rec (k , _) (inj‚ÇÅ ‚â§-refl) G refl) v

ùïç k .(size ($‚Çú Œπ)) rec ($‚Çú Œπ) refl (∆õÃ¨ N) = ‚ä•
ùïç k .(size ($‚Çú Œπ)) rec ($‚Çú Œπ) refl ($Ã¨_ {Œπ‚Ä≤} c) = Œπ ‚â° Œπ‚Ä≤
ùïç k .(size ($‚Çú Œπ)) rec ($‚Çú Œπ) refl (v ‚å© g ‚å™) = ‚ä•

ùïç k .(size (A ‚áí B)) rec (A ‚áí B) refl (∆õÃ¨ N) =
   ‚àÄ {V} (v : Value V) (j : ‚Ñï) ‚Üí (lt : j ‚â§ k)
    ‚Üí proj‚ÇÅ (rec (j , size A) (less-eq-less lt (s‚â§s (m‚â§m‚äîn (size A) (size B)))) A refl) v
    ‚Üí proj‚ÇÇ (rec (j , size B) (less-eq-less lt (s‚â§s (m‚â§n‚äîm (size A) (size B)))) B refl) (N [ V ])
ùïç k .(size (A ‚áí B)) rec (A ‚áí B) refl ($Ã¨ c) = ‚ä•
ùïç k .(size (A ‚áí B)) rec (A ‚áí B) refl (v ‚å© g ‚å™) = ‚ä•

ùîº : (k : ‚Ñï) ‚Üí (s : ‚Ñï) ‚Üí <‚ÇÇ-Rec SafePred (k , s)
   ‚Üí (A : Type) ‚Üí (s ‚â° size A) ‚Üí ExpPred
ùîº k s rec A refl M = ‚àÄ N ‚Üí (M‚ÜíN : M ‚Äî‚Ü† N) ‚Üí (len M‚ÜíN < k)
                     ‚Üí (Œ£[ v ‚àà Value N ] ùïç (k ‚à∏ len M‚ÜíN) (size A) (<‚ÇÇ-Rec-subtract{j = len M‚ÜíN} rec) A refl v)
                       ‚äé (‚àÉ[ N‚Ä≤ ] (N ‚Äî‚Üí N‚Ä≤))
                       ‚äé N ‚â° blame

Safe-step : (p : ‚Ñï √ó ‚Ñï) ‚Üí (<‚ÇÇ-Rec SafePred p) ‚Üí SafePred p
Safe-step (k , s) rec A refl = ùïç k s rec A refl , ùîº k s rec A refl

abstract
  {- Safe is abstract to hide the complexity of the
     well-founded recursion, which is needed to
     make it possible to use the below unfold-Safe
     lemma to perform rewriting. -}
  Safe : (p : ‚Ñï √ó ‚Ñï) ‚Üí SafePred p
  Safe = <‚ÇÇ-rec _ (Œª i ‚Üí SafePred i) Safe-step

ùì•‚ü¶_‚üß : (A : Type) ‚Üí {V : Term} ‚Üí Value V ‚Üí ‚Ñï ‚Üí Set
ùì•‚ü¶ A ‚üß v k = proj‚ÇÅ (Safe (k , size A) A refl) v

ùìî‚ü¶_‚üß : Type ‚Üí Term ‚Üí ‚Ñï ‚Üí Set
ùìî‚ü¶ A ‚üß M k = proj‚ÇÇ (Safe (k , size A) A refl) M

postulate
  Safe-step-ext : (x : ‚Ñï √ó ‚Ñï) ‚Üí ‚àÄ {IH IH‚Ä≤}
      ‚Üí (‚àÄ{y} (y<x : y <‚ÇÇ x) ‚Üí IH y y<x ‚â° IH‚Ä≤ y y<x)
      ‚Üí Safe-step x IH ‚â° Safe-step x IH‚Ä≤

abstract
  unfold-Safe : ‚àÄ n ‚Üí Safe n ‚â° Safe-step n (Œª n‚Ä≤ _ ‚Üí Safe n‚Ä≤)
  unfold-Safe n = FixPoint.unfold-wfRec <‚ÇÇ-wellFounded (Œª i ‚Üí SafePred i)
                     Safe-step Safe-step-ext {n}

{- Equations for the Logical Relattion -}

V-base : ‚àÄ{n}{Œπ}{Œπ‚Ä≤}{c : rep Œπ‚Ä≤} ‚Üí ùì•‚ü¶ $‚Çú Œπ ‚üß ($Ã¨ c) n ‚â° (Œπ ‚â° Œπ‚Ä≤)
V-base {n} rewrite unfold-Safe (n , 0) = refl

V-dyn-zero : ‚àÄ{G}{V}{v : Value V}{g : Ground G}
   ‚Üí ùì•‚ü¶ ‚òÖ ‚üß {V ‚ü® g !‚ü©} (v ‚å© g ‚å™) 0 ‚â° ‚ä§
V-dyn-zero rewrite unfold-Safe (0 , size ‚òÖ) = refl

V-dyn : ‚àÄ{n}{G}{V}{v : Value V}{g : Ground G}
     ‚Üí ùì•‚ü¶ ‚òÖ ‚üß {V ‚ü® g !‚ü©} (v ‚å© g ‚å™) (suc n) ‚â° ùì•‚ü¶ G ‚üß v n
V-dyn {n}{G} rewrite unfold-Safe (suc n , size ‚òÖ)
                   | sym (unfold-Safe (n , size G))
    = refl

V-intro : ‚àÄ{n}{G}{V}{v : Value V}{g}
     ‚Üí ùì•‚ü¶ G ‚üß v n
     ‚Üí ùì•‚ü¶ ‚òÖ ‚üß {V ‚ü® g !‚ü©} (v ‚å© g ‚å™) (suc n)
V-intro {n}{G}{V}{v}{g} Vv rewrite V-dyn {n}{G}{V}{v}{g} = Vv

V-dyn-inv : ‚àÄ{V}{v : Value V}{n}
     ‚Üí ùì•‚ü¶ ‚òÖ ‚üß {V} v (suc n)
     ‚Üí ‚àÉ[ V‚Ä≤ ] ‚àÉ[ G ] Œ£[ g ‚àà Ground G ] (V ‚â° V‚Ä≤ ‚ü® g !‚ü©) √ó Value V‚Ä≤
V-dyn-inv {.(∆õ N)} {∆õÃ¨ N} {n} Vv rewrite unfold-Safe (suc n , size ‚òÖ) = ‚ä•-elim Vv
V-dyn-inv {.($ k)} {$Ã¨ k} {n} Vv rewrite unfold-Safe (suc n , size ‚òÖ) = ‚ä•-elim Vv
V-dyn-inv {(V‚Ä≤ ‚ü® g !‚ü©)} {v ‚å© g ‚å™} {n} Vv rewrite unfold-Safe (suc n , size ‚òÖ) =
    V‚Ä≤ , _ , g , refl , v

V-dyn-inv2 : ‚àÄ{V}{v : Value V}{n}
     ‚Üí ùì•‚ü¶ ‚òÖ ‚üß {V} v (suc n)
     ‚Üí ‚àÉ[ V‚Ä≤ ] ‚àÉ[ G ] Œ£[ g ‚àà Ground G ] (V ‚â° V‚Ä≤ ‚ü® g !‚ü©) √ó Œ£[ v‚Ä≤ ‚àà Value V‚Ä≤ ] ùì•‚ü¶ G ‚üß {V‚Ä≤} v‚Ä≤ n
V-dyn-inv2 {.(∆õ N)} {∆õÃ¨ N} {n} Vv rewrite unfold-Safe (suc n , size ‚òÖ) = ‚ä•-elim Vv
V-dyn-inv2 {.($ k)} {$Ã¨ k} {n} Vv rewrite unfold-Safe (suc n , size ‚òÖ) = ‚ä•-elim Vv
V-dyn-inv2 {(V‚Ä≤ ‚ü® g !‚ü©)} {v ‚å© g ‚å™} {n} Vv rewrite unfold-Safe (suc n , size ‚òÖ) =
    V‚Ä≤ , _ , g , refl , v , Vv

V-fun : ‚àÄ{n}{A B}{N}
  ‚Üí ùì•‚ü¶ A ‚áí B ‚üß (∆õÃ¨ N) n ‚â° ‚àÄ {V} (v : Value V) (j : ‚Ñï) ‚Üí (lt : j ‚â§ n)
                          ‚Üí ùì•‚ü¶ A ‚üß v j ‚Üí ùìî‚ü¶ B ‚üß (N [ V ]) j
V-fun {n}{A}{B} rewrite unfold-Safe (n , size (A ‚áí B)) = refl

E-def : (A : Type) ‚Üí (M : Term) ‚Üí (k : ‚Ñï)
   ‚Üí ùìî‚ü¶ A ‚üß M k ‚â°
       ‚àÄ N ‚Üí (M‚ÜíN : M ‚Äî‚Ü† N) ‚Üí (len M‚ÜíN < k)
             ‚Üí (Œ£[ v ‚àà Value N ] ùì•‚ü¶ A ‚üß v (k ‚à∏ len M‚ÜíN))
               ‚äé (‚àÉ[ N‚Ä≤ ] (N ‚Äî‚Üí N‚Ä≤))
               ‚äé N ‚â° blame               
E-def A M k rewrite unfold-Safe (k , size A)
  --| unfold-Safe (k ‚à∏ len M‚ÜíN , size A)
  = {!refl!}


{- Type Safety -}

{- A substitution whose terms are all values. -}
ValSubst : Set
ValSubst = Œ£[ œÉ ‚àà Subst ] (‚àÄ x ‚Üí Value (œÉ x))

inc : ValSubst ‚Üí ValSubst
inc œÉ = (Œª x ‚Üí proj‚ÇÅ œÉ (suc x)) , (Œª x ‚Üí proj‚ÇÇ œÉ (suc x))

ùìñ‚ü¶_‚üß : (Œì : List Type) ‚Üí ValSubst ‚Üí ‚Ñï ‚Üí Set
ùìñ‚ü¶ [] ‚üß œÉ k = ‚ä§
ùìñ‚ü¶ A ‚à∑ Œì ‚üß œÉ k = ùìñ‚ü¶ Œì ‚üß (inc œÉ) k √ó ùì•‚ü¶ A ‚üß (proj‚ÇÇ œÉ 0) k

lemma-ùìñ : (Œì : List Type) ‚Üí (Œ≥ : ValSubst) ‚Üí (k : ‚Ñï) ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ k
  ‚Üí ‚àÄ {A}{y} ‚Üí (‚àãy : Œì ‚àã y ‚¶Ç A)
  ‚Üí ùì•‚ü¶ A ‚üß (proj‚ÇÇ Œ≥ y) k
lemma-ùìñ [] Œ≥ k ùìñŒ≥ ()
lemma-ùìñ (A ‚à∑ Œì) Œ≥ k (ùìñŒ≥ , ùì•Œ≥0) {B} {zero} refl = ùì•Œ≥0
lemma-ùìñ (A ‚à∑ Œì) Œ≥ k (ùìñŒ≥ , ùì•Œ≥0) {B} {suc y} ‚àãy =
  lemma-ùìñ Œì (inc Œ≥) k ùìñŒ≥ ‚àãy

_‚ä®_‚¶Ç_ : List Type ‚Üí Term ‚Üí Type ‚Üí Set
Œì ‚ä® M ‚¶Ç A = ‚àÄ k (Œ≥ : ValSubst) ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ k ‚Üí ùìî‚ü¶ A ‚üß (‚ü™ proj‚ÇÅ Œ≥ ‚ü´ M) k

_‚ä®‚±Ω_‚¶Ç_ : List Type ‚Üí {V : Term} ‚Üí Value V ‚Üí Type ‚Üí Set
Œì ‚ä®‚±Ω v ‚¶Ç A = ‚àÄ k (Œ≥ : ValSubst) ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ k ‚Üí ùì•‚ü¶ A ‚üß (sub-val (proj‚ÇÅ Œ≥) v) k

Val‚áíExp : ‚àÄ{A}{V : Term}{v : Value V} (k : ‚Ñï)
   ‚Üí ùì•‚ü¶ A ‚üß v k
   ‚Üí ùìî‚ü¶ A ‚üß V k
Val‚áíExp Vv = {!!}

dyn? : (A : Type) ‚Üí A ‚â° ‚òÖ ‚äé A ‚â¢ ‚òÖ
dyn? ‚òÖ = inj‚ÇÅ refl
dyn? ($‚Çú Œπ) = inj‚ÇÇ (Œª ())
dyn? (A ‚áí B) = inj‚ÇÇ (Œª ())

ground-or-‚òÖ : (A : Type) ‚Üí A ‚â° ‚òÖ ‚äé Ground A ‚äé (‚àÉ[ G ] GroundOf A G √ó ¬¨ Ground A)
ground-or-‚òÖ ‚òÖ = inj‚ÇÅ refl
ground-or-‚òÖ ($‚Çú Œπ) = inj‚ÇÇ (inj‚ÇÅ ($·µç Œπ))
ground-or-‚òÖ (A ‚áí B)
    with dyn? A | dyn? B
... | inj‚ÇÅ refl | inj‚ÇÅ refl = inj‚ÇÇ (inj‚ÇÅ ‚òÖ‚áí‚òÖ)
... | inj‚ÇÅ refl | inj‚ÇÇ neq = inj‚ÇÇ (inj‚ÇÇ ((‚òÖ ‚áí ‚òÖ) , gnd-fun ,
                                         Œª { ‚òÖ‚áí‚òÖ ‚Üí neq refl}))
... | inj‚ÇÇ neq | _ = inj‚ÇÇ (inj‚ÇÇ (‚òÖ ‚áí ‚òÖ , gnd-fun , Œª { ‚òÖ‚áí‚òÖ ‚Üí neq refl}))

ground-match? : ‚àÄ{G} (g : Ground G) (B : Type)
  ‚Üí B ‚â¢ ‚òÖ
  ‚Üí (GroundOf B G) ‚äé (‚àÉ[ H ] Ground H √ó GroundOf B H √ó G ‚â¢ H)
ground-match? {.($‚Çú Œπ)} ($·µç Œπ) ‚òÖ Bnd = ‚ä•-elim (Bnd refl)
ground-match? {.($‚Çú Œπ)} ($·µç Œπ) ($‚Çú Œπ‚Ä≤) Bnd
    with Œπ ‚â°$? Œπ‚Ä≤
... | yes refl = inj‚ÇÅ gnd-base
... | no neq = inj‚ÇÇ (($‚Çú Œπ‚Ä≤) , ($·µç Œπ‚Ä≤) , gnd-base , (Œª {refl ‚Üí neq refl}))
ground-match? {.($‚Çú Œπ)} ($·µç Œπ) (B ‚áí B‚Ä≤) Bnd = inj‚ÇÇ (‚òÖ ‚áí ‚òÖ , ‚òÖ‚áí‚òÖ , gnd-fun , Œª ())
ground-match? {.(‚òÖ ‚áí ‚òÖ)} ‚òÖ‚áí‚òÖ ‚òÖ Bnd = ‚ä•-elim (Bnd refl)
ground-match? {.(‚òÖ ‚áí ‚òÖ)} ‚òÖ‚áí‚òÖ ($‚Çú Œπ) Bnd = inj‚ÇÇ ($‚Çú Œπ , $·µç Œπ , gnd-base , Œª ())
ground-match? {.(‚òÖ ‚áí ‚òÖ)} ‚òÖ‚áí‚òÖ (B ‚áí B‚Ä≤) Bnd = inj‚ÇÅ gnd-fun

mono-ùì• : ‚àÄ {j}{k}{A} {V}{v : Value V}
   ‚Üí j ‚â§‚Ä≤ k
   ‚Üí ùì•‚ü¶ A ‚üß v k
   ‚Üí ùì•‚ü¶ A ‚üß v j
mono-ùì• j‚â§k Vvk = {!!}

mono-SafeEnv : ‚àÄ j k {Œì} (Œ≥ : ValSubst)
   ‚Üí j ‚â§‚Ä≤ k
   ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ k
     -----------
   ‚Üí ùìñ‚ü¶ Œì ‚üß Œ≥ j
mono-SafeEnv = {!!}


