{-# OPTIONS --rewriting #-}
module rewriting.examples.CastDiverge where

open import Data.List using (List; []; _Рѕи_; length; map)
open import Data.Maybe
open import Data.Nat
open import Data.Bool using (true; false) renaming (Bool to ­Юћ╣)
open import Data.Nat.Properties
open import Data.Product using (_,_;_├Ќ_; projРѓЂ; projРѓѓ; ╬Б-syntax; РѕЃ-syntax)
open import Data.Unit using (Ріц; tt)
open import Data.Unit.Polymorphic renaming (Ріц to topрхќ; tt to ttрхќ)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Sum using (_Ріј_; injРѓЂ; injРѓѓ)
open import Relation.Binary.PropositionalEquality as Eq
  using (_РЅА_; _РЅб_; refl; sym; cong; subst; trans)
open import Relation.Nullary using (┬г_; Dec; yes; no)
open import Var
open import rewriting.examples.Cast
open import rewriting.examples.CastBigStep
open import rewriting.examples.StepIndexedLogic2

{----- Diverge ------}

data РЄЉ : Term Рєњ РёЋ Рєњ Set where
  РЄЉzero : Рѕђ{M} Рєњ РЄЉ M zero
  РЄЉapp : Рѕђ{L M N W k}
     Рєњ L РЄЊ кЏ N
     Рєњ M РЄЊ W Рєњ Value W
     Рєњ РЄЉ (N [ W ]) k
     Рєњ РЄЉ (L ┬и M) (suc k)
  РЄЉapp-L : Рѕђ{L M k} Рєњ РЄЉ L k Рєњ РЄЉ (L ┬и M) (suc k)
  РЄЉapp-R : Рѕђ{L M N k} Рєњ L РЄЊ кЏ N Рєњ РЄЉ M k Рєњ РЄЉ (L ┬и M) (suc k)
  РЄЉinj : Рѕђ{M G k}
     Рєњ РЄЉ M (suc k)  {- was РЄЉ M k   -Jeremy -}
     Рєњ РЄЉ (M РЪе G !РЪЕ) (suc k)
  РЄЉproj : Рѕђ{M H k} Рєњ РЄЉ M k Рєњ РЄЉ (M РЪе H ?РЪЕ) (suc k)

downClosedРЄЉ : Рѕђ {M} Рєњ downClosed (РЄЉ M)
downClosedРЄЉ zero РЄЉM .zero zРЅцn = РЄЉzero
downClosedРЄЉ (suc k) РЄЉM .zero zРЅцn = РЄЉzero
downClosedРЄЉ (suc k) (РЄЉapp LРЄЊ MРЄЊ w РЄЉNW) (suc j) (sРЅцs jРЅцk) =
    РЄЉapp LРЄЊ MРЄЊ w (downClosedРЄЉ k РЄЉNW j jРЅцk)
downClosedРЄЉ (suc k) (РЄЉapp-L РЄЉM) (suc j) (sРЅцs jРЅцk) =
    РЄЉapp-L (downClosedРЄЉ k РЄЉM j jРЅцk)
downClosedРЄЉ (suc k) (РЄЉapp-R x РЄЉM) (suc j) (sРЅцs jРЅцk) =
    РЄЉapp-R x (downClosedРЄЉ k РЄЉM j jРЅцk)
downClosedРЄЉ (suc k) (РЄЉinj РЄЉM) (suc j) (sРЅцs jРЅцk) =
    РЄЉinj (downClosedРЄЉ (suc k) РЄЉM (suc j) (sРЅцs jРЅцk))
downClosedРЄЉ (suc k) (РЄЉproj РЄЉM) (suc j) (sРЅцs jРЅцk) =
    РЄЉproj (downClosedРЄЉ k РЄЉM j jРЅцk)

{----- Diverge in SIL ------}

РЄЉрхњ : Term Рєњ Setрхњ
РЄЉрхњ M = record { # = РЄЉ M
              ; down = downClosedРЄЉ 
              ; tz = РЄЉzero
              }

{---- Lift Divergence Rules into SIL -----}

РібрхњРЄЉapp-L : Рѕђ{­ЮњФ}{L}{M}
 Рєњ ­ЮњФ Рібрхњ Рќирхњ (РЄЉрхњ L)
 Рєњ ­ЮњФ Рібрхњ РЄЉрхњ (L ┬и M)
РібрхњРЄЉapp-L {­ЮњФ}{L}{M} РібРќиРЄЉL = Рібрхњ-intro
  ╬╗ { zero ­ЮњФz Рєњ РЄЉzero
    ; (suc n) ­ЮњФsn Рєњ РЄЉapp-L (Рібрхњ-elim РібРќиРЄЉL (suc n) ­ЮњФsn) }

РібрхњРЄЉapp-R : Рѕђ{­ЮњФ}{L}{M}{N}
 Рєњ ­ЮњФ Рібрхњ (L РЄЊ кЏ N)рхњ
 Рєњ ­ЮњФ Рібрхњ Рќирхњ (РЄЉрхњ M)
 Рєњ ­ЮњФ Рібрхњ РЄЉрхњ (L ┬и M)
РібрхњРЄЉapp-R {­ЮњФ}{L}{M}{N} РібLРЄЊ РібРќиРЄЉM = Рібрхњ-intro
  ╬╗ { zero _ Рєњ РЄЉzero
    ; (suc n) ­ЮњФsn Рєњ
      РЄЉapp-R (Рібрхњ-elim РібLРЄЊ (suc n) ­ЮњФsn) (Рібрхњ-elim РібРќиРЄЉM (suc n) ­ЮњФsn ) }

РібрхњРЄЉapp : Рѕђ{­ЮњФ}{L}{M}{N}{W}
 Рєњ ­ЮњФ Рібрхњ (L РЄЊ кЏ N)рхњ
 Рєњ ­ЮњФ Рібрхњ (M РЄЊ W)рхњ
 Рєњ ­ЮњФ Рібрхњ (Value W)рхњ
 Рєњ ­ЮњФ Рібрхњ Рќирхњ (РЄЉрхњ (N [ W ]))
 Рєњ ­ЮњФ Рібрхњ РЄЉрхњ (L ┬и M)
РібрхњРЄЉapp {­ЮњФ}{L}{M}{N} РібLРЄЊ РібMРЄЊ Рібw РібРќиРЄЉNW = Рібрхњ-intro
  ╬╗ { zero _ Рєњ РЄЉzero
    ; (suc n) ­ЮњФsn Рєњ
      РЄЉapp (Рібрхњ-elim РібLРЄЊ (suc n) ­ЮњФsn)
           (Рібрхњ-elim РібMРЄЊ (suc n) ­ЮњФsn)
           (Рібрхњ-elim Рібw (suc n) ­ЮњФsn)
           (Рібрхњ-elim РібРќиРЄЉNW (suc n) ­ЮњФsn) }

РібРЄЉapp-inv : Рѕђ{­ЮњФ}{L}{M}{R}
 Рєњ (Рќирхњ (РЄЉрхњ L) Рѕи ­ЮњФ Рібрхњ R)
 Рєњ (Рѕђ N Рєњ (L РЄЊ кЏ N)рхњ Рѕи Рќирхњ (РЄЉрхњ M) Рѕи ­ЮњФ Рібрхњ R)
 Рєњ (Рѕђ N W Рєњ (L РЄЊ кЏ N)рхњ Рѕи (M РЄЊ W)рхњ Рѕи (Value W)рхњ Рѕи Рќирхњ (РЄЉрхњ (N [ W ]))
       Рѕи ­ЮњФ Рібрхњ R)
 Рєњ РЄЉрхњ (L ┬и M) Рѕи ­ЮњФ Рібрхњ R
РібРЄЉapp-inv {­ЮњФ}{L}{M}{R} c1 c2 c3 =
  Рібрхњ-intro ╬╗
  { zero x Рєњ tz R
  ; (suc n) (РЄЉapp-L РЄЉLn , ­ЮњФsn) Рєњ
     Рібрхњ-elim c1 (suc n) (РЄЉLn , ­ЮњФsn)
  ; (suc n) (РЄЉapp-R LРЄЊ РЄЉMn , ­ЮњФsn) Рєњ
     Рібрхњ-elim (c2 _) (suc n) (LРЄЊ , РЄЉMn , ­ЮњФsn)
  ; (suc n) (РЄЉapp LРЄЊ MРЄЊ w РЄЉNWn , ­ЮњФsn) Рєњ 
     Рібрхњ-elim (c3 _ _) (suc n) (LРЄЊ , MРЄЊ , w , РЄЉNWn , ­ЮњФsn)
  }

РібРЄЉinj : Рѕђ{­ЮњФ}{M}{G}
 Рєњ ­ЮњФ Рібрхњ (РЄЉрхњ M)
 Рєњ ­ЮњФ Рібрхњ РЄЉрхњ (M РЪе G !РЪЕ)
РібРЄЉinj {­ЮњФ}{M}{G} РібРЄЉM = Рібрхњ-intro
  ╬╗ { zero ­ЮњФn Рєњ РЄЉzero
    ; (suc n) ­ЮњФn Рєњ РЄЉinj (Рібрхњ-elim РібРЄЉM (suc n) ­ЮњФn)}

РібРЄЉinj-inv : Рѕђ{­ЮњФ}{M}{G}{R}
  Рєњ (РЄЉрхњ M) Рѕи ­ЮњФ Рібрхњ R
  Рєњ РЄЉрхњ (M РЪе G !РЪЕ) Рѕи ­ЮњФ Рібрхњ R
РібРЄЉinj-inv {­ЮњФ}{M}{G}{R} РЄЉMРібR = Рібрхњ-intro
  ╬╗ { zero _ Рєњ tz R
    ; (suc n) (РЄЉinj РЄЉMn , ­ЮњФsn) Рєњ Рібрхњ-elim РЄЉMРібR (suc n) (РЄЉMn , ­ЮњФsn) }
