{-# OPTIONS --rewriting #-}
module rewriting.examples.CastLogRelLogic2 where

open import Data.List using (List; []; _Рѕи_; length)
open import Data.Nat
open import Data.Bool using (true; false) renaming (Bool to ­Юћ╣)
open import Data.Nat.Properties
open import Data.Product using (_,_;_├Ќ_; projРѓЂ; projРѓѓ; ╬Б-syntax; РѕЃ-syntax)
open import Data.Unit using (Ріц; tt)
open import Data.Unit.Polymorphic renaming (Ріц to topрхќ; tt to ttрхќ)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Sum using (_Ріј_; injРѓЂ; injРѓѓ)
open import Relation.Binary.PropositionalEquality as Eq
  using (_РЅА_; _РЅб_; refl; sym; cong; subst; trans)
open import Relation.Nullary using (┬г_; Dec; yes; no)
open import Var
open import rewriting.examples.Cast
open import rewriting.examples.CastDeterministic
open import rewriting.examples.StepIndexedLogic2

Рё░Ріј­Юњ▒-type : Set
Рё░Ріј­Юњ▒-type = (Type ├Ќ Term) Ріј (Type ├Ќ Term)

Рё░Ріј­Юњ▒-ctx : Context
Рё░Ріј­Юњ▒-ctx = Рё░Ріј­Юњ▒-type Рѕи []

Рё░╦бРЪд_РЪД : Type Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Now РѕЁ)
Рё░╦бРЪд A РЪД M = (injРѓѓ (A , M)) Рѕѕ zero╦б

­Юњ▒╦бРЪд_РЪД : Type Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Now РѕЁ)
­Юњ▒╦бРЪд A РЪД V = (injРѓЂ (A , V)) Рѕѕ zero╦б

pre-­Юњ▒ : Type Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-­Юњ▒ РўЁ (V РЪе G !РЪЕ )  = (Value V)╦б ├Ќ╦б Рќи╦б (­Юњ▒╦бРЪд gndРЄњty G РЪД V)
pre-­Юњ▒ ($Рѓю ╬╣) ($ c)        = (╬╣ РЅА typeof c)╦б
pre-­Юњ▒ (A РЄњ B) (кЏ N)      = Рѕђ╦б[ W ] Рќи╦б (­Юњ▒╦бРЪд A РЪД W) Рєњ╦б Рќи╦б (Рё░╦бРЪд B РЪД (N [ W ]))
pre-­Юњ▒ A M                = РіЦ ╦б

instance
  TermInhabited : Inhabited Term
  TermInhabited = record { elt = ` 0 }

pre-Рё░ : Type Рєњ Term
       Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-Рё░ A M = pre-­Юњ▒ A M Ріј╦б (Blame M)╦б Ріј╦б (РѕЃ╦б[ N ] (M РђћРєњ N)╦б ├Ќ╦б Рќи╦б (Рё░╦бРЪд A РЪД N))
            
pre-Рё░Ріј­Юњ▒ : Рё░Ріј­Юњ▒-type Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-Рё░Ріј­Юњ▒ (injРѓЂ (A , V)) = pre-­Юњ▒ A V
pre-Рё░Ріј­Юњ▒ (injРѓѓ (A , M)) = pre-Рё░ A M

Рё░Ріј­Юњ▒ : Рё░Ріј­Юњ▒-type Рєњ Setрхњ
Рё░Ріј­Юњ▒ X = ╬╝рхњ pre-Рё░Ріј­Юњ▒ X

-- Semantically Well Typed Value
­Юњ▒РЪд_РЪД : (A : Type) Рєњ Term Рєњ Setрхњ
­Юњ▒РЪд A РЪД V = Рё░Ріј­Юњ▒ (injРѓЂ (A , V))

-- Semantically Well Typed Term
Рё░РЪд_РЪД : (A : Type) Рєњ Term Рєњ Setрхњ
Рё░РЪд A РЪД M = Рё░Ріј­Юњ▒ (injРѓѓ (A , M))

{-
foo : Рѕђ (X : Рё░Ріј­Юњ▒-type) Рєњ Type Рєњ Term Рєњ Ріц
foo X A M =
   let m = #(╬╝╦б Рё░Ріј­Юњ▒ X) ttрхќ in
   let n = #(Рё░Ріј­Юњ▒ X) {!!} in
   let x = Рё░РЪд A РЪД M in
   let fp = РЅА╦б-elim (fixpoint╦б {[]}{РѕЁ}{Рё░Ріј­Юњ▒-type} Рё░Ріј­Юњ▒ X) ttрхќ in
   {!!}
-}

Рё░Ріј­Юњ▒-fixpointрхњ : Рѕђ X
   Рєњ Рё░Ріј­Юњ▒ X РЅАрхњ # (pre-Рё░Ріј­Юњ▒ X) (Рё░Ріј­Юњ▒ , ttрхќ)
Рё░Ріј­Юњ▒-fixpointрхњ X = fixpointрхњ pre-Рё░Ріј­Юњ▒ X 

reduce-at : Type Рєњ Term Рєњ Setрхњ
reduce-at A M = РѕЃрхњ[ N ] (M РђћРєњ N)рхњ ├Ќрхњ Рќирхњ (Рё░РЪд A РЪД N)

Рё░-stmt : Рѕђ{A}{M}
  Рєњ Рё░РЪд A РЪД M РЅАрхњ ­Юњ▒РЪд A РЪД M Ріјрхњ (Blame M)рхњ Ріјрхњ reduce-at A M
Рё░-stmt {A}{M} =
  Рё░РЪд A РЪД M                                                    РЕдРЪе РЅАрхњ-refl refl РЪЕ
  ╬╝рхњ pre-Рё░Ріј­Юњ▒ (injРѓѓ (A , M))              РЕдРЪе fixpointрхњ pre-Рё░Ріј­Юњ▒ (injРѓѓ (A , M)) РЪЕ
  # (pre-Рё░Ріј­Юњ▒ (injРѓѓ (A , M))) (Рё░Ріј­Юњ▒ , ttрхќ)
       РЕдРЪе cong-Ріјрхњ (РЅАрхњ-sym (fixpointрхњ pre-Рё░Ріј­Юњ▒ (injРѓЂ (A , M)))) (РЅАрхњ-refl refl) РЪЕ
  (­Юњ▒РЪд A РЪД M Ріјрхњ (Blame M)рхњ Ріјрхњ reduce-at A M)           Рѕј

­Юњ▒-base : Рѕђ{╬╣}{c : Lit} Рєњ (­Юњ▒РЪд $Рѓю ╬╣ РЪД ($ c)) РЅАрхњ (╬╣ РЅА typeof c)рхњ
­Юњ▒-base = РЅАрхњ-intro ╬╗ k Рєњ (╬╗ x Рєњ x) , (╬╗ x Рєњ x)

­Юњ▒-base-intro : Рѕђ{­ЮњФ}{╬╣}{c : Lit}
   Рєњ ­ЮњФ Рібрхњ (╬╣ РЅА typeof c)рхњ
     -----------------------
   Рєњ ­ЮњФ Рібрхњ (­Юњ▒РЪд $Рѓю ╬╣ РЪД ($ c))
­Юњ▒-base-intro{­ЮњФ}{╬╣}{c} Ріб╬╣РЅАtyc = substрхњ (РЅАрхњ-sym ­Юњ▒-base) Ріб╬╣РЅАtyc

­Юњ▒-base-elim : Рѕђ{­ЮњФ}{╬╣}{c : Lit}{R}
   Рєњ ­ЮњФ Рібрхњ (­Юњ▒РЪд $Рѓю ╬╣ РЪД ($ c))
   Рєњ (╬╣ РЅА typeof c Рєњ ­ЮњФ Рібрхњ R)
     -----------------------
   Рєњ ­ЮњФ Рібрхњ R
­Юњ▒-base-elim Ріб­Юњ▒c cont = Рібрхњ-sucP Ріб­Юњ▒c ╬╗ {n} ­Юњ▒csn Рєњ cont ­Юњ▒csn

­Юњ▒-dyn : Рѕђ{G}{V} Рєњ ­Юњ▒РЪд РўЁ РЪД (V РЪе G !РЪЕ) РЅАрхњ ((Value V)рхњ ├Ќрхњ Рќирхњ (­Юњ▒РЪд gndРЄњty G РЪД V))
­Юњ▒-dyn {G}{V} =
   let X = (injРѓЂ (РўЁ , V РЪе G !РЪЕ)) in
   ­Юњ▒РЪд РўЁ РЪД (V РЪе G !РЪЕ)                              РЕдРЪе РЅАрхњ-refl refl РЪЕ
   Рё░Ріј­Юњ▒ X                                 РЕдРЪе fixpointрхњ pre-Рё░Ріј­Юњ▒ X РЪЕ
   # (pre-Рё░Ріј­Юњ▒ X) (Рё░Ріј­Юњ▒ , ttрхќ)                  РЕдРЪе РЅАрхњ-refl refl РЪЕ 
   (Value V)рхњ ├Ќрхњ Рќирхњ (­Юњ▒РЪд gndРЄњty G РЪД V)       Рѕј

­Юњ▒-dyn-intro : Рѕђ{­ЮњФ}{G}{V}
   Рєњ ­ЮњФ Рібрхњ (Value V)рхњ
   Рєњ ­ЮњФ Рібрхњ Рќирхњ ­Юњ▒РЪд gndРЄњty G РЪД V
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд РўЁ РЪД (V РЪе G !РЪЕ)
­Юњ▒-dyn-intro Рібv Ріб­Юњ▒V = substрхњ (РЅАрхњ-sym ­Юњ▒-dyn)  (Рібv ,рхњ Ріб­Юњ▒V)

­Юњ▒РЄњValue : Рѕђ {k} A M
   Рєњ # (­Юњ▒РЪд A РЪД M) (suc k)
     ---------------------
   Рєњ Value M
­Юњ▒РЄњValue РўЁ (M РЪе G !РЪЕ) (v , _) = v РїЕ G Рїф
­Юњ▒РЄњValue ($Рѓю ╬╣) ($ c) ­Юњ▒M = $╠г c
­Юњ▒РЄњValue (A РЄњ B) (кЏ N) ­Юњ▒M = кЏ╠г N

­Юњ▒-dyn-elim : Рѕђ{­ЮњФ}{V}{R}
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд РўЁ РЪД V
   Рєњ (Рѕђ W G Рєњ V РЅА W РЪе G !РЪЕ
             Рєњ ­ЮњФ Рібрхњ ((Value W)рхњ ├Ќрхњ Рќирхњ (­Юњ▒РЪд gndРЄњty G РЪД W))
             Рєњ ­ЮњФ Рібрхњ R)
     ----------------------------------------------
   Рєњ ­ЮњФ Рібрхњ R
­Юњ▒-dyn-elim {­ЮњФ}{V}{R} Ріб­Юњ▒V cont =
  Рібрхњ-sucP Ріб­Юњ▒V ╬╗ { ­Юњ▒Vsn Рєњ G ­Юњ▒Vsn Ріб­Юњ▒V cont }
  where
  G : Рѕђ{V}{n}
      Рєњ # (­Юњ▒РЪд РўЁ РЪД V) (suc n)
      Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд РўЁ РЪД V
      Рєњ (Рѕђ W G Рєњ V РЅА W РЪе G !РЪЕ
               Рєњ ­ЮњФ Рібрхњ ((Value W)рхњ ├Ќрхњ Рќирхњ (­Юњ▒РЪд gndРЄњty G РЪД W))
               Рєњ ­ЮњФ Рібрхњ R)
      Рєњ ­ЮњФ Рібрхњ R
  G {W РЪе G !РЪЕ}{n} ­Юњ▒Vsn Ріб­Юњ▒V cont
      with ­Юњ▒РЄњValue РўЁ (W РЪе G !РЪЕ) ­Юњ▒Vsn
  ... | w РїЕ _ Рїф =
      let РібРќи­Юњ▒W = projРѓѓрхњ (substрхњ (­Юњ▒-dyn{V = W}) Ріб­Юњ▒V) in
      cont W _ refl (constрхњI w ,рхњ РібРќи­Юњ▒W)
  
­Юњ▒-fun : Рѕђ{A B}{N}
   Рєњ (­Юњ▒РЪд A РЄњ B РЪД (кЏ N))
      РЅАрхњ (Рѕђрхњ[ W ] ((Рќирхњ (­Юњ▒РЪд A РЪД W)) Рєњрхњ (Рќирхњ (Рё░РЪд B РЪД (N [ W ])))))
­Юњ▒-fun {A}{B}{N} =
   let X = (injРѓЂ (A РЄњ B , кЏ N)) in
   ­Юњ▒РЪд A РЄњ B РЪД (кЏ N)                                         РЕдРЪе РЅАрхњ-refl refl РЪЕ
   Рё░Ріј­Юњ▒ X                                         РЕдРЪе fixpointрхњ pre-Рё░Ріј­Юњ▒ X РЪЕ
   # (pre-Рё░Ріј­Юњ▒ X) (Рё░Ріј­Юњ▒ , ttрхќ)                            РЕдРЪе РЅАрхњ-refl refl РЪЕ 
   (Рѕђрхњ[ W ] ((Рќирхњ (­Юњ▒РЪд A РЪД W)) Рєњрхњ (Рќирхњ (Рё░РЪд B РЪД (N [ W ])))))
   Рѕј

­Юњ▒-fun-intro : Рѕђ{­ЮњФ}{A}{B}{N}
  Рєњ ­ЮњФ Рібрхњ (Рѕђрхњ[ W ] ((Рќирхњ (­Юњ▒РЪд A РЪД W)) Рєњрхњ (Рќирхњ (Рё░РЪд B РЪД (N [ W ])))))
    -------------------------------------------------------------
  Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд A РЄњ B РЪД (кЏ N)
­Юњ▒-fun-intro {­ЮњФ}{A}{B}{V} ­Юњ▒WРєњРё░NW = (substрхњ (РЅАрхњ-sym ­Юњ▒-fun) ­Юњ▒WРєњРё░NW)

­Юњ▒-fun-elim : Рѕђ{­ЮњФ}{A}{B}{V}{R}
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд A РЄњ B РЪД V
   Рєњ (Рѕђ N Рєњ V РЅА кЏ N
             Рєњ (Рѕђ{W} Рєњ ­ЮњФ Рібрхњ (Рќирхњ (­Юњ▒РЪд A РЪД W)) Рєњрхњ (Рќирхњ (Рё░РЪд B РЪД (N [ W ]))))
             Рєњ ­ЮњФ Рібрхњ R)
     --------------------------------------------------------------------
   Рєњ ­ЮњФ Рібрхњ R
­Юњ▒-fun-elim {­ЮњФ}{A}{B}{V}{R} Ріб­Юњ▒V cont =
  Рібрхњ-sucP Ріб­Юњ▒V ╬╗ { ­Юњ▒Vsn Рєњ G {V} ­Юњ▒Vsn Ріб­Юњ▒V cont}
  where
  G : Рѕђ{V}{n}
     Рєњ # (­Юњ▒РЪд A РЄњ B РЪД V) (suc n)
     Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд A РЄњ B РЪД V
     Рєњ (Рѕђ N Рєњ V РЅА кЏ N
             Рєњ (Рѕђ{W} Рєњ ­ЮњФ Рібрхњ (Рќирхњ (­Юњ▒РЪд A РЪД W)) Рєњрхњ (Рќирхњ (Рё░РЪд B РЪД (N [ W ]))))
             Рєњ ­ЮњФ Рібрхњ R)
     Рєњ ­ЮњФ Рібрхњ R
  G{кЏ N}{n} ­Юњ▒V Ріб­Юњ▒V cont = cont N refl ╬╗ {W} Рєњ
      instрхњ{P = ╬╗ W Рєњ (Рќирхњ (­Юњ▒РЪд A РЪД W)) Рєњрхњ (Рќирхњ (Рё░РЪд B РЪД (N [ W ])))}
                 (substрхњ ­Юњ▒-fun Ріб­Юњ▒V) W

Рё░-blame : Рѕђ{­ЮњФ}{A} Рєњ ­ЮњФ Рібрхњ Рё░РЪд A РЪД blame
Рё░-blame {­ЮњФ}{A} = substрхњ (РЅАрхњ-sym Рё░-stmt) (injРѓѓрхњ (injРѓЂрхњ (constрхњI isBlame)))

{- Semantic Type Safety -}

­ЮЊќРЪд_РЪД : (╬Њ : List Type) Рєњ Subst Рєњ List Setрхњ
­ЮЊќРЪд [] РЪД ¤Ѓ = []
­ЮЊќРЪд A Рѕи ╬Њ РЪД ¤Ѓ = (­Юњ▒РЪд A РЪД (¤Ѓ 0)) Рѕи ­ЮЊќРЪд ╬Њ РЪД (╬╗ x Рєњ ¤Ѓ (suc x))

_Ріе_Рдѓ_ : List Type Рєњ Term Рєњ Type Рєњ Set
╬Њ Ріе M Рдѓ A = Рѕђ (╬│ : Subst) Рєњ ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ Рё░РЪд A РЪД (РЪф ╬│ РЪФ M)

lookup-­ЮЊќ : (╬Њ : List Type) Рєњ (╬│ : Subst)
  Рєњ Рѕђ {A}{y} Рєњ (╬Њ РѕІ y Рдѓ A)
  Рєњ ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­Юњ▒РЪд A РЪД (╬│ y)
lookup-­ЮЊќ (B Рѕи ╬Њ) ╬│ {A} {zero} refl = Zрхњ
lookup-­ЮЊќ (B Рѕи ╬Њ) ╬│ {A} {suc y} РѕІy =
    Sрхњ (lookup-­ЮЊќ ╬Њ (╬╗ x Рєњ ╬│ (suc x)) РѕІy) 

{- Semantic Values are Semantic Expressions -}

­Юњ▒РЄњРё░ : Рѕђ{A}{­ЮњФ}{V}
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд A РЪД V
     ---------------
   Рєњ ­ЮњФ Рібрхњ Рё░РЪд A РЪД V
­Юњ▒РЄњРё░ {A}{­ЮњФ}{V} ­ЮњФРіб­Юњ▒V = substрхњ (РЅАрхњ-sym Рё░-stmt) (injРѓЂрхњ ­ЮњФРіб­Юњ▒V)

{- Рё░-bind (Monadic Bind Lemma) -}

­Юњ▒VРєњРё░F[V] : Type Рєњ Type Рєњ Frame Рєњ Term Рєњ Setрхњ
­Юњ▒VРєњРё░F[V] A B F M = Рѕђрхњ[ V ] (M РђћРєа V)рхњ Рєњрхњ ­Юњ▒РЪд B РЪД V Рєњрхњ Рё░РЪд A РЪД (F РЪд V РЪД)

Рё░-bind-M : Type Рєњ Type Рєњ Frame Рєњ Term Рєњ Setрхњ
Рё░-bind-M A B F M = Рё░РЪд B РЪД M Рєњрхњ ­Юњ▒VРєњРё░F[V] A B F M Рєњрхњ Рё░РЪд A РЪД (F РЪд M РЪД)

Рё░-bind-prop : Type Рєњ Type Рєњ Frame Рєњ Setрхњ
Рё░-bind-prop A B F = Рѕђрхњ[ M ] Рё░-bind-M A B F M

­Юњ▒VРєњРё░F[V]-expansion : Рѕђ{­ЮњФ}{A}{B}{F}{M}{MРђ▓}
   Рєњ M РђћРєњ MРђ▓
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒VРєњРё░F[V] A B F M
     -----------------------
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒VРєњРё░F[V] A B F MРђ▓
­Юњ▒VРєњРё░F[V]-expansion {­ЮњФ}{A}{B}{F}{M}{MРђ▓} MРєњMРђ▓ ­Юњ▒VРєњРё░F[V][M] =
   ╬Џрхњ[ V ]
    let MРђ▓РєњVРєњРё░FV : ­Юњ▒РЪд B РЪД V Рѕи (MРђ▓ РђћРєа V)рхњ Рѕи ­ЮњФ Рібрхњ Рё░РЪд A РЪД (F РЪд V РЪД)
        MРђ▓РєњVРєњРё░FV = Рібрхњ-sucP (Sрхњ Zрхњ) ╬╗ MРђ▓РєњV Рєњ 
                     let MРђћРєаV = constрхњI (M РђћРєњРЪе MРєњMРђ▓ РЪЕ MРђ▓РєњV) in
                     let MРєњVРєњРё░FV = Рібрхњ-weaken(Рібрхњ-weaken(instрхњ ­Юњ▒VРєњРё░F[V][M] V)) in
                     appрхњ (appрхњ MРєњVРєњРё░FV MРђћРєаV) Zрхњ in
    РєњрхњI (РєњрхњI MРђ▓РєњVРєњРё░FV)

Рё░-bind-aux : Рѕђ{­ЮњФ}{A}{B}{F} Рєњ ­ЮњФ Рібрхњ Рё░-bind-prop A B F
Рё░-bind-aux {­ЮњФ}{A}{B}{F} = lobрхњ Goal
 where     
 Goal : Рќирхњ Рё░-bind-prop A B F Рѕи ­ЮњФ Рібрхњ Рё░-bind-prop A B F
 Goal = ╬Џрхњ[ M ] РєњрхњI (РєњрхњI GoalРђ▓)
  where
  GoalРђ▓ : Рѕђ{M}
     Рєњ (­Юњ▒VРєњРё░F[V] A B F M) Рѕи Рё░РЪд B РЪД M Рѕи Рќирхњ Рё░-bind-prop A B F Рѕи ­ЮњФ
        Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
  GoalРђ▓{M} = case3рхњ (substрхњ Рё░-stmt (Sрхњ Zрхњ)) Mval Mblame Mred
   where
   ­ЮњФРђ▓ = (­Юњ▒VРєњРё░F[V] A B F M) Рѕи Рё░РЪд B РЪД M Рѕи Рќирхњ Рё░-bind-prop A B F Рѕи ­ЮњФ

   Mval : ­Юњ▒РЪд B РЪД M Рѕи ­ЮњФРђ▓ Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
   Mval =
     let Ріб­Юњ▒M : ­Юњ▒РЪд B РЪД M Рѕи ­ЮњФРђ▓ Рібрхњ ­Юњ▒РЪд B РЪД M
         Ріб­Юњ▒M = Zрхњ in
     let Рё░contFM : ­Юњ▒РЪд B РЪД M Рѕи ­ЮњФРђ▓ Рібрхњ ­Юњ▒VРєњРё░F[V] A B F M
         Рё░contFM = Sрхњ Zрхњ in
     let Cont = ╬╗ V Рєњ (M РђћРєа V)рхњ Рєњрхњ ­Юњ▒РЪд B РЪД V Рєњрхњ Рё░РЪд A РЪД (F РЪд V РЪД) in
     appрхњ (appрхњ (instрхњ{P = Cont} Рё░contFM M) (constрхњI (M END))) Ріб­Юњ▒M

   Mred : reduce-at B M Рѕи ­ЮњФРђ▓ Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
   Mred =
      Рібрхњ-РѕЃ-elim Zрхњ ╬╗ MРђ▓ Рєњ constрхњE (projРѓЂрхњ Zрхњ) ╬╗ MРєњMРђ▓ Рєњ
      let ­ЮњФРђ│ = (M РђћРєњ MРђ▓)рхњ ├Ќрхњ Рќирхњ (Рё░РЪд B РЪД MРђ▓) Рѕи reduce-at B M Рѕи ­ЮњФРђ▓ in
      let РќиРё░MРђ▓ : ­ЮњФРђ│ Рібрхњ Рќирхњ (Рё░РЪд B РЪД MРђ▓)
          РќиРё░MРђ▓ = projРѓѓрхњ Zрхњ in
      let ­Юњ▒РєњРё░F[MРђ▓] : ­ЮњФРђ│ Рібрхњ ­Юњ▒VРєњРё░F[V] A B F MРђ▓
          ­Юњ▒РєњРё░F[MРђ▓] = ­Юњ▒VРєњРё░F[V]-expansion{­ЮњФРђ│}{A}{B} MРєњMРђ▓ (Sрхњ (Sрхњ Zрхњ)) in
      let IH : ­ЮњФРђ│ Рібрхњ Рќирхњ Рё░-bind-prop A B F
          IH = Sрхњ (Sрхњ (Sрхњ (Sрхњ Zрхњ))) in
      let РќиРё░FMРђ▓ : ­ЮњФРђ│ Рібрхњ Рќирхњ (Рё░РЪд A РЪД (F РЪд MРђ▓ РЪД))
          РќиРё░FMРђ▓ = appрхњ(РќиРєњ(appрхњ(РќиРєњ (instрхњ (РќиРѕђ IH) MРђ▓)) РќиРё░MРђ▓))(monoрхњ ­Юњ▒РєњРё░F[MРђ▓]) in
      substрхњ (РЅАрхњ-sym Рё░-stmt)
           (injРѓѓрхњ (injРѓѓрхњ (Рібрхњ-РѕЃ-intro (F РЪд MРђ▓ РЪД) (constрхњI (╬Й F MРєњMРђ▓) ,рхњ РќиРё░FMРђ▓))))
       
   Mblame : (Blame M)рхњ Рѕи ­ЮњФРђ▓ Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
   Mblame = substрхњ (РЅАрхњ-sym Рё░-stmt) (injРѓѓрхњ (injРѓѓрхњ {!!}))
   -- Рё░-intro progressMblame
--             (constрхњE Zрхњ ╬╗ blameM Рєњ
--              Рібрхњ-weaken (╬Џрхњ[ N ] РєњрхњI (constрхњE Zрхњ ╬╗ FMРєњN Рєњ
--                                           Рібрхњ-weaken (blameMРЄњРќиРё░N blameM FMРєњN))))
--     where
--     progressMblame : (Blame M)рхњ Рѕи ­ЮњФРђ▓ Рібрхњ progress A (F РЪд M РЪД)
--     progressMblame =
--        let redFM : (Blame M)рхњ Рѕи ­ЮњФРђ▓ Рібрхњ (reducible (F РЪд M РЪД))рхњ
--            redFM = constрхњE Zрхњ ╬╗ {isBlame Рєњ constрхњI (_ , (╬Й-blame F))} in
--        injРѓѓрхњ (injРѓЂрхњ redFM)

--     blameMРЄњРќиРё░N : Рѕђ{N} Рєњ Blame M Рєњ (F РЪд M РЪД РђћРєњ N)
--        Рєњ ­ЮњФРђ▓ Рібрхњ Рќирхњ (Рё░РЪд A РЪД N)
--     blameMРЄњРќиРё░N {N} isBlame FMРєњN =
--         let eq = blame-frame FMРєњN in
--         subst (╬╗ N Рєњ ­ЮњФРђ▓ Рібрхњ Рќирхњ Рё░РЪд A РЪД N) (sym eq) (monoрхњ Рё░-blame)

-- Рё░-bind : Рѕђ{­ЮњФ}{A}{B}{F}{M}
--    Рєњ ­ЮњФ Рібрхњ Рё░РЪд B РЪД M
--    Рєњ ­ЮњФ Рібрхњ (Рѕђрхњ[ V ] (M РђћРєа V)рхњ Рєњрхњ ­Юњ▒РЪд B РЪД V Рєњрхњ Рё░РЪд A РЪД (F РЪд V РЪД))
--      ----------------------------------------------------------
--    Рєњ ­ЮњФ Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
-- Рё░-bind {­ЮњФ}{A}{B}{F}{M} РібРё░M Ріб­Юњ▒VРєњРё░FV =
--   appрхњ (appрхњ (instрхњ{­ЮњФ}{P = ╬╗ M Рєњ Рё░-bind-M A B F M} Рё░-bind-aux M)
--              РібРё░M)
--        Ріб­Юњ▒VРєњРё░FV

-- {- The following lemma is currently not used. -}
-- exp-Рќи : Рѕђ{­ЮњФ}{A}{M N : Term}
--    Рєњ ­ЮњФ Рібрхњ (M РђћРєњ N)рхњ
--    Рєњ ­ЮњФ Рібрхњ Рќирхњ (Рё░РЪд A РЪД N)
--      -------------------
--    Рєњ ­ЮњФ Рібрхњ Рё░РЪд A РЪД M
-- exp-Рќи{­ЮњФ}{A}{M}{N} ­ЮњФРібMРєњN РібРќиРё░N =
--   substрхњ (РЅАрхњ-sym (Рё░-stmt{A}{M})) Goal 
--   where
--   redM : ­ЮњФ Рібрхњ reducible M рхњ
--   redM = constрхњE ­ЮњФРібMРєњN ╬╗ MРєњN Рєњ constрхњI (_ , MРєњN)

--   Рібprog : ­ЮњФ Рібрхњ progress A M
--   Рібprog = injРѓѓрхњ{­ЮњФ}{­Юњ▒РЪд A РЪД M}{(reducible M)рхњ Ріјрхњ (Blame M)рхњ}
--             (injРѓЂрхњ{­ЮњФ}{(reducible M)рхњ}{(Blame M)рхњ} redM)
          
--   Рібpres : ­ЮњФ Рібрхњ preservation A M
--   Рібpres = Рібрхњ-Рѕђ-intro {P = ╬╗ N Рєњ ((M РђћРєњ N)рхњ Рєњрхњ Рќирхњ (Рё░РЪд A РЪД N))}
--       ╬╗ NРђ▓ Рєњ Рібрхњ-intro
--         ╬╗ { zero Ріе­ЮњФn .zero zРЅцn MРєњNРђ▓ Рєњ tt ;
--             (suc n) Ріе­ЮњФn .zero zРЅцn MРєњNРђ▓ Рєњ tt ;
--             (suc n) Ріе­ЮњФn (suc j) (sРЅцs jРЅцn) MРєњNРђ▓ Рєњ
--               let Ріе­ЮњФsj = (downClosed-╬архњ ­ЮњФ (suc n) Ріе­ЮњФn (suc j) (sРЅцs jРЅцn)) in
--               subst (╬╗ X Рєњ # (Рё░РЪд A РЪД X) j)
--                   (deterministic (((Рібрхњ-elim ­ЮњФРібMРєњN) (suc j) Ріе­ЮњФsj)) MРєњNРђ▓)
--                   ((Рібрхњ-elim РібРќиРё░N) (suc j) Ріе­ЮњФsj)}
          
--   Goal : ­ЮњФ Рібрхњ progress A M ├Ќрхњ preservation A M
--   Goal = Рібprog ,рхњ Рібpres

