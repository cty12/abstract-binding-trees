{-# OPTIONS --rewriting #-}
module rewriting.examples.CastGradualGuarantee where

open import Data.List using (List; []; _Рѕи_; length)
open import Data.Nat
open import Data.Bool using (true; false) renaming (Bool to ­Юћ╣)
open import Data.Nat.Properties
open import Data.Product using (_,_;_├Ќ_; projРѓЂ; projРѓѓ; ╬Б-syntax; РѕЃ-syntax)
open import Data.Unit using (Ріц; tt)
open import Data.Unit.Polymorphic renaming (Ріц to topрхќ; tt to ttрхќ)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Sum using (_Ріј_; injРѓЂ; injРѓѓ)
open import Relation.Binary.PropositionalEquality as Eq
  using (_РЅА_; _РЅб_; refl; sym; cong; subst; trans)
open import Relation.Nullary using (┬г_; Dec; yes; no)
open import Var
open import rewriting.examples.Cast
open import rewriting.examples.CastDeterministic
open import rewriting.examples.StepIndexedLogic2

Рё░Ріј­Юњ▒-type : Set
Рё░Ріј­Юњ▒-type = (Prec ├Ќ Term ├Ќ Term) Ріј (Prec ├Ќ Term ├Ќ Term)

Рё░Ріј­Юњ▒-ctx : Context
Рё░Ріј­Юњ▒-ctx = Рё░Ріј­Юњ▒-type Рѕи []

Рё░╦бРЪд_РЪД : Prec Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Now РѕЁ)
Рё░╦бРЪд AРіЉB РЪД M MРђ▓ = (injРѓѓ (AРіЉB , M , MРђ▓)) Рѕѕ zero╦б

­Юњ▒╦бРЪд_РЪД : Prec Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Now РѕЁ)
­Юњ▒╦бРЪд AРіЉB РЪД V VРђ▓ = (injРѓЂ (AРіЉB , V , VРђ▓)) Рѕѕ zero╦б

pre-­Юњ▒ : Prec Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-­Юњ▒ (.РўЁ , РўЁ , unkРіЉ) (V РЪе G !РЪЕ) (VРђ▓ РЪе H !РЪЕ)
    with G РЅАрхЇ H
... | yes refl = let g = gndРЄњty G in
                 (Value V)╦б ├Ќ╦б (Value VРђ▓)╦б
                 ├Ќ╦б (Рќи╦б (­Юњ▒╦бРЪд (g , g , ReflРіЉ) РЪД V VРђ▓))
... | no neq = РіЦ ╦б
pre-­Юњ▒ (.РўЁ , $Рѓю ╬╣Рђ▓ , unkРіЉ) (V РЪе $рхЇ ╬╣ !РЪЕ) ($ c)
    with ($рхЇ ╬╣) РЅАрхЇ ($рхЇ ╬╣Рђ▓)
... | yes refl = (Value V)╦б ├Ќ╦б Рќи╦б (­Юњ▒╦бРЪд ($Рѓю ╬╣ , $Рѓю ╬╣ , ReflРіЉ) РЪД V ($ c))
... | no new = РіЦ ╦б
pre-­Юњ▒ (.РўЁ , AРђ▓ РЄњ BРђ▓ , unkРіЉ) (V РЪе РўЁРЄњРўЁ !РЪЕ) VРђ▓ =
    (Value V)╦б ├Ќ╦б (Value VРђ▓)╦б
    ├Ќ╦б Рќи╦б (­Юњ▒╦бРЪд (РўЁ РЄњ РўЁ , AРђ▓ РЄњ BРђ▓ , funРіЉ unkРіЉ unkРіЉ) РЪД V VРђ▓)
pre-­Юњ▒ ($Рѓю ╬╣ , $Рѓю ╬╣ , baseРіЉ) ($ c) ($ cРђ▓) = (c РЅА cРђ▓) ╦б
pre-­Юњ▒ ((A РЄњ B) , (AРђ▓ РЄњ BРђ▓) , funРіЉ AРіЉAРђ▓ BРіЉBРђ▓) (кЏ N) (кЏ NРђ▓) =
    Рѕђ╦б[ W ] Рѕђ╦б[ WРђ▓ ] Рќи╦б (­Юњ▒╦бРЪд (A , AРђ▓ , AРіЉAРђ▓) РЪД W WРђ▓)
                  Рєњ╦б Рќи╦б (Рё░╦бРЪд (B , BРђ▓ , BРіЉBРђ▓) РЪД (N [ W ]) (NРђ▓ [ WРђ▓ ])) 
pre-­Юњ▒ (A , AРђ▓ , AРіЉAРђ▓) V VРђ▓ = РіЦ ╦б

pre-Рё░ : Prec Рєњ Term Рєњ Term Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-Рё░ c M MРђ▓ =
       pre-­Юњ▒ c M MРђ▓
    Ріј╦б ((reducible M)╦б ├Ќ╦б (Рѕђ╦б[ N ] (M РђћРєњ N)╦б Рєњ╦б Рќи╦б (Рё░╦бРЪд c РЪД N MРђ▓)))
    Ріј╦б ((reducible MРђ▓)╦б ├Ќ╦б (Рѕђ╦б[ NРђ▓ ] (MРђ▓ РђћРєњ NРђ▓)╦б Рєњ╦б Рќи╦б (Рё░╦бРЪд c РЪД M NРђ▓)))
    Ріј╦б (Blame MРђ▓)╦б

pre-Рё░Ріј­Юњ▒ : Рё░Ріј­Юњ▒-type Рєњ Set╦б Рё░Ріј­Юњ▒-ctx (cons Later РѕЁ)
pre-Рё░Ріј­Юњ▒ (injРѓЂ (c , V , VРђ▓)) = pre-­Юњ▒ c V VРђ▓
pre-Рё░Ріј­Юњ▒ (injРѓѓ (c , M , MРђ▓)) = pre-Рё░ c M MРђ▓

Рё░Ріј­Юњ▒ : Рё░Ріј­Юњ▒-type Рєњ Setрхњ
Рё░Ріј­Юњ▒ X = ╬╝рхњ pre-Рё░Ріј­Юњ▒ X

­Юњ▒РЪд_РЪД : (c : Prec) Рєњ Term Рєњ Term Рєњ Setрхњ
­Юњ▒РЪд c РЪД V VРђ▓ = Рё░Ріј­Юњ▒ (injРѓЂ (c , V , VРђ▓))

Рё░РЪд_РЪД : (c : Prec) Рєњ Term Рєњ Term Рєњ Setрхњ
Рё░РЪд c РЪД M MРђ▓ = Рё░Ріј­Юњ▒ (injРѓѓ (c , M , MРђ▓))

preserve-L : Prec Рєњ Term Рєњ Term Рєњ Setрхњ
preserve-L c M MРђ▓ = (Рѕђрхњ[ N ] ((M РђћРєњ N)рхњ Рєњрхњ Рќирхњ (Рё░РЪд c РЪД N MРђ▓)))

preserve-R : Prec Рєњ Term Рєњ Term Рєњ Setрхњ
preserve-R c M MРђ▓ = (Рѕђрхњ[ NРђ▓ ] ((MРђ▓ РђћРєњ NРђ▓)рхњ Рєњрхњ Рќирхњ (Рё░РЪд c РЪД M NРђ▓)))

Рё░-stmt : Рѕђ{c}{M MРђ▓}
  Рєњ Рё░РЪд c РЪД M MРђ▓ РЅАрхњ
         ((­Юњ▒РЪд c РЪД M MРђ▓)
      Ріјрхњ ((reducible M)рхњ ├Ќрхњ preserve-L c M MРђ▓)
      Ріјрхњ ((reducible MРђ▓)рхњ ├Ќрхњ preserve-R c M MРђ▓)
      Ріјрхњ (Blame MРђ▓)рхњ)
Рё░-stmt {c}{M}{MРђ▓} =
  let XРѓЂ = injРѓЂ (c , M , MРђ▓) in
  let XРѓѓ = injРѓѓ (c , M , MРђ▓) in
  Рё░РЪд c РЪД M MРђ▓                                                 РЕдРЪе РЅАрхњ-refl refl РЪЕ
  ╬╝рхњ pre-Рё░Ріј­Юњ▒ XРѓѓ                                      РЕдРЪе fixpointрхњ pre-Рё░Ріј­Юњ▒ XРѓѓ РЪЕ
  # (pre-Рё░Ріј­Юњ▒ XРѓѓ) (Рё░Ріј­Юњ▒ , ttрхќ)
                                  РЕдРЪе cong-Ріјрхњ ((РЅАрхњ-sym (fixpointрхњ pre-Рё░Ріј­Юњ▒ XРѓЂ)))
                                       (cong-Ріјрхњ (РЅАрхњ-refl refl) (РЅАрхњ-refl refl)) РЪЕ
         ­Юњ▒РЪд c РЪД M MРђ▓
      Ріјрхњ ((reducible M)рхњ ├Ќрхњ preserve-L c M MРђ▓)
      Ріјрхњ ((reducible MРђ▓)рхњ ├Ќрхњ preserve-R c M MРђ▓)
      Ріјрхњ (Blame MРђ▓)рхњ
  Рѕј

{- Relate Open Terms -}

­ЮЊќРЪд_РЪД : (╬Њ : List Prec) Рєњ Subst Рєњ Subst Рєњ List Setрхњ
­ЮЊќРЪд [] РЪД ¤Ѓ ¤ЃРђ▓ = []
­ЮЊќРЪд c Рѕи ╬Њ РЪД ¤Ѓ ¤ЃРђ▓ = (­Юњ▒РЪд c РЪД (¤Ѓ 0) (¤ЃРђ▓ 0))
                     Рѕи ­ЮЊќРЪд ╬Њ РЪД (╬╗ x Рєњ ¤Ѓ (suc x)) (╬╗ x Рєњ ¤ЃРђ▓ (suc x))

_Ріе_РіЉ_Рдѓ_ : List Prec Рєњ Term Рєњ Term Рєњ Prec Рєњ Set
╬Њ Ріе M РіЉ MРђ▓ Рдѓ c = Рѕђ (╬│ ╬│Рђ▓ : Subst) Рєњ ­ЮЊќРЪд ╬Њ РЪД ╬│ ╬│Рђ▓ Рібрхњ Рё░РЪд c РЪД (РЪф ╬│ РЪФ M) (РЪф ╬│Рђ▓ РЪФ MРђ▓)

{- Related values are syntactic values -}

­Юњ▒РЄњValue : Рѕђ {k} c M MРђ▓
   Рєњ # (­Юњ▒РЪд c РЪД M MРђ▓) (suc k)
     ------------------------
   Рєњ Value M ├Ќ Value MРђ▓
­Юњ▒РЄњValue {k} (.РўЁ , РўЁ , unkРіЉ) (V РЪе G !РЪЕ) (VРђ▓ РЪе H !РЪЕ) ­Юњ▒MMРђ▓
    with G РЅАрхЇ H
... | no neq = РіЦ-elim ­Юњ▒MMРђ▓
... | yes refl
    with ­Юњ▒MMРђ▓
... | v , vРђ▓ , _ = (v РїЕ G Рїф) , (vРђ▓ РїЕ G Рїф)
­Юњ▒РЄњValue {k} (.РўЁ , $Рѓю ╬╣Рђ▓ , unkРіЉ) (V РЪе $рхЇ ╬╣ !РЪЕ) ($ c) ­Юњ▒MMРђ▓
    with  ($рхЇ ╬╣) РЅАрхЇ ($рхЇ ╬╣Рђ▓)
... | no neq = РіЦ-elim ­Юњ▒MMРђ▓
... | yes refl
    with ­Юњ▒MMРђ▓
... | v , _ = (v РїЕ $рхЇ ╬╣Рђ▓ Рїф) , ($╠г c)
­Юњ▒РЄњValue {k} (.РўЁ , AРђ▓ РЄњ BРђ▓ , unkРіЉ) (V РЪе РўЁРЄњРўЁ !РЪЕ) VРђ▓ ­Юњ▒VVРђ▓
    with ­Юњ▒VVРђ▓
... | v , vРђ▓ , _ = (v РїЕ РўЁРЄњРўЁ Рїф) , vРђ▓
­Юњ▒РЄњValue {k} ($Рѓю ╬╣ , $Рѓю ╬╣ , baseРіЉ) ($ c) ($ cРђ▓) refl = ($╠г c) , ($╠г c)
­Юњ▒РЄњValue {k} ((A РЄњ B) , (AРђ▓ РЄњ BРђ▓) , funРіЉ AРіЉAРђ▓ BРіЉBРђ▓) (кЏ N) (кЏ NРђ▓) ­Юњ▒VVРђ▓ =
    (кЏ╠г N) , (кЏ╠г NРђ▓)

{- Related values are related expressions -}

­Юњ▒РЄњРё░ : Рѕђ{c : Prec}{­ЮњФ}{V VРђ▓}
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РЪд c РЪД V VРђ▓
     -----------------
   Рєњ ­ЮњФ Рібрхњ Рё░РЪд c РЪД V VРђ▓
­Юњ▒РЄњРё░ {c}{­ЮњФ}{V}{VРђ▓} Ріб­Юњ▒VVРђ▓ = {!!}
{-
  substрхњ (РЅАрхњ-sym Рё░-stmt) (prog ,рхњ pres)
  where
  prog = injРѓЂрхњ Ріб­Юњ▒VVРђ▓
  pres = (╬Џрхњ[ N ] РєњрхњI (constрхњE Zрхњ ╬╗ VРђћРєњN Рєњ
            Рібрхњ-sucP (Рібрхњ-weaken Ріб­Юњ▒VVРђ▓) ╬╗ ­Юњ▒VV Рєњ
              РіЦ-elim (value-irreducible (projРѓЂ (­Юњ▒РЄњValue c V VРђ▓ ­Юњ▒VV)) VРђћРєњN)))
         ,рхњ
         (╬Џрхњ[ NРђ▓ ] РєњрхњI (constрхњE Zрхњ ╬╗ VРђ▓РђћРєњNРђ▓ Рєњ
            Рібрхњ-sucP (Рібрхњ-weaken Ріб­Юњ▒VVРђ▓) ╬╗ ­Юњ▒VV Рєњ
              РіЦ-elim (value-irreducible (projРѓѓ (­Юњ▒РЄњValue c V VРђ▓ ­Юњ▒VV)) VРђ▓РђћРєњNРђ▓)))
-}

{- Рё░-bind (Monadic Bind Lemma) -}

­Юњ▒РєњРё░F : Prec Рєњ Prec Рєњ Frame Рєњ Term Рєњ Term Рєњ Setрхњ
­Юњ▒РєњРё░F c d F M MРђ▓ = Рѕђрхњ[ V ] Рѕђрхњ[ VРђ▓ ] (M РђћРєа V)рхњ Рєњрхњ (MРђ▓ РђћРєа VРђ▓)рхњ
                   Рєњрхњ ­Юњ▒РЪд d РЪД V VРђ▓ Рєњрхњ Рё░РЪд c РЪД (F РЪд V РЪД) (F РЪд VРђ▓ РЪД)

­Юњ▒РєњРё░F-expansion-L : Рѕђ{­ЮњФ}{c}{d}{F}{M}{MРђ▓}{N}
   Рєњ M РђћРєњ N
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РєњРё░F c d F M MРђ▓
     --------------------
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒РєњРё░F c d F N MРђ▓
­Юњ▒РєњРё░F-expansion-L {­ЮњФ}{c}{d}{F}{M}{MРђ▓}{N} MРєњN ­Юњ▒РєњРё░F[MMРђ▓] =
  ╬Џрхњ[ V ] ╬Џрхњ[ VРђ▓ ]
  let ­Юњ▒РєњРё░F[NMРђ▓] : ­Юњ▒РЪд d РЪД V VРђ▓ Рѕи (MРђ▓ РђћРєа VРђ▓)рхњ Рѕи (N РђћРєа V)рхњ Рѕи ­ЮњФ
               Рібрхњ Рё░РЪд c РЪД  (F РЪд V РЪД) (F РЪд VРђ▓ РЪД)
      ­Юњ▒РєњРё░F[NMРђ▓] = Рібрхњ-sucP (Sрхњ Zрхњ) ╬╗ MРђ▓РђћРєаVРђ▓ Рєњ
               Рібрхњ-sucP (Sрхњ (Sрхњ Zрхњ)) ╬╗ NРђћРєаV Рєњ
               let MРђћРєаV = constрхњI (M РђћРєњРЪе MРєњN РЪЕ NРђћРєаV) in
               let ­Юњ▒РєњРё░F[MMРђ▓]VVРђ▓ = Рібрхњ-weaken (Рібрхњ-weaken (Рібрхњ-weaken
                                    (instрхњ (instрхњ ­Юњ▒РєњРё░F[MMРђ▓] V) VРђ▓)))
               in appрхњ (appрхњ (appрхњ ­Юњ▒РєњРё░F[MMРђ▓]VVРђ▓ MРђћРєаV) (constрхњI MРђ▓РђћРєаVРђ▓)) Zрхњ
  in РєњрхњI (РєњрхњI (РєњрхњI ­Юњ▒РєњРё░F[NMРђ▓]))

Рё░-bind-M : Prec Рєњ Prec Рєњ Frame Рєњ Term Рєњ Term Рєњ Setрхњ
Рё░-bind-M c d F M MРђ▓ = Рё░РЪд d РЪД M MРђ▓ Рєњрхњ ­Юњ▒РєњРё░F c d F M MРђ▓
    Рєњрхњ Рё░РЪд c РЪД (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)

Рё░-bind-prop : Prec Рєњ Prec Рєњ Frame Рєњ Setрхњ
Рё░-bind-prop c d F = Рѕђрхњ[ M ] Рѕђрхњ[ MРђ▓ ] Рё░-bind-M c d F M MРђ▓

Рё░-bind-aux : Рѕђ{­ЮњФ}{c}{d}{F} Рєњ ­ЮњФ Рібрхњ Рё░-bind-prop c d F
Рё░-bind-aux {­ЮњФ}{c}{d}{F} = lobрхњ Goal
 where     
 Goal : Рќирхњ Рё░-bind-prop c d F Рѕи ­ЮњФ Рібрхњ Рё░-bind-prop c d F
 Goal = ╬Џрхњ[ M ] ╬Џрхњ[ MРђ▓ ] РєњрхњI (РєњрхњI GoalРђ▓)
  where
  GoalРђ▓ : Рѕђ{M}{MРђ▓}
     Рєњ (­Юњ▒РєњРё░F c d F M MРђ▓) Рѕи Рё░РЪд d РЪД M MРђ▓ Рѕи Рќирхњ Рё░-bind-prop c d F Рѕи ­ЮњФ
        Рібрхњ Рё░РЪд c РЪД (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)
  GoalРђ▓{M}{MРђ▓} =
     case4рхњ (substрхњ Рё░-stmt (Sрхњ Zрхњ)) Mval MredL MredR {!!}
   where
   ­ЮњФРђ▓ = (­Юњ▒РєњРё░F c d F M MРђ▓) Рѕи Рё░РЪд d РЪД M MРђ▓ Рѕи Рќирхњ Рё░-bind-prop c d F Рѕи ­ЮњФ

   Mval : ­Юњ▒РЪд d РЪД M MРђ▓ Рѕи ­ЮњФРђ▓ Рібрхњ Рё░РЪд c РЪД (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)
   Mval =
     let Cont = ╬╗ V Рєњ Рѕђрхњ[ VРђ▓ ] (M РђћРєа V)рхњ Рєњрхњ (MРђ▓ РђћРєа VРђ▓)рхњ
                   Рєњрхњ ­Юњ▒РЪд d РЪД V VРђ▓ Рєњрхњ Рё░РЪд c РЪД (F РЪд V РЪД) (F РЪд VРђ▓ РЪД) in
     let ContРђ▓ = ╬╗ VРђ▓ Рєњ (M РђћРєа M)рхњ Рєњрхњ (MРђ▓ РђћРєа VРђ▓)рхњ
                   Рєњрхњ ­Юњ▒РЪд d РЪД M VРђ▓ Рєњрхњ Рё░РЪд c РЪД (F РЪд M РЪД) (F РЪд VРђ▓ РЪД) in
     appрхњ (appрхњ (appрхњ (instрхњ{P = ContРђ▓} (instрхњ{P = Cont} (Sрхњ Zрхњ) M) MРђ▓)
                      (constрхњI (M END)))
                (constрхњI (MРђ▓ END)))
          Zрхњ 

   MredL : reducible M рхњ ├Ќрхњ preserve-L d M MРђ▓ Рѕи ­ЮњФРђ▓ Рібрхњ Рё░РЪд c РЪД(F РЪд M РЪД)(F РЪд MРђ▓ РЪД)
   MredL = substрхњ (РЅАрхњ-sym Рё░-stmt) (injРѓѓрхњ (injРѓЂрхњ {!!}))

   MredR : reducible MРђ▓ рхњ ├Ќрхњ preserve-R d M MРђ▓ Рѕи ­ЮњФРђ▓
             Рібрхњ Рё░РЪд c РЪД (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)
   MredR = substрхњ (РЅАрхњ-sym Рё░-stmt) (injРѓѓрхњ (injРѓѓрхњ (injРѓЂрхњ {!!})))

   Mblame : Blame MРђ▓ рхњ Рѕи ­ЮњФРђ▓ Рібрхњ Рё░РЪд c РЪД (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)
   Mblame = substрхњ (РЅАрхњ-sym Рё░-stmt) (injРѓѓрхњ (injРѓЂрхњ {!!}))


{-   
    substрхњ (РЅАрхњ-sym Рё░-stmt) (progressMred ,рхњ preservationMred)
    where
    progressMred : (reducible M)рхњ Ріјрхњ (reducible MРђ▓)рхњ Рѕи ­ЮњФРђ▓
                     Рібрхњ progress c (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)
    progressMred = case-Lрхњ progM progMРђ▓
     where
     progM : (reducible M)рхњ Рѕи ­ЮњФРђ▓ Рібрхњ progress c (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)
     progM =
         let redFM = constрхњE Zрхњ ╬╗ {(N , MРєњN) Рєњ constрхњI (_ , (╬Й F MРєњN))} in
         injРѓѓрхњ (injРѓЂрхњ (injРѓЂрхњ redFM))
     progMРђ▓ : (reducible MРђ▓)рхњ Рѕи ­ЮњФРђ▓ Рібрхњ progress c (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)
     progMРђ▓ =
         let redFMРђ▓ = constрхњE Zрхњ ╬╗ {(N , MРђ▓РєњN) Рєњ constрхњI (_ , (╬Й F MРђ▓РєњN))} in
         injРѓѓрхњ (injРѓЂрхњ (injРѓѓрхњ redFMРђ▓))

    preservationMred : (reducible M)рхњ Ріјрхњ (reducible MРђ▓)рхњ Рѕи ­ЮњФРђ▓
                          Рібрхњ preservation c (F РЪд M РЪД) (F РЪд MРђ▓ РЪД)
    preservationMred = {!!}
-}
