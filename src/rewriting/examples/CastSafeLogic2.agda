{-# OPTIONS --without-K --rewriting #-}
module rewriting.examples.CastSafeLogic2 where

open import Agda.Primitive using (lzero)
open import Data.List using (List; []; _Рѕи_; length)
open import Data.Nat
open import Data.Nat.Induction
open import Data.Bool using (true; false) renaming (Bool to ­Юћ╣)
open import Data.Nat.Properties
open import Data.Product using (_,_;_├Ќ_; projРѓЂ; projРѓѓ; ╬Б-syntax; РѕЃ-syntax)
open import Data.Unit using (Ріц; tt)
open import Data.Unit.Polymorphic renaming (Ріц to Ріцрхќ; tt to ttрхќ)
open import Data.Vec using (Vec) renaming ([] to []╠ї; _Рѕи_ to _Рѕи╠ї_)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Sum using (_Ріј_; injРѓЂ; injРѓѓ)
open import Induction using (RecStruct)
open import Induction.WellFounded as WF
open import Data.Product.Relation.Binary.Lex.Strict
  using (├Ќ-Lex; ├Ќ-wellFounded; ├Ќ-preorder)
open import Relation.Binary using (Rel)
open import Relation.Binary.PropositionalEquality as Eq
  using (_РЅА_; _РЅб_; refl; sym; cong; subst; trans)
open import Relation.Nullary using (┬г_; Dec; yes; no)
open import Sig
open import Var
open import rewriting.examples.Cast
open import rewriting.examples.StepIndexedLogic2
open import rewriting.examples.CastLogRelLogic2

{-# REWRITE sub-var #-}

compatibility-var : Рѕђ {╬Њ A x}
  Рєњ ╬Њ РѕІ x Рдѓ A
    -----------
  Рєњ ╬Њ Ріе ` x Рдѓ A
compatibility-var {╬Њ}{A}{x} РѕІx ╬│ =
     let Ріб­ЮЊЦ╬│x : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊЦРЪд A РЪД (╬│ x)
         Ріб­ЮЊЦ╬│x = lookup-­ЮЊќ ╬Њ ╬│ РѕІx in
     let Ріб­ЮЊћ╬│x : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд A РЪД (╬│ x)
         Ріб­ЮЊћ╬│x = ­ЮЊЦРЄњ­ЮЊћ{A}{­ЮЊќРЪд ╬Њ РЪД ╬│} Ріб­ЮЊЦ╬│x in
     Ріб­ЮЊћ╬│x

compatible-nat : Рѕђ{╬Њ}{n : РёЋ} Рєњ ╬Њ Ріе ($ n) Рдѓ ($Рѓю Рђ▓РёЋ)
compatible-nat {╬Њ}{n} ╬│ =
     let Ріб­ЮЊЦn : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊЦРЪд $Рѓю Рђ▓РёЋ РЪД ($ n)
         Ріб­ЮЊЦn = ╬╗ { zero x Рєњ tt ; (suc k) x Рєњ refl} in
     let Ріб­ЮЊћn : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд $Рѓю Рђ▓РёЋ РЪД ($ n)
         Ріб­ЮЊћn = ­ЮЊЦРЄњ­ЮЊћ{$Рѓю Рђ▓РёЋ}{­ЮЊќРЪд ╬Њ РЪД ╬│} Ріб­ЮЊЦn in
     Ріб­ЮЊћn

compatible-bool : Рѕђ{╬Њ}{b : ­Юћ╣} Рєњ ╬Њ Ріе ($ b) Рдѓ ($Рѓю Рђ▓­Юћ╣)
compatible-bool {╬Њ}{b} ╬│ =
     let Ріб­ЮЊЦb : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊЦРЪд $Рѓю Рђ▓­Юћ╣ РЪД ($ b)
         Ріб­ЮЊЦb = ╬╗ { zero x Рєњ tt ; (suc k) x Рєњ refl} in
     let Ріб­ЮЊћb : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд $Рѓю Рђ▓­Юћ╣ РЪД ($ b)
         Ріб­ЮЊћb = ­ЮЊЦРЄњ­ЮЊћ{$Рѓю Рђ▓­Юћ╣}{­ЮЊќРЪд ╬Њ РЪД ╬│} Ріб­ЮЊЦb in
     Ріб­ЮЊћb

compatible-app : Рѕђ{╬Њ}{A}{B}{L}{M}
    Рєњ ╬Њ Ріе L Рдѓ (A РЄњ B)
    Рєњ ╬Њ Ріе M Рдѓ A
      -------------------
    Рєњ ╬Њ Ріе L ┬и M Рдѓ B
compatible-app {╬Њ}{A}{B}{L}{M} РіеL РіеM ╬│ = Ріб­ЮЊћLM
  where
  Ріб­ЮЊћL : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд A РЄњ B РЪД (РЪф ╬│ РЪФ L)
  Ріб­ЮЊћL = РіеL ╬│

  Ріб­ЮЊћM : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд A РЪД (РЪф ╬│ РЪФ M)
  Ріб­ЮЊћM = РіеM ╬│

  ­ЮЊЦLРіб­ЮЊћLM : ­ЮЊЦРЪд A РЄњ B РЪД (РЪф ╬│ РЪФ L) Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд B РЪД (РЪф ╬│ РЪФ (L ┬и M))
  ­ЮЊЦLРіб­ЮЊћLM = {!!}

  rdLРєњrdLM : reducible (РЪф ╬│ РЪФ L) Рєњ reducible (РЪф ╬│ РЪФ (L ┬и M))
  rdLРєњrdLM (LРђ▓ , ╬│LРєњLРђ▓) = _ , (╬Й╬Й (РќА┬и (РЪф ╬│ РЪФ M)) refl refl ╬│LРєњLРђ▓)

  ­ЮЊЪРѓЂ = reducible (РЪф ╬│ РЪФ L) рхњ Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│

  РібРќи­ЮЊћN : Рѕђ N (rdL : reducible (РЪф ╬│ РЪФ L))
     Рєњ ((РЪф ╬│ РЪФ (L ┬и M)) РђћРєњ N)рхњ Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ Рќирхњ (­ЮЊћРЪд B РЪД N)
  РібРќи­ЮЊћN N rdL = SрхњРібрхњ (­ЮЊќРЪд ╬Њ РЪД ╬│){(РЪф ╬│ РЪФ (L ┬и M)) РђћРєњ N} {Рќирхњ (­ЮЊћРЪд B РЪД N)}
           {!!}
      where
      Goal : Рѕђ N (rdL : reducible (РЪф ╬│ РЪФ L)) (LMРєњN : РЪф ╬│ РЪФ (L ┬и M) РђћРєњ N)
             Рєњ ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ Рќирхњ (­ЮЊћРЪд B РЪД N)
      Goal N rdL LMРєњN
          with app-invL rdL LMРєњN
      ... | LРђ▓ , LРєњLРђ▓ , refl =
            let x : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ Рќирхњ (­ЮЊћРЪд B РЪД (LРђ▓ ┬и (РЪф ╬│ РЪФ M)))
                x = {!!} in
            x

  presLMРђ▓ : reducible (РЪф ╬│ РЪФ L) Рєњ ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ preservation B (РЪф ╬│ РЪФ (L ┬и M))
  presLMРђ▓ rdL = Рібрхњ-Рѕђ-intro{­ЮЊќРЪд ╬Њ РЪД ╬│}{Term}
                   {╬╗ N Рєњ (((РЪф ╬│ РЪФ (L ┬и M)) РђћРєњ N)рхњ Рєњрхњ Рќирхњ (­ЮЊћРЪд B РЪД N))}
                   ╬╗ N Рєњ Рібрхњ-Рєњ-intro {­ЮЊќРЪд ╬Њ РЪД ╬│}{((РЪф ╬│ РЪФ (L ┬и M)) РђћРєњ N)рхњ}
                             {Рќирхњ (­ЮЊћРЪд B РЪД N)} (РібРќи­ЮЊћN N rdL)
  {-
  preservation A M = (Рѕђрхњ[ N ] ((M РђћРєњ N)рхњ Рєњрхњ Рќирхњ (­ЮЊћРЪд A РЪД N)))
  -}
  
  presLM : ­ЮЊЪРѓЂ Рібрхњ preservation B (РЪф ╬│ РЪФ (L ┬и M))
  presLM = SрхњРібрхњ (­ЮЊќРЪд ╬Њ РЪД ╬│) {(reducible (РЪф ╬│ РЪФ L))}
                 {preservation B (РЪф ╬│ РЪФ (L ┬и M))} presLMРђ▓

  rdLРіб­ЮЊћLM : ­ЮЊЪРѓЂ Рібрхњ ­ЮЊћРЪд B РЪД (РЪф ╬│ РЪФ (L ┬и M))
  rdLРіб­ЮЊћLM =
      let rdL : ­ЮЊЪРѓЂ Рібрхњ (reducible (РЪф ╬│ РЪФ L))рхњ
          rdL = Рібрхњ-hyp {­ЮЊќРЪд ╬Њ РЪД ╬│}{(reducible (РЪф ╬│ РЪФ L))рхњ} in
      let rdLM : ­ЮЊЪРѓЂ Рібрхњ (reducible (РЪф ╬│ РЪФ (L ┬и M)))рхњ
          rdLM = SрхњРєњTрхњРЄњРібрхњ ­ЮЊЪРѓЂ rdL rdLРєњrdLM in
      ­ЮЊћ-intro ­ЮЊЪРѓЂ (Рібрхњ-injРѓѓ {­ЮЊЪРѓЂ}{­ЮЊЦРЪд B РЪД (РЪф ╬│ РЪФ (L ┬и M))}
                      {(reducible (РЪф ╬│ РЪФ (L ┬и M)))рхњ Ріјрхњ (Blame (РЪф ╬│ РЪФ (L ┬и M)))рхњ}
                      (Рібрхњ-injРѓЂ {­ЮЊЪРѓЂ}{(reducible (РЪф ╬│ РЪФ (L ┬и M)))рхњ}
                               {(Blame (РЪф ╬│ РЪФ (L ┬и M)))рхњ} rdLM))
                  presLM 

  blLРіб­ЮЊћLM : (Blame (РЪф ╬│ РЪФ L)) рхњ Рѕи ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд B РЪД (РЪф ╬│ РЪФ (L ┬и M))
  blLРіб­ЮЊћLM = {!!}

  Ріб­ЮЊћLM : ­ЮЊќРЪд ╬Њ РЪД ╬│ Рібрхњ ­ЮЊћРЪд B РЪД (РЪф ╬│ РЪФ (L ┬и M))
  Ріб­ЮЊћLM =
     let progL = ­ЮЊћ-progress (­ЮЊќРЪд ╬Њ РЪД ╬│) Ріб­ЮЊћL in
     Рібрхњ-case3 {­ЮЊќРЪд ╬Њ РЪД ╬│}{­ЮЊЦРЪд A РЄњ B РЪД (РЪф ╬│ РЪФ L)}{(reducible (РЪф ╬│ РЪФ L))рхњ}
              {(Blame (РЪф ╬│ РЪФ L))рхњ}{­ЮЊћРЪд B РЪД (РЪф ╬│ РЪФ (L ┬и M))}
              progL ­ЮЊЦLРіб­ЮЊћLM rdLРіб­ЮЊћLM blLРіб­ЮЊћLM

