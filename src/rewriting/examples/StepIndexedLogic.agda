{-# OPTIONS --without-K --rewriting #-}

{-
 Based on the development of Logical step-indexed logical relation
 by Philip Wadler (June 1, 2022)

 Also based on "An Indexed Model of Recursive Types"
 by Appel and McAllester.
-}
module rewriting.examples.StepIndexedLogic where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.List using (List; []; _‚à∑_)
open import Data.Nat
   using (‚Ñï; zero; suc; _‚â§_; _<_; _+_; _‚à∏_; z‚â§n; s‚â§s; _‚â§‚Ä≤_; ‚â§‚Ä≤-step)
open import Data.Nat.Properties
   using (‚â§-refl; ‚â§-antisym; ‚â§-trans; ‚â§-step; s‚â§s-injective; ‚â§‚áí‚â§‚Ä≤; ‚â§‚Ä≤‚áí‚â§; n‚â§1+n)
open import Data.Product
   using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt; ‚ä§)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; cong-app; subst)
open import Relation.Nullary using (¬¨_)
open import Function using (id; _‚àò_)

Set·µí : Set‚ÇÅ
Set·µí = ‚Ñï ‚Üí Set

‚ä•·µí : Set·µí
‚ä•·µí zero     =  ‚ä§
‚ä•·µí (suc n)  =  ‚ä•

‚ä§·µí : Set·µí
‚ä§·µí n  =  ‚ä§

infixr 7 _√ó·µí_
_√ó·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
(P √ó·µí Q) n  = ‚àÄ k ‚Üí k ‚â§ n ‚Üí (P k) √ó (Q k)

infixr 7 _‚äé·µí_
_‚äé·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
(P ‚äé·µí Q) n  = ‚àÄ k ‚Üí k ‚â§ n ‚Üí (P k) ‚äé (Q k)

infixr 6 _‚Üí·µí_
_‚Üí·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
(P ‚Üí·µí Q) n  = ‚àÄ k ‚Üí k ‚â§ n ‚Üí P k ‚Üí Q k

‚àÄ·µí : ‚àÄ{A} ‚Üí (A ‚Üí Set·µí) ‚Üí Set·µí
‚àÄ·µí {A} F n = ‚àÄ (v : A) ‚Üí F v n

infixr 8 _·µí
_·µí  : Set ‚Üí Set·µí
(p ·µí) zero = ‚ä§
(p ·µí) (suc n) = p

‚ñ∑·µí_ : Set·µí ‚Üí Set·µí
(‚ñ∑·µí P) n =  ‚àÄ k ‚Üí k < n ‚Üí P k

iter : ‚àÄ {‚Ñì} {A : Set ‚Ñì} ‚Üí ‚Ñï ‚Üí (A ‚Üí A) ‚Üí (A ‚Üí A)
iter zero    F  =  id
iter (suc n) F  =  F ‚àò iter n F

iter-subtract : ‚àÄ{‚Ñì}{A : Set ‚Ñì}{P : A}
  ‚Üí (F : A ‚Üí A)
  ‚Üí (j k : ‚Ñï)
  ‚Üí j ‚â§ k
  ‚Üí iter j F (iter (k ‚à∏ j) F P) ‚â° iter k F P
iter-subtract {A = A} {P} F .zero k z‚â§n = refl
iter-subtract {A = A} {P} F (suc j) (suc k) (s‚â§s j‚â§k)
  rewrite iter-subtract{A = A}{P} F j k j‚â§k = refl

Pred·µí : Set ‚Üí Set‚ÇÅ
Pred·µí A = A ‚Üí Set·µí

‚ä§·µñ : ‚àÄ{A} ‚Üí Pred·µí A
‚ä§·µñ x = ‚ä§·µí

‚ä•·µñ : ‚àÄ{A} ‚Üí Pred·µí A
‚ä•·µñ x = ‚ä•·µí

Œº·µñ : ‚àÄ {A} ‚Üí (Pred·µí A ‚Üí Pred·µí A) ‚Üí Pred·µí A
(Œº·µñ F) x k  = iter (suc k) F ‚ä§·µñ x k

-- Lob·µí : ‚àÄ{P : Set·µí}
--    ‚Üí (‚àÄ k ‚Üí (‚ñ∑·µí P) k ‚Üí P k)
--      ----------------------
--    ‚Üí ‚àÄ k ‚Üí P k
-- Lob·µí {P} ‚ñ∑P‚ÜíP zero = ‚ñ∑P‚ÜíP zero tt
-- Lob·µí {P} ‚ñ∑P‚ÜíP (suc k) = ‚ñ∑P‚ÜíP (suc k) (Lob·µí ‚ñ∑P‚ÜíP k)

{------------------- Eventually true at 0 --------------------}

ee : Set·µí ‚Üí Set
ee P  =  P zero

ee-‚ä• : ee ‚ä•·µí
ee-‚ä• = tt

ee-‚ä§ : ee ‚ä§·µí
ee-‚ä§ = tt

ee-√ó : ‚àÄ {P Q} ‚Üí ee P ‚Üí ee Q ‚Üí ee (P √ó·µí Q)
ee-√ó P0 Q0 .zero z‚â§n = P0 , Q0

ee-‚äé : ‚àÄ {P Q} ‚Üí ee P ‚Üí ee Q ‚Üí ee (P ‚äé·µí Q)
ee-‚äé P0 Q0 .zero z‚â§n = inj‚ÇÅ P0

ee-‚Üí : ‚àÄ {P Q} ‚Üí ee Q ‚Üí ee (P ‚Üí·µí Q)
ee-‚Üí eeQ .zero z‚â§n Pz = eeQ

ee-‚àÄ : ‚àÄ{A F}
   ‚Üí (‚àÄ v ‚Üí ee (F v))
   ‚Üí ee (‚àÄ·µí {A} F)
ee-‚àÄ {F} eeF v = eeF v

ee-P·µí : (P : Set)
   ‚Üí ee (P ·µí)
ee-P·µí P = tt

ee·µñ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Set
ee·µñ P = ‚àÄ x ‚Üí P x 0

{- the following lemma is currently unused -}
ee-iter : ‚àÄ{A}
    (i : ‚Ñï)
  ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
  ‚Üí (‚àÄ p ‚Üí ee·µñ p ‚Üí ee·µñ (F p)) 
  ‚Üí ee·µñ (iter i F ‚ä§·µñ)
ee-iter zero F eeF x = tt
ee-iter (suc i) F eeF =
  eeF (iter i F (Œª x x‚ÇÅ ‚Üí ‚ä§)) (ee-iter i F eeF)

ee-Œº : ‚àÄ{A}{F : Pred·µí A ‚Üí Pred·µí A}
   ‚Üí (‚àÄ p ‚Üí ee·µñ p ‚Üí ee·µñ (F p)) 
   ‚Üí ee·µñ (Œº·µñ F)
ee-Œº {A}{F} eeF x = eeF (Œª _ _ ‚Üí ‚ä§) (Œª x ‚Üí tt) x  

{------------------- Downward Closed --------------------}

dc : Set·µí ‚Üí Set
dc P  =  ‚àÄ n ‚Üí P n ‚Üí ‚àÄ k ‚Üí k ‚â§ n ‚Üí P k

dc-‚ä• : dc ‚ä•·µí
dc-‚ä• zero tt k z‚â§n  =   tt
dc-‚ä• (suc n) ()

dc-‚ä§ : dc ‚ä§·µí
dc-‚ä§  =  Œª n ‚ä§·µín k k‚â§n ‚Üí tt

dc-√ó : ‚àÄ {P Q} ‚Üí dc P ‚Üí dc Q ‚Üí dc (P √ó·µí Q)
dc-√ó dcP dcQ n P√óQ k x‚ÇÅ j x‚ÇÇ = P√óQ j (‚â§-trans x‚ÇÇ x‚ÇÅ) 

dc-‚äé : ‚àÄ {P Q} ‚Üí dc P ‚Üí dc Q ‚Üí dc (P ‚äé·µí Q)
dc-‚äé dcP dcQ n P‚äéQ k x j y = P‚äéQ j (‚â§-trans y x)

dc-‚Üí·µí : ‚àÄ {P Q} ‚Üí dc (P ‚Üí·µí Q)
dc-‚Üí·µí n [P‚Üí·µíQ]n k k‚â§n i i‚â§k Pi = [P‚Üí·µíQ]n i (‚â§-trans i‚â§k k‚â§n) Pi

dc-‚àÄ : ‚àÄ{A F}
  ‚Üí (‚àÄ v ‚Üí dc (F v))
  ‚Üí dc (‚àÄ·µí {A} F)
dc-‚àÄ {A}{F} dcF n ‚àÄFn k k‚â§n v = dcF v n (‚àÄFn v) k k‚â§n

dc-P·µí : (P : Set)
   ‚Üí dc (P ·µí)
dc-P·µí P n Pn zero k‚â§n = tt
dc-P·µí P (suc n) Pn (suc k) (s‚â§s k‚â§n) = Pn

dc-‚ñ∑ : ‚àÄ{P}
   ‚Üí dc P
   ‚Üí dc (‚ñ∑·µí P)
dc-‚ñ∑ dcP n ‚ñ∑Pn k k‚â§n j j<k = ‚ñ∑Pn j (‚â§-trans j<k k‚â§n)

_‚áî_ : Set ‚Üí Set ‚Üí Set
P ‚áî Q = (P ‚Üí Q) √ó (Q ‚Üí P)

‚áî-trans : ‚àÄ{P Q R : Set}
  ‚Üí P ‚áî Q
  ‚Üí Q ‚áî R
    ------
  ‚Üí P ‚áî R
‚áî-trans PQ QR =
    (Œª z ‚Üí proj‚ÇÅ QR (proj‚ÇÅ PQ z)) , (Œª z ‚Üí proj‚ÇÇ PQ (proj‚ÇÇ QR z))  

infixr 2 _‚áî‚ü®_‚ü©_
infix  3 _QED
  
_‚áî‚ü®_‚ü©_ : 
    (P : Set)
  ‚Üí ‚àÄ{Q} ‚Üí P ‚áî Q
  ‚Üí ‚àÄ{R} ‚Üí Q ‚áî R
    -------------
  ‚Üí P ‚áî R
P ‚áî‚ü® PQ ‚ü© QR = ‚áî-trans PQ QR

_QED :
    (P : Set)
    ---------
  ‚Üí P ‚áî P
P QED = (Œª x ‚Üí x) , (Œª x ‚Üí x)

√ó-cong-‚áî : ‚àÄ{S S‚Ä≤ T T‚Ä≤}
   ‚Üí S ‚áî S‚Ä≤
   ‚Üí T ‚áî T‚Ä≤
     -------------------
   ‚Üí (S √ó T) ‚áî (S‚Ä≤ √ó T‚Ä≤)
√ó-cong-‚áî SS‚Ä≤ TT‚Ä≤ = (Œª x ‚Üí (proj‚ÇÅ SS‚Ä≤ (proj‚ÇÅ x)) , (proj‚ÇÅ TT‚Ä≤ (proj‚ÇÇ x)))
                  , (Œª x ‚Üí (proj‚ÇÇ SS‚Ä≤ (proj‚ÇÅ x)) , (proj‚ÇÇ TT‚Ä≤ (proj‚ÇÇ x)))

{- The following stuff about monotonic is obsolete -}

monotonic : ‚àÄ{A} (F : Pred·µí A ‚Üí Pred·µí A) ‚Üí Set‚ÇÅ
monotonic F = ‚àÄ {P}{Q} ‚Üí (‚àÄ x i ‚Üí (P x) i ‚Üí (Q x) i)
                       ‚Üí (‚àÄ x i ‚Üí (F P x) i ‚Üí (F Q x) i)

dc·µñ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Set
dc·µñ P = ‚àÄ n x ‚Üí P x n ‚Üí ‚àÄ k ‚Üí k ‚â§ n ‚Üí P x k

dc-iter-aux : ‚àÄ(i : ‚Ñï){A}
   ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
   ‚Üí (‚àÄ p ‚Üí dc·µñ p ‚Üí dc·µñ (F p))
   ‚Üí dc·µñ (iter i F ‚ä§·µñ)
dc-iter-aux zero F dcF = Œª n x _ k _ ‚Üí tt
dc-iter-aux (suc i) F dcF =
  let IH = dc-iter-aux i F dcF in
  dcF (iter i F ‚ä§·µñ) IH

dc-iter : ‚àÄ(i : ‚Ñï){A}{F : Pred·µí A ‚Üí Pred·µí A}{x}
   ‚Üí monotonic F
   ‚Üí dc (Œª k ‚Üí iter k F ‚ä§·µñ x i)
dc-iter i {A}{F}{x} mf k Fki j j‚â§k = lemma‚Ä≤ i j k mf (‚â§‚áí‚â§‚Ä≤ j‚â§k) Fki
   where
   lemma‚Ä≤ : ‚àÄ(i j k : ‚Ñï){A}{F : Pred·µí A ‚Üí Pred·µí A}{x}
       ‚Üí monotonic F
       ‚Üí j ‚â§‚Ä≤ k ‚Üí iter k F ‚ä§·µñ x i ‚Üí iter j F ‚ä§·µñ x i
   lemma‚Ä≤ i j .j mF _‚â§‚Ä≤_.‚â§‚Ä≤-refl iter-k = iter-k
   lemma‚Ä≤ i zero (suc k) mF (‚â§‚Ä≤-step j‚â§k) iter-k = tt
   lemma‚Ä≤ i (suc j) (suc k) {A}{F}{x} mF (‚â§‚Ä≤-step j‚â§k) iter-k =
        mF IH x i iter-k
        where
        IH : (x‚ÇÇ : A) (i‚ÇÇ : ‚Ñï) ‚Üí iter k F ‚ä§·µñ x‚ÇÇ i‚ÇÇ ‚Üí iter j F ‚ä§·µñ x‚ÇÇ i‚ÇÇ
        IH x‚Ä≤ i‚Ä≤ iterki‚Ä≤ = lemma‚Ä≤ i‚Ä≤ j k mF
                              (‚â§‚áí‚â§‚Ä≤ (‚â§-trans (n‚â§1+n j) (‚â§‚Ä≤‚áí‚â§ j‚â§k))) iterki‚Ä≤

{-
  It seems that monotonic is too strong a requirement.
  Having trouble with some contravariance in trying to
  prove that pre-ùì• is monotonic.
-}

-- dc-Œº : ‚àÄ{A}{F : Pred·µí A ‚Üí Pred·µí A}
--    ‚Üí monotonic F
--    ‚Üí (‚àÄ p ‚Üí dc·µñ p ‚Üí dc·µñ (F p))
--    ‚Üí dc·µñ (Œº·µñ F) 
-- dc-Œº {A}{F} mF dcF n x ŒºFxn k k‚â§n = {!!}
  -- let iternk = dc-iter-aux n F dcF n x ŒºFxn k k‚â§n in
  -- dc-iter k mF n iternk k k‚â§n

‚Üì·µí : ‚Ñï ‚Üí Set·µí ‚Üí Set·µí
‚Üì·µí k S j = j < k  √ó  S j

_‚â°·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set
S ‚â°·µí T = ‚àÄ i ‚Üí S i ‚áî T i

‚â°·µí-refl : ‚àÄ{S T : Set·µí}
  ‚Üí S ‚â° T
  ‚Üí S ‚â°·µí T
‚â°·µí-refl refl i = (Œª x ‚Üí x) , (Œª x ‚Üí x)

‚â°·µí-sym : ‚àÄ{S T : Set·µí}
  ‚Üí S ‚â°·µí T
  ‚Üí T ‚â°·µí S
‚â°·µí-sym ST i = (proj‚ÇÇ (ST i)) , (proj‚ÇÅ (ST i))

‚â°·µí-trans : ‚àÄ{S T R : Set·µí}
  ‚Üí S ‚â°·µí T
  ‚Üí T ‚â°·µí R
  ‚Üí S ‚â°·µí R
‚â°·µí-trans ST TR i = (Œª z ‚Üí proj‚ÇÅ (TR i) (proj‚ÇÅ (ST i) z))
                 , (Œª z ‚Üí proj‚ÇÇ (ST i) (proj‚ÇÇ (TR i) z))

‚Üì·µñ : ‚Ñï ‚Üí ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Pred·µí A
‚Üì·µñ k P x = ‚Üì·µí k (P x)

fst·µñ : ‚àÄ{A}{B} (P : Pred·µí A) ‚Üí Pred·µí (A √ó B)
fst·µñ P (a , b) = P a

snd·µñ : ‚àÄ{A}{B} (P : Pred·µí B) ‚Üí Pred·µí (A √ó B)
snd·µñ P (a , b) = P b

infixr 7 _√ó·µñ_
_√ó·µñ_ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Pred·µí A ‚Üí Pred·µí A
(P √ó·µñ Q) v  =  (P v) √ó·µí (Q v)

infixr 7 _‚äé·µñ_
_‚äé·µñ_ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Pred·µí A ‚Üí Pred·µí A
(P ‚äé·µñ Q) v  =  (P v) ‚äé·µí (Q v)

infixr 6 _‚Üí·µñ_
_‚Üí·µñ_ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Pred·µí A ‚Üí Pred·µí A
(P ‚Üí·µñ Q) v = P v ‚Üí·µí Q v

‚ñ∑·µñ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Pred·µí A
‚ñ∑·µñ P v = ‚ñ∑·µí (P v)

‚àÄ·µñ : ‚àÄ{A : Set}{B} ‚Üí (A ‚Üí Pred·µí B) ‚Üí Pred·µí B
‚àÄ·µñ {A} F x = ‚àÄ·µí(Œª v ‚Üí F v x)

infix 2 _‚â°·µñ_
_‚â°·µñ_ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Pred·µí A ‚Üí Set
P ‚â°·µñ Q = ‚àÄ x ‚Üí P x ‚â°·µí Q x

‚â°·µñ-refl : ‚àÄ{A}{P Q : Pred·µí A}
  ‚Üí P ‚â° Q
  ‚Üí P ‚â°·µñ Q
‚â°·µñ-refl refl x = (‚â°·µí-refl refl)

‚â°·µñ-sym : ‚àÄ{A}{P Q : Pred·µí A}
  ‚Üí P ‚â°·µñ Q
  ‚Üí Q ‚â°·µñ P
‚â°·µñ-sym PQ x = (‚â°·µí-sym (PQ x))
  
‚â°·µñ-trans : ‚àÄ{A}{P Q R : Pred·µí A}
  ‚Üí P ‚â°·µñ Q
  ‚Üí Q ‚â°·µñ R
  ‚Üí P ‚â°·µñ R
‚â°·µñ-trans{A}{P}{Q}{R} PQ QP x = ‚â°·µí-trans{T = Q x} (PQ x) (QP x)

infixr 2 _‚â°·µñ‚ü®_‚ü©_
infix  3 _QED·µñ
  
_‚â°·µñ‚ü®_‚ü©_ : ‚àÄ{A}
  ‚Üí (P : Pred·µí A)
  ‚Üí ‚àÄ{Q} ‚Üí P ‚â°·µñ Q
  ‚Üí ‚àÄ{R} ‚Üí Q ‚â°·µñ R
  ‚Üí P ‚â°·µñ R
P ‚â°·µñ‚ü® P‚â°Q ‚ü© Q‚â°R = ‚â°·µñ-trans P‚â°Q Q‚â°R

_QED·µñ : ‚àÄ{A}
  ‚Üí (P : Pred·µí A)
  ‚Üí P ‚â°·µñ P
P QED·µñ = ‚â°·µñ-refl refl

extensional·µñ : ‚àÄ{A}{B} (F : Pred·µí A ‚Üí Pred·µí B) ‚Üí Set‚ÇÅ
extensional·µñ F = ‚àÄ{P}{Q} ‚Üí P ‚â°·µñ Q ‚Üí F P ‚â°·µñ F Q

ext-‚Üì : ‚àÄ{A}
    (k : ‚Ñï)
  ‚Üí extensional·µñ{A}{A} (‚Üì·µñ k)
ext-‚Üì k PQ x i = (Œª { (fst , snd) ‚Üí fst , proj‚ÇÅ (PQ x i) snd})
                , Œª { (fst , snd) ‚Üí fst , proj‚ÇÇ (PQ x i) snd}

{-

Continuous means that you only need k steps of the input to get k
steps of the output.

(This is called nonexpansive in Appel and McAllester.)

-}
continuous : ‚àÄ{A}{B} ‚Üí (Pred·µí A ‚Üí Pred·µí B) ‚Üí Set‚ÇÅ
continuous F = ‚àÄ P k ‚Üí (‚Üì·µñ k (F P)) ‚â°·µñ (‚Üì·µñ k (F (‚Üì·µñ k P)))

wellfounded : ‚àÄ{A}{B} ‚Üí (Pred·µí A ‚Üí Pred·µí B) ‚Üí Set‚ÇÅ
wellfounded F = ‚àÄ P k ‚Üí (‚Üì·µñ (suc k) (F P)) ‚â°·µñ (‚Üì·µñ (suc k) (F (‚Üì·µñ k P)))

down-eq : ‚àÄ{A}{P : Pred·µí A}{x}
   ‚Üí (i : ‚Ñï)
   ‚Üí (‚Üì·µñ (suc i) P x i) ‚áî (P x i)
down-eq {A}{P}{x} zero = (Œª x‚ÇÅ ‚Üí proj‚ÇÇ x‚ÇÅ) , (Œª x‚ÇÅ ‚Üí s‚â§s z‚â§n , x‚ÇÅ)
down-eq {A}{P}{x} (suc i) = (Œª x‚ÇÅ ‚Üí proj‚ÇÇ x‚ÇÅ) , (Œª x‚ÇÅ ‚Üí s‚â§s (s‚â§s ‚â§-refl) , x‚ÇÅ)

equiv-down : ‚àÄ{A}{P Q : Pred·µí A}
   ‚Üí (‚àÄ k ‚Üí ‚Üì·µñ k P ‚â°·µñ ‚Üì·µñ k Q)
   ‚Üí P ‚â°·µñ Q
equiv-down{A}{P}{Q} dPQ x i =
    (Œª Pxi ‚Üí let dP‚ÜídQ = proj‚ÇÅ (dPQ (suc i) x i) in
             let dQ = dP‚ÜídQ (proj‚ÇÇ (down-eq{A}{P} i) Pxi) in
             let Qxi = proj‚ÇÅ (down-eq{A}{Q} i) dQ in
             Qxi)
   , (Œª Qxi ‚Üí let dQ‚ÜídP = proj‚ÇÇ (dPQ (suc i) x i) in
             let dP = dQ‚ÜídP (proj‚ÇÇ (down-eq{A}{Q} i) Qxi) in
             let Pxi = proj‚ÇÅ (down-eq{A}{P} i) dP in
             Pxi)

down-equiv : ‚àÄ{A}{P Q : Pred·µí A}
  ‚Üí P ‚â°·µñ Q
  ‚Üí (‚àÄ k ‚Üí ‚Üì·µñ k P ‚â°·µñ ‚Üì·µñ k Q)
down-equiv P‚â°Q k x i = (Œª { (fst , snd) ‚Üí fst , proj‚ÇÅ (P‚â°Q x i) snd})
    , Œª { (fst , snd) ‚Üí fst , proj‚ÇÇ (P‚â°Q x i) snd}

lemma15a : ‚àÄ{A}{P Q : Pred·µí A}{j}
  ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
  ‚Üí wellfounded F
  ‚Üí extensional·µñ F
  ‚Üí ‚Üì·µñ j (iter j F P) ‚â°·µñ ‚Üì·µñ j (iter j F Q)
lemma15a {A} {P} {Q} {zero} F wfF extF x i = (Œª { ()}) , Œª { ()}
lemma15a {A} {P} {Q} {suc j} F wfF extF =
    ‚Üì·µñ (suc j) (F (iter j F P))
  ‚â°·µñ‚ü® wfF (iter j F P) j  ‚ü© 
    ‚Üì·µñ (suc j) (F (‚Üì·µñ j (iter j F P)))
  ‚â°·µñ‚ü® ext-‚Üì {A} (suc j) (extF (lemma15a{A}{P}{Q} {j = j} F wfF extF)) ‚ü©
    ‚Üì·µñ (suc j) (F (‚Üì·µñ j (iter j F Q)))
  ‚â°·µñ‚ü® ‚â°·µñ-sym (wfF (iter j F Q) j) ‚ü©
    ‚Üì·µñ (suc j) (F (iter j F Q))
  QED·µñ

lemma15b : ‚àÄ{A}{P : Pred·µí A}{j k}
  ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
  ‚Üí wellfounded F
  ‚Üí extensional·µñ F
  ‚Üí j ‚â§ k
  ‚Üí ‚Üì·µñ j (iter j F P) ‚â°·µñ ‚Üì·µñ j (iter k F P)
lemma15b{A}{P}{j}{k} F wfF extF j‚â§k =
    let eq = lemma15a {A}{P}{iter (k ‚à∏ j) F P}{j} F wfF extF in
    ‚â°·µñ-trans eq (ext-‚Üì j (‚â°·µñ-refl Goal))
    where
    Goal : (Œª z z‚ÇÅ ‚Üí iter j F (iter (k ‚à∏ j) F P) z z‚ÇÅ)
           ‚â° (Œª z z‚ÇÅ ‚Üí iter k F P z z‚ÇÅ)
    Goal rewrite iter-subtract{A = Pred·µí A}{P} F j k j‚â§k = refl

subst·µñ : ‚àÄ{A}{P Q : Pred·µí A}{x}
  ‚Üí P ‚â°·µñ Q
  ‚Üí (i : ‚Ñï)
  ‚Üí P x i
  ‚Üí Q x i
subst·µñ {x = x} PQ i P = proj‚ÇÅ (PQ x i) P

dc-Œº : ‚àÄ{A}{F : Pred·µí A ‚Üí Pred·µí A}
   ‚Üí wellfounded F
   ‚Üí extensional·µñ F
   ‚Üí (‚àÄ p ‚Üí dc·µñ p ‚Üí dc·µñ (F p))
   ‚Üí dc·µñ (Œº·µñ F) 
dc-Œº {A}{F} wfF extF dcF k v ŒºFvk j j‚â§k = T
   where
   X : iter (suc k) F ‚ä§·µñ v k
   X = ŒºFvk
   Y : iter (suc k) F ‚ä§·µñ v j
   Y = dc-iter-aux (suc k) F dcF k v X j j‚â§k
   Z : ‚Üì·µñ (suc j) (iter (suc k) F ‚ä§·µñ) v j
   Z = ‚â§-refl , Y
   W : ‚Üì·µñ (suc j) (iter (suc j) F ‚ä§·µñ) v j
   W = let eq = lemma15b{A}{‚ä§·µñ}{suc j}{suc k} F wfF extF (s‚â§s j‚â§k)
       in subst·µñ (‚â°·µñ-sym eq) j Z
   T : (iter (suc j) F ‚ä§·µñ) v j
   T = proj‚ÇÇ W

{- ‚Üì·µñ is idempotent -}
lemma17 : ‚àÄ{A}{P : Pred·µí A}
   ‚Üí (k : ‚Ñï)
   ‚Üí ‚Üì·µñ k (‚Üì·µñ (suc k) P) ‚â°·µñ ‚Üì·µñ k P
lemma17{A}{P} k x i =
    (Œª { (fst , snd) ‚Üí fst , proj‚ÇÇ snd})
    , Œª { (fst , snd) ‚Üí fst , ((‚â§-trans fst (n‚â§1+n k)) , snd)}

lemma18a : ‚àÄ{A}
   ‚Üí (k : ‚Ñï)
   ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
   ‚Üí wellfounded F
   ‚Üí extensional·µñ F
   ‚Üí ‚Üì·µñ k (Œº·µñ F) ‚â°·µñ ‚Üì·µñ k (iter k F ‚ä§·µñ)
lemma18a zero F wfF extF x i = (Œª { (() , b)}) , (Œª { (() , b)})
lemma18a (suc k‚Ä≤) F wfF extF v j =
      let k = suc k‚Ä≤ in
      ‚Üì·µñ k (Œº·µñ F) v j                                ‚áî‚ü® EQ1 ‚ü© 
      (j < k  √ó  Œº·µñ F v j)                           ‚áî‚ü® EQ2 ‚ü© 
      (j < k  √ó  iter (suc j) F ‚ä§·µñ v j)              ‚áî‚ü® EQ3 ‚ü© 
      (j < k  √ó  ‚Üì·µñ (suc j) (iter (suc j) F ‚ä§·µñ) v j) ‚áî‚ü® EQ4 ‚ü©
      (j < k  √ó  ‚Üì·µñ (suc j) (iter k F ‚ä§·µñ) v j)       ‚áî‚ü® EQ5 ‚ü©
      (j < k  √ó  iter k F ‚ä§·µñ v j)                    ‚áî‚ü® EQ6 ‚ü© 
      ‚Üì·µñ k (iter k F ‚ä§·µñ) v j
    QED
    where
      EQ1 = (Œª {(a , b) ‚Üí a , b}) , (Œª {(a , b) ‚Üí a , b})
      EQ2 = (Œª {(a , b) ‚Üí a , b}) , (Œª {(a , b) ‚Üí a , b})
      EQ3 = (Œª {(a , b) ‚Üí a , ‚â§-refl , b})
          , (Œª {(s‚â§s a , (b , c)) ‚Üí s‚â§s a , c})
      EQ4 = (Œª{(a , b) ‚Üí a ,
              proj‚ÇÅ (lemma15b {j = suc j}{k = suc k‚Ä≤} F wfF extF a v j) b})
          , (Œª{(a , b) ‚Üí a ,
              proj‚ÇÇ (lemma15b {j = suc j}{k = suc k‚Ä≤} F wfF extF a v j) b})
      EQ5 = (Œª {(a , b) ‚Üí a , (proj‚ÇÇ b)}) , Œª {(a , b) ‚Üí a , (‚â§-refl , b)}
      EQ6 = (Œª {(a , b) ‚Üí a , b}) , Œª z ‚Üí z

lemma18b : ‚àÄ{A}
   ‚Üí (k : ‚Ñï)
   ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
   ‚Üí wellfounded F
   ‚Üí extensional·µñ F
   ‚Üí ‚Üì·µñ (suc k) (F (Œº·µñ F)) ‚â°·µñ ‚Üì·µñ (suc k) (iter (suc k) F ‚ä§·µñ)
lemma18b {A} k F wfF extF =
      ‚Üì·µñ (suc k) (F (Œº·µñ F))                ‚â°·µñ‚ü® wfF _ k ‚ü©
      ‚Üì·µñ (suc k) (F (‚Üì·µñ k (Œº·µñ F)))         ‚â°·µñ‚ü® ext-‚Üì (suc k)
                                               (extF (lemma18a k F wfF extF)) ‚ü©
      ‚Üì·µñ (suc k) (F (‚Üì·µñ k (iter k F ‚ä§·µñ)))  ‚â°·µñ‚ü® ‚â°·µñ-sym (wfF _ k) ‚ü©
      ‚Üì·µñ (suc k) (F (iter k F ‚ä§·µñ))         ‚â°·µñ‚ü® ‚â°·µñ-refl refl ‚ü©
      ‚Üì·µñ (suc k) (iter (suc k) F ‚ä§·µñ)
    QED·µñ

lemma19 : ‚àÄ{A}
   ‚Üí (k : ‚Ñï)
   ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
   ‚Üí wellfounded F
   ‚Üí extensional·µñ F
   ‚Üí ‚Üì·µñ k (Œº·µñ F) ‚â°·µñ ‚Üì·µñ k (F (Œº·µñ F))
lemma19 {A} k F wfF extF =
      ‚Üì·µñ k (Œº·µñ F)                    ‚â°·µñ‚ü® lemma18a k F wfF extF ‚ü©
      ‚Üì·µñ k (iter k F ‚ä§·µñ)             ‚â°·µñ‚ü® lemma15b{j = k}{suc k} F wfF extF
                                              (n‚â§1+n k) ‚ü©
      ‚Üì·µñ k (iter (suc k) F ‚ä§·µñ)              ‚â°·µñ‚ü® ‚â°·µñ-sym (lemma17 {P = iter (suc k) F ‚ä§·µñ} k) ‚ü©
      ‚Üì·µñ k (‚Üì·µñ (suc k) (iter (suc k) F ‚ä§·µñ)) ‚â°·µñ‚ü® ext-‚Üì k (‚â°·µñ-sym (lemma18b k F wfF extF)) ‚ü©
      ‚Üì·µñ k (‚Üì·µñ (suc k) (F (Œº·µñ F)))          ‚â°·µñ‚ü® lemma17 k ‚ü©
      ‚Üì·µñ k (F (Œº·µñ F))
    QED·µñ

theorem20 : ‚àÄ{A}
   ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
   ‚Üí wellfounded F
   ‚Üí extensional·µñ F
   ‚Üí Œº·µñ F ‚â°·µñ F (Œº·µñ F)
theorem20 F wfF extF = equiv-down (Œª k ‚Üí lemma19 k F wfF extF)

continuous-id : ‚àÄ{A}
   ‚Üí continuous{A} (Œª P ‚Üí P)
continuous-id{A} Q k x i =
    (Œª { (fst , snd) ‚Üí fst , fst , snd})
    , (Œª { (fst , snd) ‚Üí fst , proj‚ÇÇ snd})

continuous-fst : ‚àÄ{A}{B}
  ‚Üí continuous{A}{A √ó B} fst·µñ
continuous-fst{A}{B} P k (a , b) i = (Œª x‚ÇÅ ‚Üí proj‚ÇÅ x‚ÇÅ , x‚ÇÅ) , (Œª x ‚Üí proj‚ÇÇ x)

continuous-snd : ‚àÄ{A}{B}
  ‚Üí continuous{B}{A √ó B} snd·µñ
continuous-snd{A}{B} P k (a , b) i = (Œª x ‚Üí (proj‚ÇÅ x) , x) , (Œª x ‚Üí proj‚ÇÇ x)

continuous-const : ‚àÄ{A}{P : Pred·µí A}
   ‚Üí continuous{A} (Œª Q ‚Üí P)
continuous-const {A}{P} Q k = ‚â°·µñ-refl refl

wellfounded‚áícontinuous : ‚àÄ{A}{B}
   ‚Üí (F : Pred·µí A ‚Üí Pred·µí B)
   ‚Üí wellfounded F
   ‚Üí extensional·µñ F
   ‚Üí continuous F
wellfounded‚áícontinuous F wfF extF P zero v i = (Œª {()}) , Œª { ()}
wellfounded‚áícontinuous F wfF extF P (suc k) =
    ‚Üì·µñ (suc k) (F P)                       ‚â°·µñ‚ü® wfF _ k ‚ü©
    ‚Üì·µñ (suc k) (F (‚Üì·µñ k P))                ‚â°·µñ‚ü® ext-‚Üì (suc k) (extF (‚â°·µñ-sym
                                                                 (lemma17 k))) ‚ü©
    ‚Üì·µñ (suc k) (F (‚Üì·µñ k (‚Üì·µñ (suc k) P)))   ‚â°·µñ‚ü® ‚â°·µñ-sym (wfF _ k) ‚ü©
    ‚Üì·µñ (suc k) (F (‚Üì·µñ (suc k) P))
    QED·µñ

cong-‚Üí·µñ : ‚àÄ{A}{P P‚Ä≤ Q Q‚Ä≤ : Pred·µí A}
   ‚Üí P ‚â°·µñ P‚Ä≤
   ‚Üí Q ‚â°·µñ Q‚Ä≤
   ‚Üí P ‚Üí·µñ Q  ‚â°·µñ  P‚Ä≤ ‚Üí·µñ Q‚Ä≤
cong-‚Üí·µñ PP‚Ä≤ QQ‚Ä≤ v k = (Œª P‚ÜíQ j j<k P‚Ä≤vj ‚Üí let Pvj = proj‚ÇÇ (PP‚Ä≤ v j) P‚Ä≤vj in
                                          let Qvj = P‚ÜíQ j j<k Pvj in
                                          let Q‚Ä≤vj = proj‚ÇÅ (QQ‚Ä≤ v j) Qvj in
                                          Q‚Ä≤vj)
                   , (Œª P‚Ä≤‚ÜíQ‚Ä≤ j j<k Pvj ‚Üí let P‚Ä≤vj = proj‚ÇÅ (PP‚Ä≤ v j) Pvj in
                                          let Q‚Ä≤vj = P‚Ä≤‚ÜíQ‚Ä≤ j j<k P‚Ä≤vj in
                                          let Qvj = proj‚ÇÇ (QQ‚Ä≤ v j) Q‚Ä≤vj in
                                          Qvj)

down-fun : ‚àÄ{A}{P Q : Pred·µí A}{k}
   ‚Üí ‚Üì·µñ k (P ‚Üí·µñ Q) ‚â°·µñ ‚Üì·µñ k ((‚Üì·µñ k P) ‚Üí·µñ (‚Üì·µñ k Q))
down-fun {A}{P}{Q}{k} x i =
        (Œª { (i<k , PQxi) ‚Üí i<k ,
                   (Œª k‚ÇÉ x‚ÇÅ x‚ÇÇ ‚Üí (proj‚ÇÅ x‚ÇÇ) , (PQxi k‚ÇÉ x‚ÇÅ (proj‚ÇÇ x‚ÇÇ)))})
      , Œª { (a , b) ‚Üí a , (Œª j x‚ÇÅ Pxj ‚Üí
                  let xx = b j x‚ÇÅ (‚â§-trans (s‚â§s x‚ÇÅ) a , Pxj) in proj‚ÇÇ xx)}

continuous-‚Üí : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí continuous F
   ‚Üí continuous G
   ‚Üí continuous (Œª P ‚Üí F P ‚Üí·µñ G P)
continuous-‚Üí {A}{B}{F}{G} neF neG P k =
    ‚Üì·µñ k (F P ‚Üí·µñ G P)                              ‚â°·µñ‚ü® down-fun ‚ü©
    ‚Üì·µñ k (‚Üì·µñ k (F P) ‚Üí·µñ ‚Üì·µñ k (G P))  ‚â°·µñ‚ü® ext-‚Üì k (cong-‚Üí·µñ (neF _ k) (neG _ k)) ‚ü©
    ‚Üì·µñ k (‚Üì·µñ k (F (‚Üì·µñ k P)) ‚Üí·µñ ‚Üì·µñ k (G (‚Üì·µñ k P)))  ‚â°·µñ‚ü® ‚â°·µñ-sym down-fun ‚ü©
    ‚Üì·µñ k (F (‚Üì·µñ k P) ‚Üí·µñ G (‚Üì·µñ k P))
    QED·µñ

wellfounded-‚Üí : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí wellfounded F
   ‚Üí wellfounded G
   ‚Üí wellfounded (Œª P ‚Üí F P ‚Üí·µñ G P)
wellfounded-‚Üí {A}{B}{F}{G} wfF wfG P k =
    ‚Üì·µñ (suc k) (F P ‚Üí·µñ G P)                              ‚â°·µñ‚ü® down-fun ‚ü©
    ‚Üì·µñ (suc k) (‚Üì·µñ (suc k) (F P) ‚Üí·µñ ‚Üì·µñ (suc k) (G P))
                               ‚â°·µñ‚ü® ext-‚Üì (suc k) (cong-‚Üí·µñ (wfF _ k) (wfG _ k)) ‚ü©
    ‚Üì·µñ (suc k) (‚Üì·µñ (suc k) (F (‚Üì·µñ k P)) ‚Üí·µñ ‚Üì·µñ (suc k) (G (‚Üì·µñ k P)))
                                                           ‚â°·µñ‚ü® ‚â°·µñ-sym down-fun ‚ü©
    ‚Üì·µñ (suc k) (F (‚Üì·µñ k P) ‚Üí·µñ G (‚Üì·µñ k P))
    QED·µñ


cong-√ó·µñ : ‚àÄ{A}{P P‚Ä≤ Q Q‚Ä≤ : Pred·µí A}
   ‚Üí P ‚â°·µñ P‚Ä≤
   ‚Üí Q ‚â°·µñ Q‚Ä≤
   ‚Üí P √ó·µñ Q  ‚â°·µñ  P‚Ä≤ √ó·µñ Q‚Ä≤
cong-√ó·µñ PP‚Ä≤ QQ‚Ä≤ v k = (Œª {x k‚ÇÅ x‚ÇÅ ‚Üí (proj‚ÇÅ (PP‚Ä≤ v k‚ÇÅ) (proj‚ÇÅ (x k‚ÇÅ x‚ÇÅ)))
                                  , (proj‚ÇÅ (QQ‚Ä≤ v k‚ÇÅ) (proj‚ÇÇ (x k‚ÇÅ x‚ÇÅ)))})
                    , (Œª {x k‚ÇÅ x‚ÇÅ ‚Üí (proj‚ÇÇ (PP‚Ä≤ v k‚ÇÅ) (proj‚ÇÅ (x k‚ÇÅ x‚ÇÅ)))
                                  , (proj‚ÇÇ (QQ‚Ä≤ v k‚ÇÅ) (proj‚ÇÇ (x k‚ÇÅ x‚ÇÅ)))})

down-√ó : ‚àÄ{A}{P Q : Pred·µí A}{k}
   ‚Üí ‚Üì·µñ k (P √ó·µñ Q) ‚â°·µñ ‚Üì·µñ k ((‚Üì·µñ k P) √ó·µñ (‚Üì·µñ k Q))
down-√ó {A}{P}{Q}{k} x i =
  (Œª { (i<k , PQxi) ‚Üí i<k , (Œª j j‚â§i ‚Üí ((‚â§-trans (s‚â§s j‚â§i) i<k) ,
             proj‚ÇÅ (PQxi j j‚â§i)) , (‚â§-trans (s‚â§s j‚â§i) i<k)
                        , (proj‚ÇÇ (PQxi j j‚â§i)))})
  ,
  Œª {(i<k , PQxi) ‚Üí i<k , (Œª j j‚â§i ‚Üí (proj‚ÇÇ (proj‚ÇÅ (PQxi j j‚â§i)))
                                   , (proj‚ÇÇ (proj‚ÇÇ (PQxi j j‚â§i))))}

wellfounded-√ó : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí wellfounded F
   ‚Üí wellfounded G
   ‚Üí wellfounded (Œª P ‚Üí F P √ó·µñ G P)
wellfounded-√ó {A}{B}{F}{G} wfF wfG P k =
    ‚Üì·µñ (suc k) (F P √ó·µñ G P)                              ‚â°·µñ‚ü® down-√ó ‚ü©
    ‚Üì·µñ (suc k) (‚Üì·µñ (suc k) (F P) √ó·µñ ‚Üì·µñ (suc k) (G P))
         ‚â°·µñ‚ü® ext-‚Üì (suc k) (cong-√ó·µñ (wfF _ k) (wfG _ k)) ‚ü©
    ‚Üì·µñ (suc k) (‚Üì·µñ (suc k) (F (‚Üì·µñ k P)) √ó·µñ ‚Üì·µñ (suc k) (G (‚Üì·µñ k P)))
         ‚â°·µñ‚ü® ‚â°·µñ-sym down-√ó ‚ü©
    ‚Üì·µñ (suc k) (F (‚Üì·µñ k P) √ó·µñ G (‚Üì·µñ k P))
    QED·µñ

continuous-√ó : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí continuous F
   ‚Üí continuous G
   ‚Üí continuous (Œª P ‚Üí F P √ó·µñ G P)
continuous-√ó {A}{B}{F}{G} neF neG P k =
    ‚Üì·µñ k (F P √ó·µñ G P)                              ‚â°·µñ‚ü® down-√ó ‚ü©
    ‚Üì·µñ k (‚Üì·µñ k (F P) √ó·µñ ‚Üì·µñ k (G P))
         ‚â°·µñ‚ü® ext-‚Üì k (cong-√ó·µñ (neF _ k) (neG _ k)) ‚ü©
    ‚Üì·µñ k (‚Üì·µñ k (F (‚Üì·µñ k P)) √ó·µñ ‚Üì·µñ k (G (‚Üì·µñ k P)))
         ‚â°·µñ‚ü® ‚â°·µñ-sym down-√ó ‚ü©
    ‚Üì·µñ k (F (‚Üì·µñ k P) √ó·µñ G (‚Üì·µñ k P))
    QED·µñ

cong-‚äé·µñ : ‚àÄ{A}{P P‚Ä≤ Q Q‚Ä≤ : Pred·µí A}
   ‚Üí P ‚â°·µñ P‚Ä≤
   ‚Üí Q ‚â°·µñ Q‚Ä≤
   ‚Üí P ‚äé·µñ Q  ‚â°·µñ  P‚Ä≤ ‚äé·µñ Q‚Ä≤
cong-‚äé·µñ {A}{P}{P‚Ä≤}{Q}{Q‚Ä≤} PP‚Ä≤ QQ‚Ä≤ v k = to , fro
  where
  to : (P ‚äé·µñ Q) v k ‚Üí (P‚Ä≤ ‚äé·µñ Q‚Ä≤) v k
  to PQ j j<k
      with PQ j j<k
  ... | inj‚ÇÅ Pvj = inj‚ÇÅ (proj‚ÇÅ (PP‚Ä≤ v j) Pvj)
  ... | inj‚ÇÇ Qvj = inj‚ÇÇ (proj‚ÇÅ (QQ‚Ä≤ v j) Qvj)
  fro : (P‚Ä≤ ‚äé·µñ Q‚Ä≤) v k ‚Üí (P ‚äé·µñ Q) v k
  fro PQ‚Ä≤ j j<k
      with PQ‚Ä≤ j j<k
  ... | inj‚ÇÅ P‚Ä≤vj = inj‚ÇÅ (proj‚ÇÇ (PP‚Ä≤ v j) P‚Ä≤vj)
  ... | inj‚ÇÇ Q‚Ä≤vj = inj‚ÇÇ (proj‚ÇÇ (QQ‚Ä≤ v j) Q‚Ä≤vj)
      
down-‚äé : ‚àÄ{A}{P Q : Pred·µí A}{k}
   ‚Üí ‚Üì·µñ k (P ‚äé·µñ Q) ‚â°·µñ ‚Üì·µñ k ((‚Üì·µñ k P) ‚äé·µñ (‚Üì·µñ k Q))
down-‚äé {A}{P}{Q}{k} x i = to , fro
  where
  to : ‚Üì·µñ k (P ‚äé·µñ Q) x i ‚Üí ‚Üì·µñ k (‚Üì·µñ k P ‚äé·µñ ‚Üì·µñ k Q) x i
  to (i<k , P‚äéQxi) = (i<k , Goal)
    where
    Goal : (‚Üì·µñ k P ‚äé·µñ ‚Üì·µñ k Q) x i
    Goal j j<
        with P‚äéQxi j j<
    ... | inj‚ÇÅ Pxj = inj‚ÇÅ ((‚â§-trans (s‚â§s j<) i<k) , Pxj)
    ... | inj‚ÇÇ Qxj = inj‚ÇÇ ((‚â§-trans (s‚â§s j<) i<k) , Qxj)
  fro : ‚Üì·µñ k (‚Üì·µñ k P ‚äé·µñ ‚Üì·µñ k Q) x i ‚Üí ‚Üì·µñ k (P ‚äé·µñ Q) x i
  fro (i<k , P‚äéQxi) = (i<k , Goal)
    where
    Goal : (P ‚äé·µñ Q) x i
    Goal j j<
        with P‚äéQxi j j<
    ... | inj‚ÇÅ Pxj = inj‚ÇÅ (proj‚ÇÇ Pxj)
    ... | inj‚ÇÇ Qxj = inj‚ÇÇ (proj‚ÇÇ Qxj)

continuous-‚äé : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí continuous F
   ‚Üí continuous G
   ‚Üí continuous (Œª P ‚Üí F P ‚äé·µñ G P)
continuous-‚äé {A}{B}{F}{G} neF neG P k =
    ‚Üì·µñ k (F P ‚äé·µñ G P)                              ‚â°·µñ‚ü® down-‚äé ‚ü©
    ‚Üì·µñ k (‚Üì·µñ k (F P) ‚äé·µñ ‚Üì·µñ k (G P))
         ‚â°·µñ‚ü® ext-‚Üì k (cong-‚äé·µñ (neF _ k) (neG _ k)) ‚ü©
    ‚Üì·µñ k (‚Üì·µñ k (F (‚Üì·µñ k P)) ‚äé·µñ ‚Üì·µñ k (G (‚Üì·µñ k P)))
         ‚â°·µñ‚ü® ‚â°·µñ-sym down-‚äé ‚ü©
    ‚Üì·µñ k (F (‚Üì·µñ k P) ‚äé·µñ G (‚Üì·µñ k P))
    QED·µñ

wellfounded-‚äé : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí wellfounded F
   ‚Üí wellfounded G
   ‚Üí wellfounded (Œª P ‚Üí F P ‚äé·µñ G P)
wellfounded-‚äé {A}{B}{F}{G} wfF wfG P k =
    ‚Üì·µñ (suc k) (F P ‚äé·µñ G P)                              ‚â°·µñ‚ü® down-‚äé ‚ü©
    ‚Üì·µñ (suc k) (‚Üì·µñ (suc k) (F P) ‚äé·µñ ‚Üì·µñ (suc k) (G P))
         ‚â°·µñ‚ü® ext-‚Üì (suc k) (cong-‚äé·µñ (wfF _ k) (wfG _ k)) ‚ü©
    ‚Üì·µñ (suc k) (‚Üì·µñ (suc k) (F (‚Üì·µñ k P)) ‚äé·µñ ‚Üì·µñ (suc k) (G (‚Üì·µñ k P)))
         ‚â°·µñ‚ü® ‚â°·µñ-sym down-‚äé ‚ü©
    ‚Üì·µñ (suc k) (F (‚Üì·µñ k P) ‚äé·µñ G (‚Üì·µñ k P))
    QED·µñ

extensional-id : ‚àÄ{A} ‚Üí extensional·µñ{A} (Œª P ‚Üí P)
extensional-id {A} PQ x i = proj‚ÇÅ (PQ x i) , proj‚ÇÇ (PQ x i)

extensional-‚Üí : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí extensional·µñ F
   ‚Üí extensional·µñ G
   ‚Üí extensional·µñ (Œª P ‚Üí F P ‚Üí·µñ G P)
extensional-‚Üí extF extG PQ x i =
  (Œª FP‚ÜíGP k x‚ÇÇ x‚ÇÉ ‚Üí proj‚ÇÅ (extG PQ x k) (FP‚ÜíGP k x‚ÇÇ (proj‚ÇÇ (extF PQ x k) x‚ÇÉ)))
  , (Œª z k z‚ÇÅ z‚ÇÇ ‚Üí proj‚ÇÇ (extG PQ x k) (z k z‚ÇÅ (proj‚ÇÅ (extF PQ x k) z‚ÇÇ)))

extensional-√ó : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí extensional·µñ F
   ‚Üí extensional·µñ G
   ‚Üí extensional·µñ (Œª P ‚Üí F P √ó·µñ G P)
extensional-√ó extF extG PQ x i =
  (Œª x‚ÇÅ k x‚ÇÇ ‚Üí (proj‚ÇÅ (extF PQ x k) (proj‚ÇÅ (x‚ÇÅ k x‚ÇÇ)))
             , (proj‚ÇÅ (extG PQ x k) (proj‚ÇÇ (x‚ÇÅ k x‚ÇÇ))))
  , (Œª x‚ÇÅ k x‚ÇÇ ‚Üí (proj‚ÇÇ (extF PQ x k) (proj‚ÇÅ (x‚ÇÅ k x‚ÇÇ)))
               , (proj‚ÇÇ (extG PQ x k) (proj‚ÇÇ (x‚ÇÅ k x‚ÇÇ))))

extensional-‚äé : ‚àÄ{A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí extensional·µñ F
   ‚Üí extensional·µñ G
   ‚Üí extensional·µñ (Œª P ‚Üí F P ‚äé·µñ G P)
extensional-‚äé {A}{B}{F}{G} extF extG {P}{Q} PQ x i = to , fro
  where
  to : (F P ‚äé·µñ G P) x i ‚Üí (F Q ‚äé·µñ G Q) x i
  to FP‚äéGP k k<i
      with FP‚äéGP k k<i
  ... | inj‚ÇÅ FP = inj‚ÇÅ (proj‚ÇÅ (extF PQ x k) FP)
  ... | inj‚ÇÇ GP = inj‚ÇÇ (proj‚ÇÅ (extG PQ x k) GP)

  fro : (F Q ‚äé·µñ G Q) x i ‚Üí (F P ‚äé·µñ G P) x i
  fro FP‚äéGP k k<i
      with FP‚äéGP k k<i
  ... | inj‚ÇÅ FP = inj‚ÇÅ (proj‚ÇÇ (extF PQ x k) FP)
  ... | inj‚ÇÇ GP = inj‚ÇÇ (proj‚ÇÇ (extG PQ x k) GP)

cong-‚ñ∑·µñ : ‚àÄ{A}{P P‚Ä≤ : Pred·µí A}
   ‚Üí P ‚â°·µñ P‚Ä≤
   ‚Üí ‚ñ∑·µñ P ‚â°·µñ ‚ñ∑·µñ P‚Ä≤
cong-‚ñ∑·µñ PP‚Ä≤ v k = (Œª {‚ñ∑Pvk j j<k ‚Üí proj‚ÇÅ (PP‚Ä≤ v j) (‚ñ∑Pvk j j<k)})
                , (Œª ‚ñ∑P‚Ä≤vk j j<k ‚Üí proj‚ÇÇ (PP‚Ä≤ v j) (‚ñ∑P‚Ä≤vk j j<k))

wellfounded-‚ñ∑ : ‚àÄ{A}{B}{F : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí continuous F
   ‚Üí wellfounded (Œª P ‚Üí ‚ñ∑·µñ (F P))
wellfounded-‚ñ∑ {A}{B}{F} neF P k =
    ‚Üì·µñ (suc k) (‚ñ∑·µñ (F P))                ‚â°·µñ‚ü® EQ1 ‚ü©
    ‚Üì·µñ (suc k) (‚ñ∑·µñ (‚Üì·µñ k (F P)))         ‚â°·µñ‚ü® ext-‚Üì (suc k) (cong-‚ñ∑·µñ (neF _ k)) ‚ü©
    ‚Üì·µñ (suc k) (‚ñ∑·µñ (‚Üì·µñ k (F (‚Üì·µñ k P))))  ‚â°·µñ‚ü® ‚â°·µñ-sym EQ1 ‚ü©
    ‚Üì·µñ (suc k) (‚ñ∑·µñ (F (‚Üì·µñ k P)))
    QED·µñ
  where
  EQ1 : ‚àÄ{A}{P : Pred·µí A}{k} ‚Üí ‚Üì·µñ (suc k) (‚ñ∑·µñ P) ‚â°·µñ ‚Üì·µñ (suc k) (‚ñ∑·µñ (‚Üì·µñ k P))
  EQ1 {A}{P}{k} x i = (Œª {(s‚â§s i‚â§k , b) ‚Üí s‚â§s i‚â§k ,
                      Œª j j<i ‚Üí (‚â§-trans j<i i‚â§k) , (b j j<i)})
                 , Œª {(s‚â§s i‚â§k , b) ‚Üí (s‚â§s i‚â§k) , (Œª k z ‚Üí proj‚ÇÇ (b k z))}

extensional-‚ñ∑ : ‚àÄ{A}{B}{F : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí extensional·µñ F
   ‚Üí extensional·µñ (Œª P ‚Üí ‚ñ∑·µñ (F P))
extensional-‚ñ∑ extF PQ x i =
      (Œª x‚ÇÅ k x‚ÇÇ ‚Üí proj‚ÇÅ (extF PQ x k) (x‚ÇÅ k x‚ÇÇ))
    , (Œª x‚ÇÅ k x‚ÇÇ ‚Üí proj‚ÇÇ (extF PQ x k) (x‚ÇÅ k x‚ÇÇ))

{- TODO: ‚àÄ·µñ extensional, wellfounded, continuous -}

extensional-‚àÄ : ‚àÄ{A B C}{F : Pred·µí B ‚Üí Pred·µí (A √ó C)}
   ‚Üí extensional·µñ{B}{A √ó C} F
   ‚Üí extensional·µñ{B}{C} (Œª P ‚Üí ‚àÄ·µñ Œª a b ‚Üí (F P) (a , b))
extensional-‚àÄ {A}{B}{C} extF PQ x i =
    (Œª ‚àÄFPxi v ‚Üí proj‚ÇÅ (extF PQ (v , x) i) (‚àÄFPxi v))
  , (Œª ‚àÄFQxi v ‚Üí proj‚ÇÇ (extF PQ (v , x) i) (‚àÄFQxi v))

down-‚àÄ : ‚àÄ{A B}{P : Pred·µí (A √ó B)}{k}
   ‚Üí ‚Üì·µñ k (‚àÄ·µñ Œª a b ‚Üí P (a , b)) ‚â°·µñ ‚Üì·µñ k (‚àÄ·µñ Œª a b ‚Üí ‚Üì·µñ k P (a , b))
down-‚àÄ {A}{B}{F} x i = (Œª {(i<k , ‚àÄFxi) ‚Üí i<k , Œª v ‚Üí i<k , ‚àÄFxi v})
                     , (Œª {(i<k , ‚àÄFxi) ‚Üí i<k , (Œª x ‚Üí proj‚ÇÇ (‚àÄFxi x))})

cong-‚àÄ·µñ : ‚àÄ{A B}{P P‚Ä≤ : Pred·µí (A √ó B)}
   ‚Üí P ‚â°·µñ P‚Ä≤
   ‚Üí ‚àÄ·µñ (Œª a b ‚Üí P (a , b)) ‚â°·µñ ‚àÄ·µñ (Œª a b ‚Üí P‚Ä≤ (a , b))
cong-‚àÄ·µñ PP‚Ä≤ v k =
    (Œª z v‚Ä≤ ‚Üí proj‚ÇÅ (PP‚Ä≤ (v‚Ä≤ , v) k) (z v‚Ä≤))
    , (Œª z v‚Ä≤ ‚Üí proj‚ÇÇ (PP‚Ä≤ (v‚Ä≤ , v) k) (z v‚Ä≤))

continuous-‚àÄ :  ‚àÄ{A B C}{F : Pred·µí B ‚Üí Pred·µí (A √ó C)}
   ‚Üí continuous F
   ‚Üí continuous (Œª P ‚Üí ‚àÄ·µñ Œª a b ‚Üí (F P) (a , b))
continuous-‚àÄ {A}{B}{C}{F} cF P k =
    ‚Üì·µñ k (‚àÄ·µñ (Œª a b ‚Üí F P (a , b)))                ‚â°·µñ‚ü® down-‚àÄ ‚ü© 
    ‚Üì·µñ k (‚àÄ·µñ (Œª a b ‚Üí ‚Üì·µñ k (F P) (a , b)))     ‚â°·µñ‚ü® ext-‚Üì k (cong-‚àÄ·µñ (cF _ _)) ‚ü© 
    ‚Üì·µñ k (‚àÄ·µñ (Œª a b ‚Üí ‚Üì·µñ k (F (‚Üì·µñ k P)) (a , b)))  ‚â°·µñ‚ü® ‚â°·µñ-sym down-‚àÄ ‚ü© 
    ‚Üì·µñ k (‚àÄ·µñ (Œª a b ‚Üí F (‚Üì·µñ k P) (a , b)))
    QED·µñ  

wellfounded-‚àÄ :  ‚àÄ{A B C}{F : Pred·µí B ‚Üí Pred·µí (A √ó C)}
   ‚Üí wellfounded F
   ‚Üí wellfounded (Œª P ‚Üí ‚àÄ·µñ Œª a b ‚Üí (F P) (a , b))
wellfounded-‚àÄ {A}{B}{C}{F} wfF P k =
    ‚Üì·µñ (suc k) (‚àÄ·µñ (Œª a b ‚Üí F P (a , b)))                          ‚â°·µñ‚ü® down-‚àÄ ‚ü© 
    ‚Üì·µñ (suc k) (‚àÄ·µñ (Œª a b ‚Üí ‚Üì·µñ (suc k) (F P) (a , b)))
                                              ‚â°·µñ‚ü® ext-‚Üì _ (cong-‚àÄ·µñ (wfF _ _)) ‚ü© 
    ‚Üì·µñ (suc k) (‚àÄ·µñ (Œª a b ‚Üí ‚Üì·µñ (suc k) (F (‚Üì·µñ k P)) (a , b)))
                                                            ‚â°·µñ‚ü® ‚â°·µñ-sym down-‚àÄ ‚ü© 
    ‚Üì·µñ (suc k) (‚àÄ·µñ (Œª a b ‚Üí F (‚Üì·µñ k P) (a , b)))
    QED·µñ  


{-------------------------------------------------------------------------------
     Step Indexed Logic
-------------------------------------------------------------------------------}

data Kind : Set where
  Continuous : Kind
  Wellfounded : Kind

goodness : Kind ‚Üí ‚àÄ{A}{B} ‚Üí (Pred·µí A ‚Üí Pred·µí B) ‚Üí Set‚ÇÅ
goodness Continuous F = continuous F
goodness Wellfounded F = wellfounded F

record Fun (A B : Set) (Œ∫ : Kind) : Set‚ÇÅ where
  field
    fun : Pred·µí A ‚Üí Pred·µí B
    good : goodness Œ∫ fun
    ext : extensional·µñ fun
    down : ‚àÄ P ‚Üí dc·µñ P ‚Üí dc·µñ (fun P)
    {- TODO: add eventually zero -}
open Fun

id·∂† : ‚àÄ{A} ‚Üí Fun A A Continuous
id·∂† = record { fun = Œª P ‚Üí P
             ; good = continuous-id
             ; ext = extensional-id
             ; down = Œª P dcP ‚Üí dcP
             }

{- TODO: add fst, snd -}

choose : Kind ‚Üí Kind ‚Üí Kind
choose Continuous Continuous = Continuous
choose Continuous Wellfounded = Continuous
choose Wellfounded Continuous = Continuous
choose Wellfounded Wellfounded = Wellfounded

goodness-‚Üí : ‚àÄ (kf kg : Kind) {A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí goodness kf F
   ‚Üí extensional·µñ F
   ‚Üí goodness kg G
   ‚Üí extensional·µñ G
   ‚Üí goodness (choose kf kg) (Œª P ‚Üí F P ‚Üí·µñ G P)
goodness-‚Üí Continuous Continuous gf extF gg extG  = continuous-‚Üí gf gg
goodness-‚Üí Continuous Wellfounded {G = G} gf extF gg extG =
    continuous-‚Üí gf (wellfounded‚áícontinuous G gg extG)
goodness-‚Üí Wellfounded Continuous {F = F} gf extF gg extG =
    continuous-‚Üí (wellfounded‚áícontinuous F gf extF) gg
goodness-‚Üí Wellfounded Wellfounded gf extF gg extG = wellfounded-‚Üí gf gg

kind : ‚àÄ{A}{B}{kF} ‚Üí Fun A B kF ‚Üí Kind
kind {A}{B}{kF} F = kF

infixr 6 _‚Üí·∂†_
_‚Üí·∂†_ : ‚àÄ{A B}{kF kG} ‚Üí Fun A B kF ‚Üí Fun A B kG ‚Üí Fun A B (choose kF kG)
F ‚Üí·∂† G = record { fun = Œª P ‚Üí (fun F) P ‚Üí·µñ (fun G) P
        ; good = goodness-‚Üí (kind F) (kind G) (good F) (ext F) (good G) (ext G)
        ; ext = extensional-‚Üí (ext F) (ext G)
        ; down = Œª P dcP n x x‚ÇÅ ‚Üí dc-‚Üí·µí n x‚ÇÅ
        }

goodness-√ó : ‚àÄ (kf kg : Kind) {A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí goodness kf F
   ‚Üí extensional·µñ F
   ‚Üí goodness kg G
   ‚Üí extensional·µñ G
   ‚Üí goodness (choose kf kg) (Œª P ‚Üí F P √ó·µñ G P)
goodness-√ó Continuous Continuous gf extF gg extG  = continuous-√ó gf gg
goodness-√ó Continuous Wellfounded {G = G} gf extF gg extG =
    continuous-√ó gf (wellfounded‚áícontinuous G gg extG)
goodness-√ó Wellfounded Continuous {F = F} gf extF gg extG =
    continuous-√ó (wellfounded‚áícontinuous F gf extF) gg
goodness-√ó Wellfounded Wellfounded gf extF gg extG = wellfounded-√ó gf gg

infixr 6 _√ó·∂†_
_√ó·∂†_ : ‚àÄ{A}{B}{kF kG} ‚Üí Fun A B kF ‚Üí Fun A B kG ‚Üí Fun A B (choose kF kG)
F √ó·∂† G = record { fun = Œª P ‚Üí (fun F) P √ó·µñ (fun G) P
        ; good = goodness-√ó (kind F) (kind G) (good F) (ext F) (good G) (ext G)
        ; ext = extensional-√ó (ext F) (ext G)
        ; down = Œª P dcP n x x‚ÇÅ ‚Üí dc-√ó (Œª n ‚Üí down F P dcP n x)
                                       (Œª n ‚Üí down G P dcP n x) n x‚ÇÅ
        }

goodness-‚äé : ‚àÄ (kf kg : Kind) {A}{B}{F G : Pred·µí A ‚Üí Pred·µí B}
   ‚Üí goodness kf F
   ‚Üí extensional·µñ F
   ‚Üí goodness kg G
   ‚Üí extensional·µñ G
   ‚Üí goodness (choose kf kg) (Œª P ‚Üí F P ‚äé·µñ G P)
goodness-‚äé Continuous Continuous gf extF gg extG  = continuous-‚äé gf gg
goodness-‚äé Continuous Wellfounded {G = G} gf extF gg extG =
    continuous-‚äé gf (wellfounded‚áícontinuous G gg extG)
goodness-‚äé Wellfounded Continuous {F = F} gf extF gg extG =
    continuous-‚äé (wellfounded‚áícontinuous F gf extF) gg
goodness-‚äé Wellfounded Wellfounded gf extF gg extG = wellfounded-‚äé gf gg

infixr 6 _‚äé·∂†_
_‚äé·∂†_ : ‚àÄ{A}{B}{kF kG} ‚Üí Fun A B kF ‚Üí Fun A B kG ‚Üí Fun A B (choose kF kG)
F ‚äé·∂† G = record { fun = Œª P ‚Üí (fun F) P ‚äé·µñ (fun G) P
        ; good = goodness-‚äé (kind F) (kind G) (good F) (ext F) (good G) (ext G)
        ; ext = extensional-‚äé (ext F) (ext G)
        ; down = Œª P dcP n x x‚ÇÅ ‚Üí dc-‚äé (Œª n ‚Üí down F P dcP n x)
                                       (Œª n ‚Üí down G P dcP n x) n x‚ÇÅ
        }

goodness-‚àÄ : ‚àÄ (kf : Kind) {A B C}{F : Pred·µí B ‚Üí Pred·µí (A √ó C)}
   ‚Üí goodness kf F
   ‚Üí goodness kf (Œª P ‚Üí ‚àÄ·µñ Œª a b ‚Üí (F P) (a , b))
goodness-‚àÄ Continuous gf = continuous-‚àÄ gf 
goodness-‚àÄ Wellfounded gf = wellfounded-‚àÄ gf 

‚àÄ·∂† : ‚àÄ{A}{B}{C}{kF} ‚Üí Fun B (A √ó C) kF ‚Üí Fun B C kF
‚àÄ·∂† F = record { fun = (Œª P ‚Üí ‚àÄ·µñ Œª a b ‚Üí (fun F P) (a , b))
              ; good = goodness-‚àÄ (kind F) (good F)
              ; ext = extensional-‚àÄ (ext F)
              ; down = Œª P x n x‚ÇÅ x‚ÇÇ ‚Üí dc-‚àÄ (Œª v n ‚Üí down F P x n (v , x‚ÇÅ)) n x‚ÇÇ
              }

goodness-‚ñ∑ : ‚àÄ (k : Kind) ‚Üí ‚àÄ{A}{B}{F : Pred·µí A ‚Üí Pred·µí B}
  ‚Üí goodness k F
  ‚Üí extensional·µñ F
  ‚Üí wellfounded (Œª P ‚Üí ‚ñ∑·µñ (F P))
goodness-‚ñ∑ Continuous gf extF = wellfounded-‚ñ∑ gf
goodness-‚ñ∑ Wellfounded {A}{B}{F} gf extF =
    wellfounded-‚ñ∑ (wellfounded‚áícontinuous F gf extF )

‚ñ∑·∂† : ‚àÄ{A}{B}{kF} ‚Üí Fun A B kF ‚Üí Fun A B Wellfounded
‚ñ∑·∂† F = record { fun = (Œª P ‚Üí ‚ñ∑·µñ ((fun F) P))
              ; good = goodness-‚ñ∑ (kind F) (good F) (ext F)
              ; ext = extensional-‚ñ∑ (ext F) 
              ; down = Œª P x n x‚ÇÅ x‚ÇÇ ‚Üí dc-‚ñ∑ (Œª n ‚Üí down F P x n x‚ÇÅ) n x‚ÇÇ
              }

Œº·∂† : ‚àÄ{A} ‚Üí Fun A A Wellfounded ‚Üí Pred·µí A
Œº·∂† F = Œº·µñ (fun F)

fixpoint·∂†  : ‚àÄ{A}
  ‚Üí (F : Fun A A Wellfounded)
  ‚Üí Œº·∂† F ‚â°·µñ fun F (Œº·∂† F)
fixpoint·∂† F = theorem20 (fun F) (good F) (ext F)

dc-Œº·∂† : ‚àÄ{A}{F : Fun A A Wellfounded}
   ‚Üí dc·µñ (Œº·∂† F)
dc-Œº·∂† {A}{F} = dc-Œº (good F) (ext F) (down F)

-- OBSOLETE STUFF
--
-- record CT (A : Set) : Set‚ÇÅ where
--   field
--     fun : Pred·µí A ‚Üí Pred·µí A
--     cont : continuous fun
--     ext : extensional·µñ fun
-- open CT

-- record WF (A : Set) : Set‚ÇÅ where
--   field
--     fun : Pred·µí A ‚Üí Pred·µí A
--     wf : wellfounded fun
--     ext : extensional·µñ fun
-- open WF

-- id·∂ú : ‚àÄ{A} ‚Üí CT A
-- id·∂ú = record { fun = Œª P ‚Üí P ; cont = continuous-id ; ext = extensional-id }

-- infixr 6 _‚Üí·∂ú_
-- _‚Üí·∂ú_ : ‚àÄ{A} ‚Üí CT A ‚Üí CT A ‚Üí CT A
-- F ‚Üí·∂ú G = record { fun = Œª P ‚Üí (fun F) P ‚Üí·µñ (fun G) P
--                 ; cont = continuous-‚Üí (cont F) (cont G)
--                 ; ext = extensional-‚Üí (ext F) (ext G) }

-- infixr 6 _‚Üí ∑_
-- _‚Üí ∑_ : ‚àÄ{A} ‚Üí WF A ‚Üí WF A ‚Üí WF A
-- F ‚Üí ∑ G = record { fun = Œª P ‚Üí (fun F) P ‚Üí·µñ (fun G) P
--                 ; wf = wellfounded-‚Üí (wf F) (wf G)
--                 ; ext = extensional-‚Üí (ext F) (ext G) }

-- infixr 7 _√ó·∂ú_
-- _√ó·∂ú_ : ‚àÄ{A} ‚Üí CT A ‚Üí CT A ‚Üí CT A
-- (F √ó·∂ú G) = record { fun = (Œª P ‚Üí (fun F) P √ó·µñ (fun G) P)
--                   ; cont = continuous-√ó (cont F) (cont G)
--                   ; ext = extensional-√ó (ext F) (ext G) }

-- infixr 7 _√ó ∑_
-- _√ó ∑_ : ‚àÄ{A} ‚Üí WF A ‚Üí WF A ‚Üí WF A
-- (F √ó ∑ G) = record { fun = (Œª P ‚Üí (fun F) P √ó·µñ (fun G) P)
--                   ; wf = wellfounded-√ó (wf F) (wf G)
--                   ; ext = extensional-√ó (ext F) (ext G) }

-- infixr 7 _‚äé·∂ú_
-- _‚äé·∂ú_ : ‚àÄ{A} ‚Üí WF A ‚Üí WF A ‚Üí WF A
-- (F ‚äé·∂ú G) = record { fun = (Œª P ‚Üí (fun F) P ‚äé·µñ (fun G) P)
--                   ; wf = wellfounded-‚äé (wf F) (wf G)
--                   ; ext = extensional-‚äé (ext F) (ext G) }

-- ‚ñ∑ ∑ : ‚àÄ{A} ‚Üí CT A ‚Üí WF A
-- ‚ñ∑ ∑ F = record { fun = (Œª P ‚Üí ‚ñ∑·µñ ((fun F) P))
--               ; wf = wellfounded-‚ñ∑ (cont F)
--               ; ext = extensional-‚ñ∑ (ext F) }

-- WF‚áíCT : ‚àÄ{A} ‚Üí WF A ‚Üí CT A
-- WF‚áíCT F = record { fun = fun F
--                  ; cont = wellfounded‚áícontinuous (fun F) (wf F) (ext F)
--                  ; ext = ext F }

-- _·∂ú : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí CT A
-- (P)·∂ú = record { fun = Œª Q ‚Üí P
--               ; cont = continuous-const{P = P}
--               ; ext = Œª _ x i ‚Üí (Œª x‚ÇÅ ‚Üí x‚ÇÅ) , (Œª x‚ÇÅ ‚Üí x‚ÇÅ) }

-- Œº ∑ : ‚àÄ{A} ‚Üí WF A ‚Üí Pred·µí A
-- Œº ∑ F = Œº·µñ (fun F)

-- fixpoint ∑  : ‚àÄ{A}
--   ‚Üí (F : WF A)
--   ‚Üí Œº ∑ F ‚â°·µñ fun F (Œº ∑ F)
-- fixpoint ∑ F = theorem20 (fun F) (wf F) (ext F)

{------------------- Monotonic --------------------}

-- mono-‚Üí·µí : ‚àÄ{A}
--    ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
--    ‚Üí monotonic F
--    ‚Üí (G : Pred·µí A ‚Üí Pred·µí A)
--    ‚Üí monotonic G
--    ‚Üí monotonic (Œª P x ‚Üí (F P x) ‚Üí·µí (G P x))
-- mono-‚Üí·µí F mF G mG {P}{Q} P‚ÜíQ x i FP‚ÜíGP k k‚â§i FQk = {!!}

{-
have
FQk   : F Q x k
P‚ÜíQ   : (x‚ÇÅ : A) (i‚ÇÅ : ‚Ñï) ‚Üí P x‚ÇÅ i‚ÇÅ ‚Üí Q x‚ÇÅ i‚ÇÅ
FP‚ÜíGP : (F P x ‚Üí·µí G P x) i

Goal: G Q x k

-}


{-------------------------------------------------------------------------------
  Experiment: attach all the good properties
 ------------------------------------------------------------------------------}

-- record Set‚Çñ : Set‚ÇÅ where
--   field
--     val : Set·µí
--     dcl : dc val
--     ez : ee val
-- open Set‚Çñ public

-- _‚Çñ : Set ‚Üí Set‚Çñ
-- P ‚Çñ = record { val = (P ·µí) ; dcl = dc-P·µí P ; ez = ee-P·µí P }

-- ‚ä•‚Çñ : Set‚Çñ
-- ‚ä•‚Çñ = record { val = ‚ä•·µí ; dcl = dc-‚ä• ; ez = ee-‚ä• }

-- ‚ä§‚Çñ : Set‚Çñ
-- ‚ä§‚Çñ  = record { val = ‚ä§·µí ; dcl = dc-‚ä§ ; ez = ee-‚ä§ }

-- _√ó‚Çñ_ : Set‚Çñ ‚Üí Set‚Çñ ‚Üí Set‚Çñ
-- (P √ó‚Çñ Q) = record { val = (val P √ó·µí val Q)
--                   ; dcl = dc-√ó (dcl P) (dcl Q)
--                   ; ez = ee-√ó {val P}{val Q} (ez P) (ez Q) }

-- _‚äé‚Çñ_ : Set‚Çñ ‚Üí Set‚Çñ ‚Üí Set‚Çñ
-- (P ‚äé‚Çñ Q) = record { val = (val P ‚äé·µí val Q)
--                   ; dcl = dc-‚äé (dcl P) (dcl Q)
--                   ; ez = ee-‚äé {val P}{val Q} (ez P) (ez Q) }

-- _‚Üí‚Çñ_ : Set‚Çñ ‚Üí Set‚Çñ ‚Üí Set‚Çñ
-- (P ‚Üí‚Çñ Q) = record { val = (Œª k ‚Üí ‚àÄ j ‚Üí j < k ‚Üí val P j ‚Üí val Q j)
--                   ; dcl = dc-‚Üí·µí
--                   ; ez = ee-‚Üí
--                   }

-- ‚àÄ‚Çñ : ‚àÄ{A} ‚Üí (A ‚Üí Set‚Çñ) ‚Üí Set‚Çñ
-- ‚àÄ‚Çñ {A} P = record { val = (Œª k ‚Üí ‚àÄ (v : A) ‚Üí val (P v) k)
--                   ; dcl = (Œª n f k k‚â§n v ‚Üí dcl (P v) n (f v) k k‚â§n)
--                   ; ez = ee-‚àÄ {F = Œª x ‚Üí val (P x)} Œª v ‚Üí ez (P v) }

-- ‚ñ∑_ : Set‚Çñ ‚Üí Set‚Çñ
-- ‚ñ∑ P = record { val = ‚ñ∑·µí (val P) ; dcl = G ; ez = H }
--   where
--   G : dc (‚ñ∑·µí (val P))
--   G n x zero k‚â§n = tt
--   G (suc n) Pn (suc k) (s‚â§s k‚â§n) = (dcl P) n Pn k k‚â§n

--   H : ee (‚ñ∑·µí (val P))
--   H = tt

-- Pred‚Çñ : Set ‚Üí Set‚ÇÅ
-- Pred‚Çñ A = A ‚Üí Set‚Çñ

-- ‚ä§·¥æ : ‚àÄ{A} ‚Üí Pred‚Çñ A
-- ‚ä§·¥æ x = ‚ä§‚Çñ

-- ‚ä•·¥æ : ‚àÄ{A} ‚Üí Pred‚Çñ A
-- ‚ä•·¥æ x = ‚ä•‚Çñ

-- monotonic‚Çñ : ‚àÄ{A} (F : Pred‚Çñ A ‚Üí Pred‚Çñ A) ‚Üí Set‚ÇÅ
-- monotonic‚Çñ F = ‚àÄ P Q x i ‚Üí (val (P x) i ‚Üí val (Q x) i)
--                         ‚Üí (val (F P x) i ‚Üí val (F Q x) i)

-- record Functional (A : Set) : Set‚ÇÅ where
--   field
--     fun : Pred‚Çñ A ‚Üí Pred‚Çñ A
--     mono : monotonic‚Çñ fun
-- open Functional    

-- -- dc-iter-index : ‚àÄ{i j k : ‚Ñï}{A}{F : Functional A}{x : A}
-- --    ‚Üí j ‚â§ k
-- --    ‚Üí val (iter i (fun F) ‚ä§·¥æ x) k
-- --    ‚Üí val (iter i (fun F) ‚ä§·¥æ x) j
-- -- dc-iter-index {zero} {j} {k} j‚â§k iterFk = tt
-- -- dc-iter-index {suc i} {j} {k}{A}{F}{x} j‚â§k iterFk =
-- --    let dcF = dcl (fun F (iter i (fun F) ‚ä§·¥æ) x) in
-- --    dcF k iterFk j j‚â§k

-- -- dc-iter-depth : ‚àÄ(i j k : ‚Ñï){A}{F : Functional A}{x : A}
-- --    ‚Üí j ‚â§‚Ä≤ k
-- --    ‚Üí val (iter k (fun F) ‚ä§·¥æ x) i
-- --    ‚Üí val (iter j (fun F) ‚ä§·¥æ x) i
-- -- dc-iter-depth i j .j _‚â§‚Ä≤_.‚â§‚Ä≤-refl iterkF = iterkF
-- -- dc-iter-depth i zero (suc k) (‚â§‚Ä≤-step j‚â§k) iterkF = tt
-- -- dc-iter-depth i (suc j) (suc k) {A}{F}{x} (‚â§‚Ä≤-step j‚â§k) FiterkFi =
-- --   mono F (iter k (fun F) ‚ä§·¥æ) (iter j (fun F) ‚ä§·¥æ) x i
-- --                   (Œª iterkFi ‚Üí dc-iter-depth i j k {A}{F}
-- --                       (‚â§‚áí‚â§‚Ä≤ (‚â§-trans (n‚â§1+n _) (‚â§‚Ä≤‚áí‚â§ j‚â§k))) iterkFi) FiterkFi

-- -- Œº·¥æ : ‚àÄ{A} ‚Üí (F : Functional A) ‚Üí Pred‚Çñ A
-- -- (Œº·¥æ {A} F) x = record
-- --   { val = (Œª k ‚Üí val (iter k (fun F) ‚ä§·¥æ x) k) 
-- --   ; dcl = (Œª n Fnxn k k‚â§n ‚Üí
-- --              let Fnxk = dc-iter-index{n}{k}{n}{A}{F}{x} k‚â§n Fnxn in
-- --              dc-iter-depth k k n {F = F}{x = x} (‚â§‚áí‚â§‚Ä≤ k‚â§n) Fnxk)
-- --   ; ez = tt }


-- Lob : ‚àÄ{P : Set‚Çñ}
--    ‚Üí (‚àÄ k ‚Üí val (‚ñ∑ P) k ‚Üí val P k)
--      -----------------------------
--    ‚Üí ‚àÄ k ‚Üí val P k
-- Lob ‚ñ∑P‚ÜíP zero = ‚ñ∑P‚ÜíP zero tt
-- Lob {P} ‚ñ∑P‚ÜíP (suc k) = ‚ñ∑P‚ÜíP (suc k) (Lob{P} ‚ñ∑P‚ÜíP k)

