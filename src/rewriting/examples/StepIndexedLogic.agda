{-# OPTIONS --without-K --rewriting #-}

{-
 Based on the development of Logical step-indexed logical relation
 by Philip Wadler (June 1, 2022)
-}
module rewriting.examples.StepIndexedLogic where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.List using (List; []; _‚à∑_)
open import Data.Nat
   using (‚Ñï; zero; suc; _‚â§_; _<_; _+_; _‚à∏_; z‚â§n; s‚â§s; _‚â§‚Ä≤_; ‚â§‚Ä≤-step)
open import Data.Nat.Properties
   using (‚â§-refl; ‚â§-antisym; ‚â§-trans; ‚â§-step; ‚â§‚áí‚â§‚Ä≤; ‚â§‚Ä≤‚áí‚â§; n‚â§1+n)
open import Data.Product
   using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt; ‚ä§)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; cong-app; subst)
open import Relation.Nullary using (¬¨_)
open import Function using (id; _‚àò_)

Set·µí : Set‚ÇÅ
Set·µí = ‚Ñï ‚Üí Set

‚ä•·µí : Set·µí
‚ä•·µí zero     =  ‚ä§
‚ä•·µí (suc n)  =  ‚ä•

‚ä§·µí : Set·µí
‚ä§·µí n  =  ‚ä§

_√ó·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
(P √ó·µí Q) n  =  (P n) √ó (Q n)

infixr 7 _‚äé·µí_
_‚äé·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
(P ‚äé·µí Q) n  =  (P n) ‚äé (Q n)

infixr 6 _‚Üí·µí_
_‚Üí·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
(P ‚Üí·µí Q) n  =  ‚àÄ k ‚Üí k ‚â§ n ‚Üí P k ‚Üí Q k

‚àÄ·µí : ‚àÄ{A} ‚Üí (A ‚Üí Set·µí) ‚Üí Set·µí
‚àÄ·µí {A} F n = ‚àÄ (v : A) ‚Üí F v n

infixr 8 _·µí
_·µí  : Set ‚Üí Set·µí
(p ·µí) zero = ‚ä§
(p ·µí) (suc n) = p

‚ñ∑·µí_ : Set·µí ‚Üí Set·µí
(‚ñ∑·µí P) zero     =  ‚ä§
(‚ñ∑·µí P) (suc n)  =  P n

iter : ‚àÄ {‚Ñì} {A : Set ‚Ñì} ‚Üí ‚Ñï ‚Üí (A ‚Üí A) ‚Üí (A ‚Üí A)
iter zero    F  =  id
iter (suc n) F  =  F ‚àò iter n F

iter-subtract : ‚àÄ{‚Ñì}{A : Set ‚Ñì}{P : A}
  ‚Üí (F : A ‚Üí A)
  ‚Üí (j k : ‚Ñï)
  ‚Üí j ‚â§ k
  ‚Üí iter j F (iter (k ‚à∏ j) F P) ‚â° iter k F P
iter-subtract {A = A} {P} F .zero k z‚â§n = refl
iter-subtract {A = A} {P} F (suc j) (suc k) (s‚â§s j‚â§k)
  rewrite iter-subtract{A = A}{P} F j k j‚â§k = refl

Pred·µí : Set ‚Üí Set‚ÇÅ
Pred·µí A = A ‚Üí Set·µí

‚ä§·µñ : ‚àÄ{A} ‚Üí Pred·µí A
‚ä§·µñ x = ‚ä§·µí

‚ä•·µñ : ‚àÄ{A} ‚Üí Pred·µí A
‚ä•·µñ x = ‚ä•·µí

Œº·µñ : ‚àÄ {A} ‚Üí (Pred·µí A ‚Üí Pred·µí A) ‚Üí Pred·µí A
(Œº·µñ F) x k  = iter (suc k) F ‚ä§·µñ x k

{------------------- Eventually true at 0 --------------------}

ee : Set·µí ‚Üí Set
ee P  =  P zero

ee-‚ä• : ee ‚ä•·µí
ee-‚ä• = tt

ee-‚ä§ : ee ‚ä§·µí
ee-‚ä§ = tt

ee-√ó : ‚àÄ {P Q} ‚Üí ee P ‚Üí ee Q ‚Üí ee (P √ó·µí Q)
ee-√ó P0 Q0 = (P0 , Q0)

ee-‚äé : ‚àÄ {P Q} ‚Üí ee P ‚Üí ee Q ‚Üí ee (P ‚äé·µí Q)
ee-‚äé P0 Q0  =  inj‚ÇÅ P0    -- or `inj‚ÇÇ Q0`

ee-‚Üí : ‚àÄ {P Q} ‚Üí ee Q ‚Üí ee (P ‚Üí·µí Q)
ee-‚Üí Q0 zero z‚â§n P0 = Q0

ee-‚àÄ : ‚àÄ{A F}
   ‚Üí (‚àÄ v ‚Üí ee (F v))
   ‚Üí ee (‚àÄ·µí {A} F)
ee-‚àÄ {F} eeF v = eeF v

ee-P·µí : (P : Set)
   ‚Üí ee (P ·µí)
ee-P·µí P = tt

ee·µñ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Set
ee·µñ P = ‚àÄ x ‚Üí P x 0

{- the following lemma is currently unused -}
ee-iter : ‚àÄ{A}
    (i : ‚Ñï)
  ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
  ‚Üí (‚àÄ p ‚Üí ee·µñ p ‚Üí ee·µñ (F p)) 
  ‚Üí ee·µñ (iter i F ‚ä§·µñ)
ee-iter zero F eeF x = tt
ee-iter (suc i) F eeF =
  eeF (iter i F (Œª x x‚ÇÅ ‚Üí ‚ä§)) (ee-iter i F eeF)

ee-Œº : ‚àÄ{A}{F : Pred·µí A ‚Üí Pred·µí A}
   ‚Üí (‚àÄ p ‚Üí ee·µñ p ‚Üí ee·µñ (F p)) 
   ‚Üí ee·µñ (Œº·µñ F)
ee-Œº {A}{F} eeF x = eeF (Œª _ _ ‚Üí ‚ä§) (Œª x ‚Üí tt) x  

{------------------- Downward Closed --------------------}

dc : Set·µí ‚Üí Set
dc P  =  ‚àÄ n ‚Üí P n ‚Üí ‚àÄ k ‚Üí k ‚â§ n ‚Üí P k

dc-‚ä• : dc ‚ä•·µí
dc-‚ä• zero tt k z‚â§n  =   tt
dc-‚ä• (suc n) ()

dc-‚ä§ : dc ‚ä§·µí
dc-‚ä§  =  Œª n ‚ä§·µín k k‚â§n ‚Üí tt

dc-√ó : ‚àÄ {P Q} ‚Üí dc P ‚Üí dc Q ‚Üí dc (P √ó·µí Q)
dc-√ó dcP dcQ n (Pn , Qn) k k‚â§n  =  dcP n Pn k k‚â§n , dcQ n Qn k k‚â§n

dc-‚äé : ‚àÄ {P Q} ‚Üí dc P ‚Üí dc Q ‚Üí dc (P ‚äé·µí Q)
dc-‚äé dcP dcQ n (inj‚ÇÅ Pn) k k‚â§n  =  inj‚ÇÅ (dcP n Pn k k‚â§n)
dc-‚äé dcP dcQ n (inj‚ÇÇ Qn) k k‚â§n  =  inj‚ÇÇ (dcQ n Qn k k‚â§n)

dc-‚Üí·µí : ‚àÄ {P Q} ‚Üí dc (P ‚Üí·µí Q)
dc-‚Üí·µí n [P‚Üí·µíQ]n k k‚â§n i i‚â§k Pi = [P‚Üí·µíQ]n i (‚â§-trans i‚â§k k‚â§n) Pi

dc-‚àÄ : ‚àÄ{A F}
  ‚Üí (‚àÄ v ‚Üí dc (F v))
  ‚Üí dc (‚àÄ·µí {A} F)
dc-‚àÄ {A}{F} dcF n ‚àÄFn k k‚â§n v = dcF v n (‚àÄFn v) k k‚â§n

dc-P·µí : (P : Set)
   ‚Üí dc (P ·µí)
dc-P·µí P n Pn zero k‚â§n = tt
dc-P·µí P (suc n) Pn (suc k) (s‚â§s k‚â§n) = Pn

_iff_ : Set ‚Üí Set ‚Üí Set
P iff Q = (P ‚Üí Q) √ó (Q ‚Üí P)

monotonic : ‚àÄ{A} (F : Pred·µí A ‚Üí Pred·µí A) ‚Üí Set‚ÇÅ
monotonic F = ‚àÄ {P}{Q} ‚Üí (‚àÄ x i ‚Üí (P x) i ‚Üí (Q x) i)
                       ‚Üí (‚àÄ x i ‚Üí (F P x) i ‚Üí (F Q x) i)

dc·µñ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Set
dc·µñ P = ‚àÄ n x ‚Üí P x n ‚Üí ‚àÄ k ‚Üí k ‚â§ n ‚Üí P x k

dc-iter-aux : ‚àÄ(i : ‚Ñï){A}
   ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
   ‚Üí (‚àÄ p ‚Üí dc·µñ p ‚Üí dc·µñ (F p))
   ‚Üí dc·µñ (iter i F ‚ä§·µñ)
dc-iter-aux zero F dcF = Œª n x _ k _ ‚Üí tt
dc-iter-aux (suc i) F dcF =
  let IH = dc-iter-aux i F dcF in
  dcF (iter i F ‚ä§·µñ) IH

dc-iter : ‚àÄ(i : ‚Ñï){A}{F : Pred·µí A ‚Üí Pred·µí A}{x}
   ‚Üí monotonic F
   ‚Üí dc (Œª k ‚Üí iter k F ‚ä§·µñ x i)
dc-iter i {A}{F}{x} mf k Fki j j‚â§k = lemma‚Ä≤ i j k mf (‚â§‚áí‚â§‚Ä≤ j‚â§k) Fki
   where
   lemma‚Ä≤ : ‚àÄ(i j k : ‚Ñï){A}{F : Pred·µí A ‚Üí Pred·µí A}{x}
       ‚Üí monotonic F
       ‚Üí j ‚â§‚Ä≤ k ‚Üí iter k F ‚ä§·µñ x i ‚Üí iter j F ‚ä§·µñ x i
   lemma‚Ä≤ i j .j mF _‚â§‚Ä≤_.‚â§‚Ä≤-refl iter-k = iter-k
   lemma‚Ä≤ i zero (suc k) mF (‚â§‚Ä≤-step j‚â§k) iter-k = tt
   lemma‚Ä≤ i (suc j) (suc k) {A}{F}{x} mF (‚â§‚Ä≤-step j‚â§k) iter-k =
        mF IH x i iter-k
        where
        IH : (x‚ÇÇ : A) (i‚ÇÇ : ‚Ñï) ‚Üí iter k F ‚ä§·µñ x‚ÇÇ i‚ÇÇ ‚Üí iter j F ‚ä§·µñ x‚ÇÇ i‚ÇÇ
        IH x‚Ä≤ i‚Ä≤ iterki‚Ä≤ = lemma‚Ä≤ i‚Ä≤ j k mF
                              (‚â§‚áí‚â§‚Ä≤ (‚â§-trans (n‚â§1+n j) (‚â§‚Ä≤‚áí‚â§ j‚â§k))) iterki‚Ä≤

{-
  It seems that monotonic is too strong a requirement.
  Having trouble with some contravariance in trying to
  prove that pre-ùì• is monotonic.
-}

-- dc-Œº : ‚àÄ{A}{F : Pred·µí A ‚Üí Pred·µí A}
--    ‚Üí monotonic F
--    ‚Üí (‚àÄ p ‚Üí dc·µñ p ‚Üí dc·µñ (F p))
--    ‚Üí dc·µñ (Œº·µñ F) 
-- dc-Œº {A}{F} mF dcF n x ŒºFxn k k‚â§n = {!!}
  -- let iternk = dc-iter-aux n F dcF n x ŒºFxn k k‚â§n in
  -- dc-iter k mF n iternk k k‚â§n

{------------------- well founded and nonexpansive --------------------}

‚Üì·µí : ‚Ñï ‚Üí Set·µí ‚Üí Set·µí
‚Üì·µí k S j = j < k  √ó  S j

_‚â°·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set
S ‚â°·µí T = ‚àÄ i ‚Üí S i iff T i

‚â°·µí-refl : ‚àÄ{S T : Set·µí}
  ‚Üí S ‚â° T
  ‚Üí S ‚â°·µí T
‚â°·µí-refl refl i = (Œª x ‚Üí x) , (Œª x ‚Üí x)

‚â°·µí-sym : ‚àÄ{S T : Set·µí}
  ‚Üí S ‚â°·µí T
  ‚Üí T ‚â°·µí S
‚â°·µí-sym ST i = (proj‚ÇÇ (ST i)) , (proj‚ÇÅ (ST i))

‚â°·µí-trans : ‚àÄ{S T R : Set·µí}
  ‚Üí S ‚â°·µí T
  ‚Üí T ‚â°·µí R
  ‚Üí S ‚â°·µí R
‚â°·µí-trans ST TR i = (Œª z ‚Üí proj‚ÇÅ (TR i) (proj‚ÇÅ (ST i) z))
                 , (Œª z ‚Üí proj‚ÇÇ (ST i) (proj‚ÇÇ (TR i) z))

‚Üì·µñ : ‚Ñï ‚Üí ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Pred·µí A
‚Üì·µñ k P x = ‚Üì·µí k (P x)

_‚â°·µñ_ : ‚àÄ{A} ‚Üí Pred·µí A ‚Üí Pred·µí A ‚Üí Set
P ‚â°·µñ Q = ‚àÄ x ‚Üí P x ‚â°·µí Q x

‚â°·µñ-refl : ‚àÄ{A}{P Q : Pred·µí A}
  ‚Üí P ‚â° Q
  ‚Üí P ‚â°·µñ Q
‚â°·µñ-refl refl x = (‚â°·µí-refl refl)

‚â°·µñ-sym : ‚àÄ{A}{P Q : Pred·µí A}
  ‚Üí P ‚â°·µñ Q
  ‚Üí Q ‚â°·µñ P
‚â°·µñ-sym PQ x = (‚â°·µí-sym (PQ x))
  
‚â°·µñ-trans : ‚àÄ{A}{P Q R : Pred·µí A}
  ‚Üí P ‚â°·µñ Q
  ‚Üí Q ‚â°·µñ R
  ‚Üí P ‚â°·µñ R
‚â°·µñ-trans{A}{P}{Q}{R} PQ QP x = ‚â°·µí-trans{T = Q x} (PQ x) (QP x)

extensional·µñ : ‚àÄ{A} (F : Pred·µí A ‚Üí Pred·µí A) ‚Üí Set‚ÇÅ
extensional·µñ F = ‚àÄ{P}{Q} ‚Üí P ‚â°·µñ Q ‚Üí F P ‚â°·µñ F Q

-- ‚â°·µñ-cong : ‚àÄ{A}{P Q : Pred·µí A}
--   ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
--   ‚Üí P ‚â°·µñ Q
--   ‚Üí F P ‚â°·µñ F Q
-- ‚â°·µñ-cong F PQ x i = (Œª FP ‚Üí {!!}) , Œª FQ ‚Üí {!!}

ext-‚Üì : ‚àÄ{A}
    (k : ‚Ñï)
  ‚Üí extensional·µñ{A} (‚Üì·µñ k)
ext-‚Üì k PQ x i = (Œª { (fst , snd) ‚Üí fst , proj‚ÇÅ (PQ x i) snd})
                , Œª { (fst , snd) ‚Üí fst , proj‚ÇÇ (PQ x i) snd}

{-
  Only need k on input to get k on output.
  Related to continuity.
-}
nonexpansive : ‚àÄ{A} ‚Üí (Pred·µí A ‚Üí Pred·µí A) ‚Üí Set‚ÇÅ
nonexpansive F = ‚àÄ P k ‚Üí (‚Üì·µñ k (F P)) ‚â°·µñ (‚Üì·µñ k (F (‚Üì·µñ k P)))

wellfounded : ‚àÄ{A} ‚Üí (Pred·µí A ‚Üí Pred·µí A) ‚Üí Set‚ÇÅ
wellfounded F = ‚àÄ P k ‚Üí (‚Üì·µñ (suc k) (F P)) ‚â°·µñ (‚Üì·µñ (suc k) (F (‚Üì·µñ k P)))

{-
  Does wellfounded imply extensional?
-}

lemma15a : ‚àÄ{A}{P Q : Pred·µí A}{j}
  ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
  ‚Üí wellfounded F
  ‚Üí extensional·µñ F
  ‚Üí ‚Üì·µñ j (iter j F P) ‚â°·µñ ‚Üì·µñ j (iter j F Q)
lemma15a {A} {P} {Q} {zero} F wfF extF x i = (Œª { ()}) , Œª { ()}
lemma15a {A} {P} {Q} {suc j} F wfF extF =
  ‚â°·µñ-trans X (‚â°·µñ-trans Y Z)
  where
  X : ‚Üì·µñ (suc j) (F (iter j F P))
       ‚â°·µñ ‚Üì·µñ (suc j) (F (‚Üì·µñ j (iter j F P)))
  X = wfF (iter j F P) j 
  IH : ‚Üì·µñ j (iter j F P) ‚â°·µñ ‚Üì·µñ j (iter j F Q)
  IH = lemma15a{A}{P}{Q} {j = j} F wfF extF
  Y : ‚Üì·µñ (suc j) (F (‚Üì·µñ j (iter j F P)))
       ‚â°·µñ ‚Üì·µñ (suc j) (F (‚Üì·µñ j (iter j F Q)))
  Y = ext-‚Üì {A} (suc j) (extF IH)
  Z : ‚Üì·µñ (suc j) (F (‚Üì·µñ j (iter j F Q)))
      ‚â°·µñ ‚Üì·µñ (suc j) (F (iter j F Q))
  Z = ‚â°·µñ-sym (wfF (iter j F Q) j)

lemma15b : ‚àÄ{A}{P : Pred·µí A}{j k}
  ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
  ‚Üí wellfounded F
  ‚Üí extensional·µñ F
  ‚Üí j ‚â§ k
  ‚Üí ‚Üì·µñ j (iter j F P) ‚â°·µñ ‚Üì·µñ j (iter k F P)
lemma15b{A}{P}{j}{k} F wfF extF j‚â§k =
    let eq = lemma15a {A}{P}{iter (k ‚à∏ j) F P}{j} F wfF extF in
    ‚â°·µñ-trans eq (ext-‚Üì j (‚â°·µñ-refl Goal))
    where
    Goal : (Œª z z‚ÇÅ ‚Üí iter j F (iter (k ‚à∏ j) F P) z z‚ÇÅ)
           ‚â° (Œª z z‚ÇÅ ‚Üí iter k F P z z‚ÇÅ)
    Goal rewrite iter-subtract{A = Pred·µí A}{P} F j k j‚â§k = refl

subst·µñ : ‚àÄ{A}{P Q : Pred·µí A}{x}
  ‚Üí P ‚â°·µñ Q
  ‚Üí (i : ‚Ñï)
  ‚Üí P x i
  ‚Üí Q x i
subst·µñ {x = x} PQ i P = proj‚ÇÅ (PQ x i) P

dc-Œº : ‚àÄ{A}{F : Pred·µí A ‚Üí Pred·µí A}
   ‚Üí wellfounded F
   ‚Üí extensional·µñ F
   ‚Üí (‚àÄ p ‚Üí dc·µñ p ‚Üí dc·µñ (F p))
   ‚Üí dc·µñ (Œº·µñ F) 
dc-Œº {A}{F} wfF extF dcF k v ŒºFvk j j‚â§k = T
   where
   X : iter (suc k) F ‚ä§·µñ v k
   X = ŒºFvk
   Y : iter (suc k) F ‚ä§·µñ v j
   Y = dc-iter-aux (suc k) F dcF k v X j j‚â§k
   Z : ‚Üì·µñ (suc j) (iter (suc k) F ‚ä§·µñ) v j
   Z = ‚â§-refl , Y
   W : ‚Üì·µñ (suc j) (iter (suc j) F ‚ä§·µñ) v j
   W = let eq = lemma15b{A}{‚ä§·µñ}{suc j}{suc k} F wfF extF (s‚â§s j‚â§k)
       in subst·µñ (‚â°·µñ-sym eq) j Z
   T : (iter (suc j) F ‚ä§·µñ) v j
   T = proj‚ÇÇ W
   
{------------------- Monotonic --------------------}

-- mono-‚Üí·µí : ‚àÄ{A}
--    ‚Üí (F : Pred·µí A ‚Üí Pred·µí A)
--    ‚Üí monotonic F
--    ‚Üí (G : Pred·µí A ‚Üí Pred·µí A)
--    ‚Üí monotonic G
--    ‚Üí monotonic (Œª P x ‚Üí (F P x) ‚Üí·µí (G P x))
-- mono-‚Üí·µí F mF G mG {P}{Q} P‚ÜíQ x i FP‚ÜíGP k k‚â§i FQk = {!!}

{-
have
FQk   : F Q x k
P‚ÜíQ   : (x‚ÇÅ : A) (i‚ÇÅ : ‚Ñï) ‚Üí P x‚ÇÅ i‚ÇÅ ‚Üí Q x‚ÇÅ i‚ÇÅ
FP‚ÜíGP : (F P x ‚Üí·µí G P x) i

Goal: G Q x k

-}


{-------------------------------------------------------------------------------
  Experiment: attaching downward closedness and eventually zero
 ------------------------------------------------------------------------------}

record Set‚Çñ : Set‚ÇÅ where
  field
    val : Set·µí
    dcl : dc val
    ez : ee val
open Set‚Çñ public

_‚Çñ : Set ‚Üí Set‚Çñ
P ‚Çñ = record { val = (P ·µí) ; dcl = dc-P·µí P ; ez = ee-P·µí P }

‚ä•‚Çñ : Set‚Çñ
‚ä•‚Çñ = record { val = ‚ä•·µí ; dcl = dc-‚ä• ; ez = ee-‚ä• }

‚ä§‚Çñ : Set‚Çñ
‚ä§‚Çñ  = record { val = ‚ä§·µí ; dcl = dc-‚ä§ ; ez = ee-‚ä§ }

_√ó‚Çñ_ : Set‚Çñ ‚Üí Set‚Çñ ‚Üí Set‚Çñ
(P √ó‚Çñ Q) = record { val = (val P √ó·µí val Q)
                  ; dcl = dc-√ó (dcl P) (dcl Q)
                  ; ez = ee-√ó {val P}{val Q} (ez P) (ez Q) }

_‚äé‚Çñ_ : Set‚Çñ ‚Üí Set‚Çñ ‚Üí Set‚Çñ
(P ‚äé‚Çñ Q) = record { val = (val P ‚äé·µí val Q)
                  ; dcl = dc-‚äé (dcl P) (dcl Q)
                  ; ez = ee-‚äé {val P}{val Q} (ez P) (ez Q) }

_‚Üí‚Çñ_ : Set‚Çñ ‚Üí Set‚Çñ ‚Üí Set‚Çñ
(P ‚Üí‚Çñ Q) = record { val = (Œª k ‚Üí ‚àÄ j ‚Üí j ‚â§ k ‚Üí val P j ‚Üí val Q j)
                  ; dcl = dc-‚Üí·µí 
                  ; ez = (ee-‚Üí (ez Q)) }

‚àÄ‚Çñ : ‚àÄ{A} ‚Üí (A ‚Üí Set‚Çñ) ‚Üí Set‚Çñ
‚àÄ‚Çñ {A} P = record { val = (Œª k ‚Üí ‚àÄ (v : A) ‚Üí val (P v) k)
                  ; dcl = (Œª n f k k‚â§n v ‚Üí dcl (P v) n (f v) k k‚â§n)
                  ; ez = ee-‚àÄ {F = Œª x ‚Üí val (P x)} Œª v ‚Üí ez (P v) }

‚ñ∑_ : Set‚Çñ ‚Üí Set‚Çñ
‚ñ∑ P = record { val = ‚ñ∑·µí (val P) ; dcl = G ; ez = H }
  where
  G : dc (‚ñ∑·µí (val P))
  G n x zero k‚â§n = tt
  G (suc n) Pn (suc k) (s‚â§s k‚â§n) = (dcl P) n Pn k k‚â§n

  H : ee (‚ñ∑·µí (val P))
  H = tt

Pred‚Çñ : Set ‚Üí Set‚ÇÅ
Pred‚Çñ A = A ‚Üí Set‚Çñ

‚ä§·¥æ : ‚àÄ{A} ‚Üí Pred‚Çñ A
‚ä§·¥æ x = ‚ä§‚Çñ

‚ä•·¥æ : ‚àÄ{A} ‚Üí Pred‚Çñ A
‚ä•·¥æ x = ‚ä•‚Çñ

monotonic‚Çñ : ‚àÄ{A} (F : Pred‚Çñ A ‚Üí Pred‚Çñ A) ‚Üí Set‚ÇÅ
monotonic‚Çñ F = ‚àÄ P Q x i ‚Üí (val (P x) i ‚Üí val (Q x) i)
                        ‚Üí (val (F P x) i ‚Üí val (F Q x) i)

record Functional (A : Set) : Set‚ÇÅ where
  field
    fun : Pred‚Çñ A ‚Üí Pred‚Çñ A
    mono : monotonic‚Çñ fun
open Functional    

-- dc-iter-index : ‚àÄ{i j k : ‚Ñï}{A}{F : Functional A}{x : A}
--    ‚Üí j ‚â§ k
--    ‚Üí val (iter i (fun F) ‚ä§·¥æ x) k
--    ‚Üí val (iter i (fun F) ‚ä§·¥æ x) j
-- dc-iter-index {zero} {j} {k} j‚â§k iterFk = tt
-- dc-iter-index {suc i} {j} {k}{A}{F}{x} j‚â§k iterFk =
--    let dcF = dcl (fun F (iter i (fun F) ‚ä§·¥æ) x) in
--    dcF k iterFk j j‚â§k

-- dc-iter-depth : ‚àÄ(i j k : ‚Ñï){A}{F : Functional A}{x : A}
--    ‚Üí j ‚â§‚Ä≤ k
--    ‚Üí val (iter k (fun F) ‚ä§·¥æ x) i
--    ‚Üí val (iter j (fun F) ‚ä§·¥æ x) i
-- dc-iter-depth i j .j _‚â§‚Ä≤_.‚â§‚Ä≤-refl iterkF = iterkF
-- dc-iter-depth i zero (suc k) (‚â§‚Ä≤-step j‚â§k) iterkF = tt
-- dc-iter-depth i (suc j) (suc k) {A}{F}{x} (‚â§‚Ä≤-step j‚â§k) FiterkFi =
--   mono F (iter k (fun F) ‚ä§·¥æ) (iter j (fun F) ‚ä§·¥æ) x i
--                   (Œª iterkFi ‚Üí dc-iter-depth i j k {A}{F}
--                       (‚â§‚áí‚â§‚Ä≤ (‚â§-trans (n‚â§1+n _) (‚â§‚Ä≤‚áí‚â§ j‚â§k))) iterkFi) FiterkFi

-- Œº·¥æ : ‚àÄ{A} ‚Üí (F : Functional A) ‚Üí Pred‚Çñ A
-- (Œº·¥æ {A} F) x = record
--   { val = (Œª k ‚Üí val (iter k (fun F) ‚ä§·¥æ x) k) 
--   ; dcl = (Œª n Fnxn k k‚â§n ‚Üí
--              let Fnxk = dc-iter-index{n}{k}{n}{A}{F}{x} k‚â§n Fnxn in
--              dc-iter-depth k k n {F = F}{x = x} (‚â§‚áí‚â§‚Ä≤ k‚â§n) Fnxk)
--   ; ez = tt }

Lob·µí : ‚àÄ{P : Set·µí}
   ‚Üí (‚àÄ k ‚Üí (‚ñ∑·µí P) k ‚Üí P k)
     ----------------------
   ‚Üí ‚àÄ k ‚Üí P k
Lob·µí {P} ‚ñ∑P‚ÜíP zero = ‚ñ∑P‚ÜíP zero tt
Lob·µí {P} ‚ñ∑P‚ÜíP (suc k) = ‚ñ∑P‚ÜíP (suc k) (Lob·µí ‚ñ∑P‚ÜíP k)

Lob : ‚àÄ{P : Set‚Çñ}
   ‚Üí (‚àÄ k ‚Üí val (‚ñ∑ P) k ‚Üí val P k)
     -----------------------------
   ‚Üí ‚àÄ k ‚Üí val P k
Lob ‚ñ∑P‚ÜíP zero = ‚ñ∑P‚ÜíP zero tt
Lob {P} ‚ñ∑P‚ÜíP (suc k) = ‚ñ∑P‚ÜíP (suc k) (Lob{P} ‚ñ∑P‚ÜíP k)

